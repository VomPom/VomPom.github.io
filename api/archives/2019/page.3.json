{"data":{"index":3,"total":3,"posts":[{"title":" Android中Handler使用导致的内存泄漏","slug":"Android中Handler使用导致的内存泄漏","date":"2019-03-18T01:37:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/18/Android中Handler使用导致的内存泄漏/","excerpt":"<p><strong>1.什么是内存泄漏</strong></p>\n<p>用动态存储分配函数动态开辟的空间，在使用完毕后未被得到释放，结果一直占据该用内存单元，直到程序结束，即所谓的内存泄漏。</p>\n<p><strong>2.是内存泄漏与内存溢出的区别</strong></p>\n<p>内存溢出 Out of Memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p>\n<p>内存泄露 Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p>\n<p>用一个很形象的例子来说明：一个仓库，被无用的物资所占据，而得不到管理员的清理，这里的无用货物占用仓库空间的行为被叫做”内存泄漏“，而某一天仓库由于所存储的物品太多，而无法继续存放物资，这个时候就被叫做“内存溢出”。</p>\n<p><strong>3.内存泄漏导致的问题</strong></p>\n<p>相关内存无法被系统给回收，随着程序运行可以用的内存会越来越少，机子越来越卡，直到内存溢出。（这也是为什么手机电脑很卡之后重启一下后会好很多，主要是相关未被系统回收的内存被回收）</p>\n<p><strong>4、安卓中的内存泄漏</strong></p>\n<p>典型的可能产生内存泄漏的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemoryLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MyActivity</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//可能会导致内存泄漏的代码</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>() &#123;</span><br><span class=\"line\">       [<span class=\"meta\">@Override</span>](https:<span class=\"comment\">//my.oschina.net/u/1162528)</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;&#125;</span><br></pre></td></tr></table></figure>\n<p>产生内存泄漏可能的原因：Handler的工作机制中Handler与Looper以及MessageQueue一起工作的，App启动之后，系统会默认创建一个为主线程服务的Looper对象，负责处理主线程中所有的Message对象，它的生命周期则为整个应用的生命周期。在主线程使用Handler都会默认绑定到这个Looper上面，主线程创建Handler对象，会立即关联Looper对象的MessageQueue，这时发送MessageQueue重的Message会持有Handler的引用， 这样在Looper处理Message时候才会回调到Handler的handleMessage方法。因此，如果Message没有被处理完成，那么Handler对象就不会被垃圾回收。</p>\n<img src=\"https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg\">\n<p>上面的代码，将Handler的实例声明为MemoryLeakActivity类的内部类，在Java中：<strong>非静态内部匿名类会持有外部类的一个隐式引用，这样就可能导致外部类无法被垃圾回收。</strong></p>\n<p>最终由于MessageQueue中的Message 没有处理完成，就会持有Handler对象的引用，而非静态的Handler对象会持有外部类Activity的引用，这个activity无法被回收，从而导致内存泄漏。</p>\n<p><strong>5、解决方案</strong></p>\n<p>1、将Handler声明为静态内部类，这样就不会持有对外部类的引用。</p>\n<p>2、创建一个Looper与一般Java对象一样的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> InnerHandler <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;       </span><br><span class=\"line\"> \t\t<span class=\"comment\">// 声明一个静态Handler类，并持有外部类引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MemoryLeakActivity&gt; mActivity;</span><br><span class=\"line\">       \t<span class=\"keyword\">public</span> <span class=\"title function_\">InnerHandler</span><span class=\"params\">(MemoryLeakActivity activity)</span>&#123;</span><br><span class=\"line\">          \t\t <span class=\"built_in\">this</span>.mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;MemoryLeakActivity&gt;(activity);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","cover":null,"images":["https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg"],"content":"<p><strong>1.什么是内存泄漏</strong></p>\n<p>用动态存储分配函数动态开辟的空间，在使用完毕后未被得到释放，结果一直占据该用内存单元，直到程序结束，即所谓的内存泄漏。</p>\n<p><strong>2.是内存泄漏与内存溢出的区别</strong></p>\n<p>内存溢出 Out of Memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p>\n<p>内存泄露 Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p>\n<p>用一个很形象的例子来说明：一个仓库，被无用的物资所占据，而得不到管理员的清理，这里的无用货物占用仓库空间的行为被叫做”内存泄漏“，而某一天仓库由于所存储的物品太多，而无法继续存放物资，这个时候就被叫做“内存溢出”。</p>\n<p><strong>3.内存泄漏导致的问题</strong></p>\n<p>相关内存无法被系统给回收，随着程序运行可以用的内存会越来越少，机子越来越卡，直到内存溢出。（这也是为什么手机电脑很卡之后重启一下后会好很多，主要是相关未被系统回收的内存被回收）</p>\n<p><strong>4、安卓中的内存泄漏</strong></p>\n<p>典型的可能产生内存泄漏的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemoryLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MyActivity</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//可能会导致内存泄漏的代码</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>() &#123;</span><br><span class=\"line\">       [<span class=\"meta\">@Override</span>](https:<span class=\"comment\">//my.oschina.net/u/1162528)</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;&#125;</span><br></pre></td></tr></table></figure>\n<p>产生内存泄漏可能的原因：Handler的工作机制中Handler与Looper以及MessageQueue一起工作的，App启动之后，系统会默认创建一个为主线程服务的Looper对象，负责处理主线程中所有的Message对象，它的生命周期则为整个应用的生命周期。在主线程使用Handler都会默认绑定到这个Looper上面，主线程创建Handler对象，会立即关联Looper对象的MessageQueue，这时发送MessageQueue重的Message会持有Handler的引用， 这样在Looper处理Message时候才会回调到Handler的handleMessage方法。因此，如果Message没有被处理完成，那么Handler对象就不会被垃圾回收。</p>\n<img src=\"https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg\">\n<p>上面的代码，将Handler的实例声明为MemoryLeakActivity类的内部类，在Java中：<strong>非静态内部匿名类会持有外部类的一个隐式引用，这样就可能导致外部类无法被垃圾回收。</strong></p>\n<p>最终由于MessageQueue中的Message 没有处理完成，就会持有Handler对象的引用，而非静态的Handler对象会持有外部类Activity的引用，这个activity无法被回收，从而导致内存泄漏。</p>\n<p><strong>5、解决方案</strong></p>\n<p>1、将Handler声明为静态内部类，这样就不会持有对外部类的引用。</p>\n<p>2、创建一个Looper与一般Java对象一样的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> InnerHandler <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;       </span><br><span class=\"line\"> \t\t<span class=\"comment\">// 声明一个静态Handler类，并持有外部类引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MemoryLeakActivity&gt; mActivity;</span><br><span class=\"line\">       \t<span class=\"keyword\">public</span> <span class=\"title function_\">InnerHandler</span><span class=\"params\">(MemoryLeakActivity activity)</span>&#123;</span><br><span class=\"line\">          \t\t <span class=\"built_in\">this</span>.mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;MemoryLeakActivity&gt;(activity);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"安卓","slug":"Android","api":"api/tags/Android.json"}],"api":"api/posts/2019/03/18/Android中Handler使用导致的内存泄漏.json"},{"title":"Android开发 LayoutInflater源码解析","slug":"LayoutInflater源码解析","date":"2019-03-03T06:40:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/03/LayoutInflater源码解析/","excerpt":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","cover":null,"images":[],"content":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/03/03/LayoutInflater源码解析.json"}],"info":{"type":"archive","year":2019}},"api":"api/archives/2019/page.3.json"}