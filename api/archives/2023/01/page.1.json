{"data":{"index":1,"total":1,"posts":[{"title":"[转]OpenGL黑屏及渲染不出来的常见原因总结","slug":"转-OpenGL黑屏及渲染不出来的常见原因总结","date":"2023-01-15T04:18:00.000Z","updated":"2025-09-15T13:25:10.075Z","comments":true,"url":"2023/01/15/转-OpenGL黑屏及渲染不出来的常见原因总结/","excerpt":"<p>最近在做 Unitiy 与原生渲染相关的研究学习，对于OpenGL这块自己也是接触不多，有很多的坑需要自己去踩，做的过程中遇到最多的问题是：<strong>渲染黑屏</strong> 在掘金上搜到这篇文章<a href=\"https://juejin.cn/post/6844903910742687751\">《OpenGL黑屏及渲染不出来的常见原因总结》</a>很不错，于是记录转载过来，方便日后学习以及问题排查。</p>\n<p>原文链接：<br><a href=\"https://juejin.cn/post/6844903910742687751\">https://juejin.cn/post/6844903910742687751</a></p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>做OpenGL开发的同学，想必一定碰到过黑屏的问题，特别是刚接触OpenGL的同学，可能会觉得黑屏问题让人相当头疼，因为OpenGL的查错没有一般编程时那么简单，我们通常是利用glGetError()这个API来获取错误码，但这个方法获取的错误是调用这个方法时，已经产生的错误，它有可能是很久之前产生的，这样查越来还是比较不方便的，而且，有些黑屏以及渲染不出来的情况下，glGetError()也不会报任何错。</p>\n<p>在给大家总结常见的黑屏原因之前，我们先来铺垫一下基础知识，其实屏幕也是一块frame buffer，但它比较特殊，是0号<code>frame buffer</code>，我们如果自己申请frame buffer的话，得到的id是大于0的。那么frame buffer它就会有自己的颜色，如果不特意设置的话，它就是黑色的，因此如果我们渲染操作未正确执行，什么也没渲染出来，自然看到了底色的黑色。</p>\n<p>我们也可以通过<code>glClearColor()+glClear()</code>来设置消除颜色及执行消除操作，来将一个frame buffer清成某种颜色。因此，如果你将frame buffer清成了别的颜色，但其它渲染操作未正确执行，你有可能也不是黑屏，而是你设置的消除颜色，这里也一并总结了，统成为黑屏，同时也包括其它一些不正确的情形。<br>如果不是渲染到屏幕上，是渲染到一个离屏的frame buffer上，同样也会遇到各种黑掉或者渲染不出来的情况，有些原因会同时导致上屏和离屏都黑，有些只影响其中一种情况。</p>\n<p>下面给大家总结一下：</p>\n<ul>\n<li><strong>调用线程的Context不正确</strong></li>\n</ul>\n<p>OpenGL的API在调用时需要有正确的上下文，在Android中称为<code>EGL Context</code>，IOS中是<code>EAGL Context</code>，其它平台有其它平台的叫法，但原理类似。一个线程需要跟EGL Context绑定才能正确使用OpenGL的API，否则调用不会有任何效果，具体可参考我的一篇文章：<a href=\"https://juejin.cn/post/6844903858380996616\">《OpenGL ES 高级进阶：EGL及GL线程》</a>。</p>\n<blockquote>\n<p>【转载注】这也是我碰到的第一个坑，因为从 Unity 调用到 Android 侧的时候，gl渲染环境没有在一个地方。我花了很大的精力去排查前面shader相关的渲染问题，一直没有注意这个问题，所以浪费了大量时间。我个人认为这个问题需要像使用一门新语言的时候要先确保它能打印出”Hello World”一样，是整个流程的前提。</p>\n</blockquote>\n<ul>\n<li><strong>GL Program不正确</strong></li>\n</ul>\n<p>OpenGL渲染需要通过GL Program，它就是一个程序，和我们的普通程序是一个道理，只不过它是运行在GPU上的，如果它不正确了，那自然就渲染不出正确的结果，常见的不正确原因为shader编译失败，通常是因为语法错误，可以用glGetShaderInfoLog()来在编译之后查看相关shader信息，以及在Link后用glGetProgramInfoLog()查看相关program信息，如果得到的信息为空，则说明没有错。</p>\n<ul>\n<li><strong>没有use program</strong></li>\n</ul>\n<p>渲染前需要通过glUseProgran设置本次渲染所用的program，如果未设置则无法执行到对应的shader，自然无法渲染出来。</p>\n<ul>\n<li><strong>未调用glDrawXXX()</strong></li>\n</ul>\n<p>要渲染出来东西，必须调用glDrawXXX()，一般很少出现没调的情况，一般都是低级失误，最好也排查一下。</p>\n<p>对于底层是多buffer实现的surface，渲染后未进行swap buffer<br>常见的是双buffer，此时有一个back buffer和一个front buffer，front buffer是正在显存的这个，back buffer是正在渲染的，如果draw call后没有swap buffer，那back buffer不会呈现出来，因此渲染不出来，这里是特定上屏，如果渲染不是要上屏，则无需考虑这个问题。</p>\n<ul>\n<li><strong>frame buffer的attachment不正确</strong></li>\n</ul>\n<p>在离屏渲染情况下，当我们要渲染到一个frame buffer上，这个frame buffer必须正确绑定了attachment，否则相当于frame buffer是个空壳，它没有任何可用于承载渲染结果的空间。</p>\n<ul>\n<li><strong>顶点attribute值设置错误</strong></li>\n</ul>\n<p>顶点关系到渲染到什么位置，如果设置错误导致渲染的位置在可视范围之外，那么就看不到了，这里的范围是什么呢？如果直接用NDC坐标渲染，那就是-1~1,如果是用世界坐标来渲染，那就要看具体设置的投影矩阵，详细原理可参考我的另一篇文章《OpenGL 3D渲染技术：坐标系及矩阵变换》。</p>\n<p>attribute未启用<br>我们通过想要设置一个attribute的值，需要获取这个attribute的location，并通过glVertexAttribPointer()给它设置值，但别忘了需要使用glGetAttribLocation()来启用这个location，不然设置了也没有用，默认是不启用的。</p>\n<ul>\n<li><strong>VAO&#x2F;VBO未绑定或者绑定错误</strong></li>\n</ul>\n<p>如果是用VAO&#x2F;VBO的方式渲染，在渲染前要绑定正确的VAO&#x2F;VBO，否则等于没指定或者指定错了顶点，就渲染不出来了。</p>\n<ul>\n<li><strong>VAO&#x2F;VBO方式渲染之后未重置，后面接着用非VAO&#x2F;VBO方式渲染</strong></li>\n</ul>\n<p>在用VAO&#x2F;VBO方式渲染之后如果未重置，那么顶点绑定的还是VAO&#x2F;VBO指定的顶点，此时如果再用普通的glVertexAttribPointer()的方式指定顶点渲染，那用法上会冲突，因为VAO&#x2F;VBO的方式要求glVertexAttribPointer()函数不指定顶点数据，而普通用法中glVertexAttribPointer()又要指定顶点数据，此时容易造成顶点混乱，渲染结果不正确。</p>\n<p>View Port设置错误<br>View Port即视口，可以理解成我们通过一个窗口去看见OpenGL世界坐标系里渲染的景物，就像我们通过窗口看到室外的景物一样，如果这个窗口没设置或者设置不正确，也会导致看不到东西，一般情况下，我们会将它设置为surface的大小，这样渲染出来的东西就刚好填满这个surface。</p>\n<ul>\n<li><strong>没有渲染到0号frame buffer</strong></li>\n</ul>\n<p>有时候渲染操作有很多步，想做完这些步骤后，再将做好的结果显示的屏幕上，这时就会用一些frame buffer来做离屏渲染，但在最后一步渲染到屏幕上时，需要将frame buffer绑定回0号，才能上屏。</p>\n<ul>\n<li><strong>渲染了一个不正确的纹理</strong></li>\n</ul>\n<p>例如我们希望对一个纹理做一些处理然后渲染出来，但如果这个纹理本身是不正确的，例如前面的步骤出了一些错，导致给过来的纹理id不正确，比如是0，或者纹理id是正确的，但这个纹理是全黑的或者空的，也会导致黑屏。</p>\n<ul>\n<li><strong>glDrawXXX()方法传递的顶点数不正确</strong></li>\n</ul>\n<p>我们在调用glDrawXXX()，会设置顶点数组的开始位置和数量，如果设置不正确，导致传递的顶点是0个，也会导致渲染不出来任何东西。</p>\n<ul>\n<li><strong>顶点buffer的position不正确</strong></li>\n</ul>\n<p>这一点主要是针对java及kotlin，glVertexAttribPointer()接受数据时是通过一个buffer，而我们往buffer是put数据后，buffer的position会相应地往后移动，因此在调用glVertexAttribPointer()之前，记得将position设回到0，否则它将从末尾开始取数据，当然就取不到了。</p>\n<ul>\n<li><strong>面剔除的原因</strong></li>\n</ul>\n<p>如果开启了cull face，那么会按你指定的cull方式来剔除指定顶点旋转顺序的三角面片，如果视线方向看过去的刚好被剔除了，自然就看不见了。</p>\n<ul>\n<li><strong>未开启颜色混合渲染了有透明度的纹理</strong></li>\n</ul>\n<p>OpenGL默认是不开启颜色混合的，这会导致透明的部分通常会被渲染成黑色，而不是透出下面的颜色，具体可以参数我的一篇文章：《OpenGL ES 高级进阶：颜色混合》。</p>\n<p>作者：程序员kenney</p>\n<p>链接：<a href=\"https://juejin.cn/post/6844903910742687751\">https://juejin.cn/post/6844903910742687751</a></p>\n<p>来源：稀土掘金</p>\n","cover":null,"images":[],"content":"<p>最近在做 Unitiy 与原生渲染相关的研究学习，对于OpenGL这块自己也是接触不多，有很多的坑需要自己去踩，做的过程中遇到最多的问题是：<strong>渲染黑屏</strong> 在掘金上搜到这篇文章<a href=\"https://juejin.cn/post/6844903910742687751\">《OpenGL黑屏及渲染不出来的常见原因总结》</a>很不错，于是记录转载过来，方便日后学习以及问题排查。</p>\n<p>原文链接：<br><a href=\"https://juejin.cn/post/6844903910742687751\">https://juejin.cn/post/6844903910742687751</a></p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>做OpenGL开发的同学，想必一定碰到过黑屏的问题，特别是刚接触OpenGL的同学，可能会觉得黑屏问题让人相当头疼，因为OpenGL的查错没有一般编程时那么简单，我们通常是利用glGetError()这个API来获取错误码，但这个方法获取的错误是调用这个方法时，已经产生的错误，它有可能是很久之前产生的，这样查越来还是比较不方便的，而且，有些黑屏以及渲染不出来的情况下，glGetError()也不会报任何错。</p>\n<p>在给大家总结常见的黑屏原因之前，我们先来铺垫一下基础知识，其实屏幕也是一块frame buffer，但它比较特殊，是0号<code>frame buffer</code>，我们如果自己申请frame buffer的话，得到的id是大于0的。那么frame buffer它就会有自己的颜色，如果不特意设置的话，它就是黑色的，因此如果我们渲染操作未正确执行，什么也没渲染出来，自然看到了底色的黑色。</p>\n<p>我们也可以通过<code>glClearColor()+glClear()</code>来设置消除颜色及执行消除操作，来将一个frame buffer清成某种颜色。因此，如果你将frame buffer清成了别的颜色，但其它渲染操作未正确执行，你有可能也不是黑屏，而是你设置的消除颜色，这里也一并总结了，统成为黑屏，同时也包括其它一些不正确的情形。<br>如果不是渲染到屏幕上，是渲染到一个离屏的frame buffer上，同样也会遇到各种黑掉或者渲染不出来的情况，有些原因会同时导致上屏和离屏都黑，有些只影响其中一种情况。</p>\n<p>下面给大家总结一下：</p>\n<ul>\n<li><strong>调用线程的Context不正确</strong></li>\n</ul>\n<p>OpenGL的API在调用时需要有正确的上下文，在Android中称为<code>EGL Context</code>，IOS中是<code>EAGL Context</code>，其它平台有其它平台的叫法，但原理类似。一个线程需要跟EGL Context绑定才能正确使用OpenGL的API，否则调用不会有任何效果，具体可参考我的一篇文章：<a href=\"https://juejin.cn/post/6844903858380996616\">《OpenGL ES 高级进阶：EGL及GL线程》</a>。</p>\n<blockquote>\n<p>【转载注】这也是我碰到的第一个坑，因为从 Unity 调用到 Android 侧的时候，gl渲染环境没有在一个地方。我花了很大的精力去排查前面shader相关的渲染问题，一直没有注意这个问题，所以浪费了大量时间。我个人认为这个问题需要像使用一门新语言的时候要先确保它能打印出”Hello World”一样，是整个流程的前提。</p>\n</blockquote>\n<ul>\n<li><strong>GL Program不正确</strong></li>\n</ul>\n<p>OpenGL渲染需要通过GL Program，它就是一个程序，和我们的普通程序是一个道理，只不过它是运行在GPU上的，如果它不正确了，那自然就渲染不出正确的结果，常见的不正确原因为shader编译失败，通常是因为语法错误，可以用glGetShaderInfoLog()来在编译之后查看相关shader信息，以及在Link后用glGetProgramInfoLog()查看相关program信息，如果得到的信息为空，则说明没有错。</p>\n<ul>\n<li><strong>没有use program</strong></li>\n</ul>\n<p>渲染前需要通过glUseProgran设置本次渲染所用的program，如果未设置则无法执行到对应的shader，自然无法渲染出来。</p>\n<ul>\n<li><strong>未调用glDrawXXX()</strong></li>\n</ul>\n<p>要渲染出来东西，必须调用glDrawXXX()，一般很少出现没调的情况，一般都是低级失误，最好也排查一下。</p>\n<p>对于底层是多buffer实现的surface，渲染后未进行swap buffer<br>常见的是双buffer，此时有一个back buffer和一个front buffer，front buffer是正在显存的这个，back buffer是正在渲染的，如果draw call后没有swap buffer，那back buffer不会呈现出来，因此渲染不出来，这里是特定上屏，如果渲染不是要上屏，则无需考虑这个问题。</p>\n<ul>\n<li><strong>frame buffer的attachment不正确</strong></li>\n</ul>\n<p>在离屏渲染情况下，当我们要渲染到一个frame buffer上，这个frame buffer必须正确绑定了attachment，否则相当于frame buffer是个空壳，它没有任何可用于承载渲染结果的空间。</p>\n<ul>\n<li><strong>顶点attribute值设置错误</strong></li>\n</ul>\n<p>顶点关系到渲染到什么位置，如果设置错误导致渲染的位置在可视范围之外，那么就看不到了，这里的范围是什么呢？如果直接用NDC坐标渲染，那就是-1~1,如果是用世界坐标来渲染，那就要看具体设置的投影矩阵，详细原理可参考我的另一篇文章《OpenGL 3D渲染技术：坐标系及矩阵变换》。</p>\n<p>attribute未启用<br>我们通过想要设置一个attribute的值，需要获取这个attribute的location，并通过glVertexAttribPointer()给它设置值，但别忘了需要使用glGetAttribLocation()来启用这个location，不然设置了也没有用，默认是不启用的。</p>\n<ul>\n<li><strong>VAO&#x2F;VBO未绑定或者绑定错误</strong></li>\n</ul>\n<p>如果是用VAO&#x2F;VBO的方式渲染，在渲染前要绑定正确的VAO&#x2F;VBO，否则等于没指定或者指定错了顶点，就渲染不出来了。</p>\n<ul>\n<li><strong>VAO&#x2F;VBO方式渲染之后未重置，后面接着用非VAO&#x2F;VBO方式渲染</strong></li>\n</ul>\n<p>在用VAO&#x2F;VBO方式渲染之后如果未重置，那么顶点绑定的还是VAO&#x2F;VBO指定的顶点，此时如果再用普通的glVertexAttribPointer()的方式指定顶点渲染，那用法上会冲突，因为VAO&#x2F;VBO的方式要求glVertexAttribPointer()函数不指定顶点数据，而普通用法中glVertexAttribPointer()又要指定顶点数据，此时容易造成顶点混乱，渲染结果不正确。</p>\n<p>View Port设置错误<br>View Port即视口，可以理解成我们通过一个窗口去看见OpenGL世界坐标系里渲染的景物，就像我们通过窗口看到室外的景物一样，如果这个窗口没设置或者设置不正确，也会导致看不到东西，一般情况下，我们会将它设置为surface的大小，这样渲染出来的东西就刚好填满这个surface。</p>\n<ul>\n<li><strong>没有渲染到0号frame buffer</strong></li>\n</ul>\n<p>有时候渲染操作有很多步，想做完这些步骤后，再将做好的结果显示的屏幕上，这时就会用一些frame buffer来做离屏渲染，但在最后一步渲染到屏幕上时，需要将frame buffer绑定回0号，才能上屏。</p>\n<ul>\n<li><strong>渲染了一个不正确的纹理</strong></li>\n</ul>\n<p>例如我们希望对一个纹理做一些处理然后渲染出来，但如果这个纹理本身是不正确的，例如前面的步骤出了一些错，导致给过来的纹理id不正确，比如是0，或者纹理id是正确的，但这个纹理是全黑的或者空的，也会导致黑屏。</p>\n<ul>\n<li><strong>glDrawXXX()方法传递的顶点数不正确</strong></li>\n</ul>\n<p>我们在调用glDrawXXX()，会设置顶点数组的开始位置和数量，如果设置不正确，导致传递的顶点是0个，也会导致渲染不出来任何东西。</p>\n<ul>\n<li><strong>顶点buffer的position不正确</strong></li>\n</ul>\n<p>这一点主要是针对java及kotlin，glVertexAttribPointer()接受数据时是通过一个buffer，而我们往buffer是put数据后，buffer的position会相应地往后移动，因此在调用glVertexAttribPointer()之前，记得将position设回到0，否则它将从末尾开始取数据，当然就取不到了。</p>\n<ul>\n<li><strong>面剔除的原因</strong></li>\n</ul>\n<p>如果开启了cull face，那么会按你指定的cull方式来剔除指定顶点旋转顺序的三角面片，如果视线方向看过去的刚好被剔除了，自然就看不见了。</p>\n<ul>\n<li><strong>未开启颜色混合渲染了有透明度的纹理</strong></li>\n</ul>\n<p>OpenGL默认是不开启颜色混合的，这会导致透明的部分通常会被渲染成黑色，而不是透出下面的颜色，具体可以参数我的一篇文章：《OpenGL ES 高级进阶：颜色混合》。</p>\n<p>作者：程序员kenney</p>\n<p>链接：<a href=\"https://juejin.cn/post/6844903910742687751\">https://juejin.cn/post/6844903910742687751</a></p>\n<p>来源：稀土掘金</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"音视频","slug":"音视频","api":"api/tags/音视频.json"},{"name":"OpenGL","slug":"OpenGL","api":"api/tags/OpenGL.json"}],"api":"api/posts/2023/01/15/转-OpenGL黑屏及渲染不出来的常见原因总结.json"},{"title":"FFmpeg.so 编译总结","slug":"FFmpeg-so-编译整理","date":"2023-01-09T02:36:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2023/01/09/FFmpeg-so-编译整理/","excerpt":"<p>此前项目一直使用的 FFmpeg.so 是我从其他团队项目中直接复制过来的，但原来的项目团队不再维护这个库，其中 x264 模块由于一些版权问题需要剔除，所以需要自己重新编译。在编译的过程中踩了很多坑，以及编译 congfigure 有太多的配置，如何减少整体编译出来的大小也是需要花点精力的，本文主要记录编译流程以及相关配置介绍。</p>\n<h2 id=\"编译介绍\"><a href=\"#编译介绍\" class=\"headerlink\" title=\"编译介绍\"></a>编译介绍</h2><p>自己编译主要参考<a href=\"https://github.com/Timdk857/Android-Architecture-knowledge-2-/blob/master/Android%20%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/Android-%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-(%E5%9B%9B)-%E4%B8%80%E9%94%AE%E7%BC%96%E8%AF%91-32-64-%E4%BD%8D-FFmpeg-4-2-2.md\">《一键编译32_64位FFmpeg.4.2.2》</a>，最开始的时候自己一直在 Mac M1 上编译，各种流程也是一比一复刻，但是仍然会有各种问题出现，最常见的就是：</p>\n<blockquote>\n<p>aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</p>\n</blockquote>\n<p>我反复检查了自己的 NDK 的配置，确保是正确的，文章也有提及处理方式，但是尝试下来都无效，在网上搜了一大篇解决方式，也都无效。不过我看他们很多都是用 Linux 系统进行的编译，遂改为使用 Linux 编译，再重新尝试，似乎没有那些个奇奇怪怪的错误了，也打出了最终的包，最后的 so 大小也符合要求。</p>\n<h3 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h3><ul>\n<li>CentOS 7</li>\n<li><a href=\"https://ffmpeg.org/releases/ffmpeg-4.2.2.tar.bz2\">ffmpeg-4.2.2</a></li>\n<li><a href=\"https://github.com/android/ndk/wiki/Unsupported-Downloads\">android-ndk-r20b-linux-x86_64.zip</a></li>\n</ul>\n<h3 id=\"编译脚本\"><a href=\"#编译脚本\" class=\"headerlink\" title=\"编译脚本\"></a>编译脚本</h3><p>这是我的一份编译脚本，我的需求是进行本地视频抽帧，所以不需要像滤镜、编码、音频相关的配置，只需要视频解码相关的配置，具体配置在下一节有讲解。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">export NDK=.../android<span class=\"literal\">-ndk-r20b</span></span><br><span class=\"line\">TOOLCHAIN=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_android</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">./configure \\ </span><br><span class=\"line\"><span class=\"literal\">--prefix</span>=<span class=\"variable\">$PREFIX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-neon</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-x86asm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-hwaccels</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-gpl</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nonfree</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-version3</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-postproc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-bsfs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-protocols</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-protocol</span>=file \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-indevs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-outdevs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-debug</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-small</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-jni</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-mediacodec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-decoder</span>=h264_mediacodec \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-swscale</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-static</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-shared</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-filters</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-avfilter</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-encoders</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-muxers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-demuxers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=avi \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=flv \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h261 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=hevc \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=mov \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=m4v \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-decoders</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263i \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263p \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=hevc \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=flv \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=mpeg4 \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-parsers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h261 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=mpeg4video \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=mpegvideo \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-htmlpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-manpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-podpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-txtpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-vaapi</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-v4l2-m2m</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nvdec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nvenc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffnvcodec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-dxva2</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-d3d11va</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuvid</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuda-llvm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuda-nvcc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-audiotoolbox</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-amf</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-iconv</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-shm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-xfixes</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-shape</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-lzma</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-sdl2</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-securetransport</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-xlib</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-zlib</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-programs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffmpeg</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffplay</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffprobe</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-avdevice</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-symver</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cross-prefix</span>=<span class=\"variable\">$CROSS_PREFIX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--target-os</span>=android \\ </span><br><span class=\"line\"><span class=\"literal\">--arch</span>=<span class=\"variable\">$ARCH</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cpu</span>=<span class=\"variable\">$CPU</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cc</span>=<span class=\"variable\">$CC</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cxx</span>=<span class=\"variable\">$CXX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-cross-compile</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--sysroot</span>=<span class=\"variable\">$SYSROOT</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--extra-cflags</span>=<span class=\"string\">&quot;-Os -fpic <span class=\"variable\">$OPTIMIZE_CFLAGS</span>&quot;</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--extra-ldflags</span>=<span class=\"string\">&quot;<span class=\"variable\">$ADDI_LDFLAGS</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">make clean</span><br><span class=\"line\">make <span class=\"literal\">-j16</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#arm64-v8a</span></span><br><span class=\"line\">ARCH=arm64</span><br><span class=\"line\">CPU=armv8<span class=\"literal\">-a</span></span><br><span class=\"line\">API=<span class=\"number\">21</span></span><br><span class=\"line\">CC=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span></span><br><span class=\"line\">CXX=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span>++</span><br><span class=\"line\">SYSROOT=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span>/sysroot</span><br><span class=\"line\">CROSS_PREFIX=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android-</span></span><br><span class=\"line\">PREFIX=<span class=\"variable\">$</span>(<span class=\"built_in\">pwd</span>)/android/<span class=\"variable\">$CPU</span></span><br><span class=\"line\">OPTIMIZE_CFLAGS=<span class=\"string\">&quot;-march=<span class=\"variable\">$CPU</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">build_android</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#armv7-a</span></span><br><span class=\"line\">ARCH=arm</span><br><span class=\"line\">CPU=armv7<span class=\"literal\">-a</span></span><br><span class=\"line\">API=<span class=\"number\">21</span></span><br><span class=\"line\">CC=<span class=\"variable\">$TOOLCHAIN</span>/bin/armv7a<span class=\"literal\">-linux-androideabi</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span></span><br><span class=\"line\">CXX=<span class=\"variable\">$TOOLCHAIN</span>/bin/armv7a<span class=\"literal\">-linux-androideabi</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span>++</span><br><span class=\"line\">SYSROOT=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span>/sysroot</span><br><span class=\"line\">CROSS_PREFIX=<span class=\"variable\">$TOOLCHAIN</span>/bin/arm<span class=\"literal\">-linux-androideabi-</span></span><br><span class=\"line\">PREFIX=<span class=\"variable\">$</span>(<span class=\"built_in\">pwd</span>)/android/<span class=\"variable\">$CPU</span></span><br><span class=\"line\">OPTIMIZE_CFLAGS=<span class=\"string\">&quot;-mfloat-abi=softfp -mfpu=vfp -marm -march=<span class=\"variable\">$CPU</span> &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">build_android</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置介绍\"><a href=\"#配置介绍\" class=\"headerlink\" title=\"配置介绍\"></a>配置介绍</h2><p>通过执行 <code>./configure --help</code> 能得到所有的配置选项，整个配置也非常好理解，通过 list-xxx 可以知道有哪些子选项，然后再通过 <code>--disable-xxx</code>,或者 <code>--enable-xxx</code> 进行关闭或者打开。以解码为例：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-decoders</span>       <span class=\"comment\"># 先关闭所有的解码器</span></span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=flv     <span class=\"comment\"># 然后只打开flv、mpeg4 的支持</span></span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=mpeg4 </span><br></pre></td></tr></table></figure>\n<p>对于<code>--enable-decoder=xxx</code>中的xxx可以通过 <code>./configure --list-decoders</code> 进行查看，同理 <code>encoders</code> <code>demuxers</code> <code>muxers</code> 等都是类似的处理，通过 <code>--help</code> 可以通过 <code>list--xxx</code> 查看不同功能的可以支持的配置，主要有以下：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--list-decoders</span>          show all available decoders</span><br><span class=\"line\"><span class=\"literal\">--list-encoders</span>          show all available encoders</span><br><span class=\"line\"><span class=\"literal\">--list-hwaccels</span>          show all available hardware accelerators</span><br><span class=\"line\"><span class=\"literal\">--list-demuxers</span>          show all available demuxers</span><br><span class=\"line\"><span class=\"literal\">--list-muxers</span>            show all available muxers</span><br><span class=\"line\"><span class=\"literal\">--list-parsers</span>           show all available parsers</span><br><span class=\"line\"><span class=\"literal\">--list-protocols</span>         show all available protocols</span><br><span class=\"line\"><span class=\"literal\">--list-bsfs</span>              show all available bitstream filters</span><br><span class=\"line\"><span class=\"literal\">--list-indevs</span>            show all available input devices</span><br><span class=\"line\"><span class=\"literal\">--list-outdevs</span>           show all available output devices</span><br><span class=\"line\"><span class=\"literal\">--list-filters</span>           show all available filters</span><br></pre></td></tr></table></figure>\n\n<p>其他的配置就是一些实际性的开关配置，列一些常用的配置：</p>\n<p>配置产物为静态库(.a)或者动态库(.so)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--enable-static         do not build static libraries [no]</span><br><span class=\"line\">--enable-shared         build shared libraries [no]</span><br></pre></td></tr></table></figure>\n\n<p>配置减少包大小</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--enable-small           optimize for size instead of speed</span><br></pre></td></tr></table></figure>\n\n<p><code>--enable-small</code> 的配置项，其实是在config.h里声称了CONFIG_SMALL选项，然后代码内根据CONFIG_SMALL做了一些调整，比如某些string类型就被省掉了，还有一些内置生成的table, 体积也被裁减掉了，用速度换体积。比如这里：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> CONFIG_SMALL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRC_TABLE_SIZE 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRC_TABLE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>配置FFmpeg协议，由于我们使用本地文件，需要再加一个： <code>--enable-protocol=file</code>，要不然解码会报协议相关错误</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-protocols</span>      disable all protocols</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要在代码中使用 FFmpeg，所以直接禁用命令行工具</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-programs</span>       <span class=\"keyword\">do</span> not build command line programs</span><br><span class=\"line\"><span class=\"literal\">--disable-ffmpeg</span>         disable ffmpeg build</span><br><span class=\"line\"><span class=\"literal\">--disable-ffplay</span>         disable ffplay build</span><br><span class=\"line\"><span class=\"literal\">--disable-ffprobe</span>        disable ffprobe build</span><br></pre></td></tr></table></figure>\n\n<p>还有几个比较重要的就是，主要是</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-avdevice</span>       disable libavdevice build</span><br><span class=\"line\"><span class=\"literal\">--disable-swresample</span>     disable libswresample build</span><br><span class=\"line\"><span class=\"literal\">--disable-swscale</span>        disable libswscale build</span><br><span class=\"line\"><span class=\"literal\">--disable-postproc</span>       disable libpostproc build</span><br><span class=\"line\"><span class=\"literal\">--disable-avfilter</span>       disable libavfilter build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译遇见的坑\"><a href=\"#编译遇见的坑\" class=\"headerlink\" title=\"编译遇见的坑\"></a>编译遇见的坑</h2><p><strong>1、aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</strong></p>\n<p>这个问题是困扰我最久的，按照解决方法：<br>原因 1： FFmpeg 4.2.2 版本默认使用了 clang 进行编译<br>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//1\\. 修改 configure 文件</span><br><span class=\"line\">vim configure</span><br><span class=\"line\">//2\\. 把 默认的 clang 修改为 gcc</span><br><span class=\"line\">if test &quot;$target_os&quot; = android; then</span><br><span class=\"line\">   # cc_default=&quot;clang&quot;</span><br><span class=\"line\">\t\t cc_default=&quot;gcc&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原因2，检查路径是否正确，主要是 NDK 的位置，以及不同 NDK 相关库可能存在一定的丢失。</p>\n<p>这个问题我在 macOS 上未解决，<strong>换用 CentOS 没有出现过这个编译问题</strong>。</p>\n<p><strong>2、 编译包大小一直不变</strong></p>\n<p>最开始我正常编译的时候发现怎么改配置，最后的包大小都没有发生变化，但是命令行里面各种流程又是在走，最终也有产物。这里一定要关注在执行了编译脚本之后，查看最开始的日志，看看具体是一些什么错，这里日志会刷得很快，如果包大小一直没有发生变化的话，可以执行完之后快速停止，看看是什么错。一般就是<code>C compiler test failed.</code> 或者找不到你的配置，改对即可。正常编译，会在开始后列出你的编译配置。</p>\n<p><strong>3、x86asm 相关的问题</strong></p>\n<p>编译的时候遇到一些 x86asm 的错，按照文章所说即可</p>\n","cover":null,"images":[],"content":"<p>此前项目一直使用的 FFmpeg.so 是我从其他团队项目中直接复制过来的，但原来的项目团队不再维护这个库，其中 x264 模块由于一些版权问题需要剔除，所以需要自己重新编译。在编译的过程中踩了很多坑，以及编译 congfigure 有太多的配置，如何减少整体编译出来的大小也是需要花点精力的，本文主要记录编译流程以及相关配置介绍。</p>\n<h2 id=\"编译介绍\"><a href=\"#编译介绍\" class=\"headerlink\" title=\"编译介绍\"></a>编译介绍</h2><p>自己编译主要参考<a href=\"https://github.com/Timdk857/Android-Architecture-knowledge-2-/blob/master/Android%20%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/Android-%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-(%E5%9B%9B)-%E4%B8%80%E9%94%AE%E7%BC%96%E8%AF%91-32-64-%E4%BD%8D-FFmpeg-4-2-2.md\">《一键编译32_64位FFmpeg.4.2.2》</a>，最开始的时候自己一直在 Mac M1 上编译，各种流程也是一比一复刻，但是仍然会有各种问题出现，最常见的就是：</p>\n<blockquote>\n<p>aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</p>\n</blockquote>\n<p>我反复检查了自己的 NDK 的配置，确保是正确的，文章也有提及处理方式，但是尝试下来都无效，在网上搜了一大篇解决方式，也都无效。不过我看他们很多都是用 Linux 系统进行的编译，遂改为使用 Linux 编译，再重新尝试，似乎没有那些个奇奇怪怪的错误了，也打出了最终的包，最后的 so 大小也符合要求。</p>\n<h3 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h3><ul>\n<li>CentOS 7</li>\n<li><a href=\"https://ffmpeg.org/releases/ffmpeg-4.2.2.tar.bz2\">ffmpeg-4.2.2</a></li>\n<li><a href=\"https://github.com/android/ndk/wiki/Unsupported-Downloads\">android-ndk-r20b-linux-x86_64.zip</a></li>\n</ul>\n<h3 id=\"编译脚本\"><a href=\"#编译脚本\" class=\"headerlink\" title=\"编译脚本\"></a>编译脚本</h3><p>这是我的一份编译脚本，我的需求是进行本地视频抽帧，所以不需要像滤镜、编码、音频相关的配置，只需要视频解码相关的配置，具体配置在下一节有讲解。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">export NDK=.../android<span class=\"literal\">-ndk-r20b</span></span><br><span class=\"line\">TOOLCHAIN=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_android</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">./configure \\ </span><br><span class=\"line\"><span class=\"literal\">--prefix</span>=<span class=\"variable\">$PREFIX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-neon</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-x86asm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-hwaccels</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-gpl</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nonfree</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-version3</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-postproc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-bsfs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-protocols</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-protocol</span>=file \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-indevs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-outdevs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-debug</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-small</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-jni</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-mediacodec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-decoder</span>=h264_mediacodec \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-swscale</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-static</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-shared</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-filters</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-avfilter</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-encoders</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-muxers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-demuxers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=avi \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=flv \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h261 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=hevc \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=mov \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-demuxer</span>=m4v \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-decoders</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263i \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h263p \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=hevc \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=flv \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=mpeg4 \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-parsers</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h264 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h261 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=h263 \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=mpeg4video \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-parser</span>=mpegvideo \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-htmlpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-manpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-podpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-txtpages</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-vaapi</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-v4l2-m2m</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nvdec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-nvenc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffnvcodec</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-dxva2</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-d3d11va</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuvid</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuda-llvm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-cuda-nvcc</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-audiotoolbox</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-amf</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-iconv</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-shm</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-xfixes</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-libxcb-shape</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-lzma</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-sdl2</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-securetransport</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-xlib</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-zlib</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-programs</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffmpeg</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffplay</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-ffprobe</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-avdevice</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--disable-symver</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cross-prefix</span>=<span class=\"variable\">$CROSS_PREFIX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--target-os</span>=android \\ </span><br><span class=\"line\"><span class=\"literal\">--arch</span>=<span class=\"variable\">$ARCH</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cpu</span>=<span class=\"variable\">$CPU</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cc</span>=<span class=\"variable\">$CC</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--cxx</span>=<span class=\"variable\">$CXX</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--enable-cross-compile</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--sysroot</span>=<span class=\"variable\">$SYSROOT</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--extra-cflags</span>=<span class=\"string\">&quot;-Os -fpic <span class=\"variable\">$OPTIMIZE_CFLAGS</span>&quot;</span> \\ </span><br><span class=\"line\"><span class=\"literal\">--extra-ldflags</span>=<span class=\"string\">&quot;<span class=\"variable\">$ADDI_LDFLAGS</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">make clean</span><br><span class=\"line\">make <span class=\"literal\">-j16</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#arm64-v8a</span></span><br><span class=\"line\">ARCH=arm64</span><br><span class=\"line\">CPU=armv8<span class=\"literal\">-a</span></span><br><span class=\"line\">API=<span class=\"number\">21</span></span><br><span class=\"line\">CC=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span></span><br><span class=\"line\">CXX=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span>++</span><br><span class=\"line\">SYSROOT=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span>/sysroot</span><br><span class=\"line\">CROSS_PREFIX=<span class=\"variable\">$TOOLCHAIN</span>/bin/aarch64<span class=\"literal\">-linux-android-</span></span><br><span class=\"line\">PREFIX=<span class=\"variable\">$</span>(<span class=\"built_in\">pwd</span>)/android/<span class=\"variable\">$CPU</span></span><br><span class=\"line\">OPTIMIZE_CFLAGS=<span class=\"string\">&quot;-march=<span class=\"variable\">$CPU</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">build_android</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#armv7-a</span></span><br><span class=\"line\">ARCH=arm</span><br><span class=\"line\">CPU=armv7<span class=\"literal\">-a</span></span><br><span class=\"line\">API=<span class=\"number\">21</span></span><br><span class=\"line\">CC=<span class=\"variable\">$TOOLCHAIN</span>/bin/armv7a<span class=\"literal\">-linux-androideabi</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span></span><br><span class=\"line\">CXX=<span class=\"variable\">$TOOLCHAIN</span>/bin/armv7a<span class=\"literal\">-linux-androideabi</span><span class=\"variable\">$API</span><span class=\"literal\">-clang</span>++</span><br><span class=\"line\">SYSROOT=<span class=\"variable\">$NDK</span>/toolchains/llvm/prebuilt/linux<span class=\"literal\">-x86_64</span>/sysroot</span><br><span class=\"line\">CROSS_PREFIX=<span class=\"variable\">$TOOLCHAIN</span>/bin/arm<span class=\"literal\">-linux-androideabi-</span></span><br><span class=\"line\">PREFIX=<span class=\"variable\">$</span>(<span class=\"built_in\">pwd</span>)/android/<span class=\"variable\">$CPU</span></span><br><span class=\"line\">OPTIMIZE_CFLAGS=<span class=\"string\">&quot;-mfloat-abi=softfp -mfpu=vfp -marm -march=<span class=\"variable\">$CPU</span> &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">build_android</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置介绍\"><a href=\"#配置介绍\" class=\"headerlink\" title=\"配置介绍\"></a>配置介绍</h2><p>通过执行 <code>./configure --help</code> 能得到所有的配置选项，整个配置也非常好理解，通过 list-xxx 可以知道有哪些子选项，然后再通过 <code>--disable-xxx</code>,或者 <code>--enable-xxx</code> 进行关闭或者打开。以解码为例：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-decoders</span>       <span class=\"comment\"># 先关闭所有的解码器</span></span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=flv     <span class=\"comment\"># 然后只打开flv、mpeg4 的支持</span></span><br><span class=\"line\"><span class=\"literal\">--enable-decoder</span>=mpeg4 </span><br></pre></td></tr></table></figure>\n<p>对于<code>--enable-decoder=xxx</code>中的xxx可以通过 <code>./configure --list-decoders</code> 进行查看，同理 <code>encoders</code> <code>demuxers</code> <code>muxers</code> 等都是类似的处理，通过 <code>--help</code> 可以通过 <code>list--xxx</code> 查看不同功能的可以支持的配置，主要有以下：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--list-decoders</span>          show all available decoders</span><br><span class=\"line\"><span class=\"literal\">--list-encoders</span>          show all available encoders</span><br><span class=\"line\"><span class=\"literal\">--list-hwaccels</span>          show all available hardware accelerators</span><br><span class=\"line\"><span class=\"literal\">--list-demuxers</span>          show all available demuxers</span><br><span class=\"line\"><span class=\"literal\">--list-muxers</span>            show all available muxers</span><br><span class=\"line\"><span class=\"literal\">--list-parsers</span>           show all available parsers</span><br><span class=\"line\"><span class=\"literal\">--list-protocols</span>         show all available protocols</span><br><span class=\"line\"><span class=\"literal\">--list-bsfs</span>              show all available bitstream filters</span><br><span class=\"line\"><span class=\"literal\">--list-indevs</span>            show all available input devices</span><br><span class=\"line\"><span class=\"literal\">--list-outdevs</span>           show all available output devices</span><br><span class=\"line\"><span class=\"literal\">--list-filters</span>           show all available filters</span><br></pre></td></tr></table></figure>\n\n<p>其他的配置就是一些实际性的开关配置，列一些常用的配置：</p>\n<p>配置产物为静态库(.a)或者动态库(.so)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--enable-static         do not build static libraries [no]</span><br><span class=\"line\">--enable-shared         build shared libraries [no]</span><br></pre></td></tr></table></figure>\n\n<p>配置减少包大小</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--enable-small           optimize for size instead of speed</span><br></pre></td></tr></table></figure>\n\n<p><code>--enable-small</code> 的配置项，其实是在config.h里声称了CONFIG_SMALL选项，然后代码内根据CONFIG_SMALL做了一些调整，比如某些string类型就被省掉了，还有一些内置生成的table, 体积也被裁减掉了，用速度换体积。比如这里：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> CONFIG_SMALL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRC_TABLE_SIZE 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CRC_TABLE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>配置FFmpeg协议，由于我们使用本地文件，需要再加一个： <code>--enable-protocol=file</code>，要不然解码会报协议相关错误</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-protocols</span>      disable all protocols</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要在代码中使用 FFmpeg，所以直接禁用命令行工具</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-programs</span>       <span class=\"keyword\">do</span> not build command line programs</span><br><span class=\"line\"><span class=\"literal\">--disable-ffmpeg</span>         disable ffmpeg build</span><br><span class=\"line\"><span class=\"literal\">--disable-ffplay</span>         disable ffplay build</span><br><span class=\"line\"><span class=\"literal\">--disable-ffprobe</span>        disable ffprobe build</span><br></pre></td></tr></table></figure>\n\n<p>还有几个比较重要的就是，主要是</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">--disable-avdevice</span>       disable libavdevice build</span><br><span class=\"line\"><span class=\"literal\">--disable-swresample</span>     disable libswresample build</span><br><span class=\"line\"><span class=\"literal\">--disable-swscale</span>        disable libswscale build</span><br><span class=\"line\"><span class=\"literal\">--disable-postproc</span>       disable libpostproc build</span><br><span class=\"line\"><span class=\"literal\">--disable-avfilter</span>       disable libavfilter build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译遇见的坑\"><a href=\"#编译遇见的坑\" class=\"headerlink\" title=\"编译遇见的坑\"></a>编译遇见的坑</h2><p><strong>1、aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</strong></p>\n<p>这个问题是困扰我最久的，按照解决方法：<br>原因 1： FFmpeg 4.2.2 版本默认使用了 clang 进行编译<br>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//1\\. 修改 configure 文件</span><br><span class=\"line\">vim configure</span><br><span class=\"line\">//2\\. 把 默认的 clang 修改为 gcc</span><br><span class=\"line\">if test &quot;$target_os&quot; = android; then</span><br><span class=\"line\">   # cc_default=&quot;clang&quot;</span><br><span class=\"line\">\t\t cc_default=&quot;gcc&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原因2，检查路径是否正确，主要是 NDK 的位置，以及不同 NDK 相关库可能存在一定的丢失。</p>\n<p>这个问题我在 macOS 上未解决，<strong>换用 CentOS 没有出现过这个编译问题</strong>。</p>\n<p><strong>2、 编译包大小一直不变</strong></p>\n<p>最开始我正常编译的时候发现怎么改配置，最后的包大小都没有发生变化，但是命令行里面各种流程又是在走，最终也有产物。这里一定要关注在执行了编译脚本之后，查看最开始的日志，看看具体是一些什么错，这里日志会刷得很快，如果包大小一直没有发生变化的话，可以执行完之后快速停止，看看是什么错。一般就是<code>C compiler test failed.</code> 或者找不到你的配置，改对即可。正常编译，会在开始后列出你的编译配置。</p>\n<p><strong>3、x86asm 相关的问题</strong></p>\n<p>编译的时候遇到一些 x86asm 的错，按照文章所说即可</p>\n","categories":[],"tags":[{"name":"FFmpeg","slug":"FFmpeg","api":"api/tags/FFmpeg.json"}],"api":"api/posts/2023/01/09/FFmpeg-so-编译整理.json"}],"info":{"type":"archive","year":2023,"month":1}},"api":"api/archives/2023/01/page.1.json"}