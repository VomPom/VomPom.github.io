{"data":{"index":1,"total":1,"posts":[{"title":"Android 基于 J2V8 运行 JavasScript  实践","slug":"Android-J2V8-实践","date":"2023-09-30T13:11:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2023/09/30/Android-J2V8-实践/","excerpt":"<p>V8 引擎是由 Google 开源的 JavaScript 引擎，Chrome 就是基于 V8 开发，V8 是跨平台的，J2V8 基于 V8 进行开发，使得 js 代码能够在 Android 平台上脱离 WebView 运行。目前，也有很多关于 Android J2V8 的文章，不过讲解不是特别细（可能也是我太菜了，看完了之后，依然遇到很多问题），自己在调研的过程中遇到很多坑，所以这里记录一下，本文主要记录整个 J2V8 框架的使用方法，以及一些坑。</p>\n<h2 id=\"一、Webpack-打包\"><a href=\"#一、Webpack-打包\" class=\"headerlink\" title=\"一、Webpack 打包\"></a>一、Webpack 打包</h2><p>通常业务逻辑的 js 文件是有多个的，我们需要借助一些打包工具将多个文件打包成一个 js 文件供 J2V8 使用，我们可以使用 Gulp、Webpack、Browserify，本文主要讲 Webpack 的使用。<br>主要流程如下：</p>\n<p><strong>编写基础逻辑并通过 <code>module.exports</code> 对外部提供</strong></p>\n<p><strong>编写 <code>index.js</code> 入口文件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  simpleFunc, complexFunc</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>** 编写<code>webpack.config</code>打包配置**</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/example/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;libExample&#x27;</span>,                 <span class=\"comment\">// j2v8 加载该lib</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;example.js&#x27;</span>,                <span class=\"comment\">// 导出指定命名的 js 文件 </span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行 <code>webpack</code> 打包命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack --config webpack.config.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、运行-JavaScript\"><a href=\"#二、运行-JavaScript\" class=\"headerlink\" title=\"二、运行 JavaScript\"></a>二、运行 JavaScript</h2><p>到这里我们已经有一份通过 Webpack 打包好的 js 文件了，要在 j2v8 中运行 JavaScript 文件，使用以下步骤：</p>\n<p><strong>1、创建一个 V8 实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">V8 v8 = V8.createV8Runtime();</span><br></pre></td></tr></table></figure>\n<p><strong>2、读取 JavaScript 文件</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scriptStr = String(Files.readAllBytes(Paths.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;example.js&quot;</span>)))</span><br></pre></td></tr></table></figure>\n<p><strong>3、在 V8 实例中执行 JavaScript 代码</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">v8.executeScript(scriptStr);</span><br></pre></td></tr></table></figure>\n<p>这一步已经让整个 js 文件运行起来，但我们还不能调用我们的方法</p>\n<p><strong>4、读取指定模块</strong></p>\n<p>由于是通过 Webpack 打包，在 Webpack 的 <code>output.library</code> 配置，选项用于将打包后的代码作为一个库(library)暴露出去，以便其他应用程序或模块可以使用它。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> rootLib =v8.getObject(libName); <span class=\"comment\">// 这里的 libName 就是 output.library 配置的名字</span></span><br></pre></td></tr></table></figure>\n<p>如果是访问模块的导出对象中的子对象，那么继续：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> subLib =rootLib.getObject(subLibName); <span class=\"comment\">// 这里的 subLibName 是 index 文件中 module.exports 里面的模块名</span></span><br></pre></td></tr></table></figure>\n<p> 如果子对象还有子对象，继续<code>.getObject</code> 即可</p>\n<p><strong>5、运行指定方法</strong></p>\n<p>接下来就简单了，直接通过如下方法执行 js 中的指定方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeVoidFunction</span><span class=\"params\">(String name, V8Array parameters)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">executeStringFunction</span><span class=\"params\">(String name, V8Array parameters)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">executeDoubleFunction</span><span class=\"params\">(String name, V8Array parameters)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">executeIntegerFunction</span><span class=\"params\">(String name, V8Array parameters)</span></span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<p><code>V8Object</code> 提供了很多数据格式调用，不过都差不多，主要是在返回值那里帮你实现了数据的转化，如果不想用转化好的格式，希望自己来操作的话，使用<code>public V8Object executeObjectFunction() </code> 拿到返回值，自己去转化即可</p>\n<p><strong>6、释放资源</strong></p>\n<p>由于 V8 运行消耗较多的资源，执行结束的时候要将在过程中创建的所有的资源释放，避免导致内存泄漏。<br>V8提供了close方法，如果只使用 v8.close() 进行释放，或者未关闭过程中有用到 v8 runtime 的变量都会报如下错误，正确的做法是将所有资源进行关闭。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalStateException: <span class=\"number\">3</span> Object(s) still exist in runtime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、进阶\"><a href=\"#三、进阶\" class=\"headerlink\" title=\"三、进阶\"></a>三、进阶</h2><p>通过以上的方式已经能执行很多逻辑了，但在实践过过程中发现：如何 js 的返回值是 Promise 的话不会等到最终的结果给我们，而是直接返回了一个 Promise 对象，以及看不到 <code>console.log</code> 打印的日志…… 诸如此类的问题需要解决，这里主要讲讲这两种方法的实现。</p>\n<p><strong>注册 Native 插件</strong></p>\n<p>J2V8 是一个基于 V8 引擎的 Java 库，它允许在 Java 中执行 JavaScript 代码。由于 J2V8 是在 Java 中运行的，它没有直接访问浏览器或控制台的能力，因此无法直接使用 console.log 函数来输出日志，总结 <strong>J2V8 不能实现以下功能：</strong></p>\n<blockquote>\n<ul>\n<li>浏览器 API：j2v8 是在 Java 中运行的，因此无法直接访问浏览器 API，如 DOM、BOM 等。这意味着 j2v8 无法直接操作网页内容、处理事件等</li>\n<li>文件系统访问：j2v8 在 Java 中运行，无法直接访问文件系统。如果需要访问文件系统，需要使用 Java 提供的文件操作 API。</li>\n<li>定时器：JavaScript 中有多种定时器函数，如 setTimeout、setInterval 等，可以在指定时间后执行代码。但 j2v8 无法实现这些定时器函数，因为它无法直接访问系统的计时器。</li>\n<li>Web Worker：Web Worker 是 JavaScript 中的一个特殊对象，可以在后台线程中执行代码，以避免阻塞主线程。但 j2v8 无法实现 Web Worker，因为它无法直接访问操作系统的线程。</li>\n<li>Node.js API：j2v8 主要是为了在 Java 中执行浏览器端的 JavaScript 代码而设计的，因此无法直接访问 Node.js API。如果需要在 Java 中执行 Node.js 代码，可以考虑使用 Nashorn 等其他工具。</li>\n</ul>\n</blockquote>\n<p>这里是 <code>console.log</code>的一个简单实现：</p>\n<p><code>V8Object</code> 是 J2V8 中的一个类，它代表了一个 JavaScript 对象，对于 <code>console.log</code> 我们可以将 <code>console</code> 看作一个对象，其有一个叫 <code>log</code> 的方法，要实现在 js 中打印日志到 Android Studio 控制台，如下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsolePlugin</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun <span class=\"title function_\">log</span><span class=\"params\">(message: Any)</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;ConsolePlugin&quot;</span>, message.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun <span class=\"title function_\">register</span><span class=\"params\">(v8: V8)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">v8Console</span> <span class=\"operator\">=</span> V8Object(v8)</span><br><span class=\"line\">        <span class=\"comment\">// 第一个 log 表示 在 Java 中该方法的名字，第二个 log 表示在 JavaScript 中调用的名字 </span></span><br><span class=\"line\">        v8Console.registerJavaMethod(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;log&quot;</span>, <span class=\"string\">&quot;log&quot;</span>, arrayOf&lt;Class&lt;*&gt;&gt;(Any::class.java))</span><br><span class=\"line\">        v8Console.setWeak()</span><br><span class=\"line\">        <span class=\"comment\">// 将含有叫&quot;log&quot;方法的一个对象加到运行环境中，该对象被命名为 &quot;console&quot;</span></span><br><span class=\"line\">        v8.add(<span class=\"string\">&quot;console&quot;</span>, v8Console)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ConsolePlugin().register(v8)</span><br></pre></td></tr></table></figure>\n\n<p>具体代码可参考:<a href=\"https://github.com/VomPom/J2V8_tutorial\">J2V8_tutorial</a></p>\n<h4 id=\"执行返回值是-Promise-类型的方法\"><a href=\"#执行返回值是-Promise-类型的方法\" class=\"headerlink\" title=\"执行返回值是 Promise 类型的方法\"></a>执行返回值是 Promise 类型的方法</h4><p>之前将的方法调用都是返回数据为基础类型，由于在 Java&#x2F;kotlin 中没有<code>Promise</code>类型的方法，所以对于 <code>Promise</code> 方法我们需要进行一些特殊处理，我们通过使用 <code>CountDownLatch</code> 可以来实现一个 “异步变同步” 的操作，我们需要考虑的是如何接受到 <code>resolve</code> <code>rejcet</code>的调用，js 中 Promise 的方法使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">PromiseMethod</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// success got result</span></span><br><span class=\"line\">  &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// error...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 J2V8中一样的实现</p>\n<p><strong>获取返回的 Promise 对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">val</span> <span class=\"variable\">promiseObj</span> <span class=\"operator\">=</span> v8.executeFunction(functionName, v8Array) as V8Object</span><br></pre></td></tr></table></figure>\n<p>**执行 Promise 对象的 then 和 catch 方法 **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsPromise.apply &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">onResolveParameter</span> <span class=\"operator\">=</span> V8Array(v8).push(onResolve)</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">onRejectParameter</span> <span class=\"operator\">=</span> V8Array(v8).push(onReject)</span><br><span class=\"line\">        executeVoidFunction(<span class=\"string\">&quot;then&quot;</span>, onResolveParameter)</span><br><span class=\"line\">        executeVoidFunction(<span class=\"string\">&quot;catch&quot;</span>, onRejectParameter)</span><br><span class=\"line\">        ....</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>其中 onResolve</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">val</span> <span class=\"variable\">onResolve</span> <span class=\"operator\">=</span> V8Function(jsRuntime) &#123; receiver, parameters -&gt;</span><br><span class=\"line\">        ……</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>具体代码可参考:<a href=\"https://github.com/VomPom/J2V8_tutorial\">J2V8_tutorial</a></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>以上基本上能解决大部分 Android 调用 js的代码逻辑了，这里对整体执行的流程进行一个总结</p>\n<p>1、通过 webpack 对多个 .js 文件打包<br>2、初始化 V8 环境并加载 .js 文件<br>3、注册 Java 方法，供 js 进行调用<br>4、读取指定的模板<br>5、执行目标 js 方法，并释放 v8 执行过程中产生的资源</p>\n<h3 id=\"踩过的一些坑\"><a href=\"#踩过的一些坑\" class=\"headerlink\" title=\"踩过的一些坑\"></a>踩过的一些坑</h3><p>1、<code>java.lang.UnsupportedOperationException: StartNodeJS Not Supported.</code></p>\n<p>这个库有一个 <code>NodeJS.createNodeJS()</code>方法，以为是完美结合 NodeJs 的，查了下不太支持 Android，不过也有人提出解决方法：<a href=\"https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8\">https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8</a></p>\n<p>2、<code>java.lang.IllegalStateException: 3 Object(s) still exist in runtime</code></p>\n<p>这是调用 &#96;v8.close&#96;&#96; 总是会遇到的问题，一定需要确保使用了 v8 Runtime 过程变量有被释放掉，可能有时候不知道具体哪个变量没有被释放</p>\n<p>3、<code>setTimeout、setInterval</code> 无效</p>\n<p>这是我最开始遇到的问题，简单想着“既然能执行js代码，那 setTimeout、setInterval 这些方法都是 js 最普通的方法应该没问题吧”，如果有一些平时在 js 很常见的操作如果无法执行，最好 check 一下 J2V8 是否支持</p>\n<p>4、Undefined 相关</p>\n<p>虽然源码里面通过了一个 Undefined 的类，但是不能直接使用，如果方法返回的 Undefined，通过 <code>V8Object</code> 的 <code>isUndefined()</code> 去判断</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>[1]J2V8 <a href=\"https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/\">https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/</a></p>\n<p>[2] Registering Java Callbacks with J2V8 <a href=\"https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/\">https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/</a></p>\n<p>[3] Simple JS in Node.js <a href=\"https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html\">https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html</a></p>\n","cover":null,"images":[],"content":"<p>V8 引擎是由 Google 开源的 JavaScript 引擎，Chrome 就是基于 V8 开发，V8 是跨平台的，J2V8 基于 V8 进行开发，使得 js 代码能够在 Android 平台上脱离 WebView 运行。目前，也有很多关于 Android J2V8 的文章，不过讲解不是特别细（可能也是我太菜了，看完了之后，依然遇到很多问题），自己在调研的过程中遇到很多坑，所以这里记录一下，本文主要记录整个 J2V8 框架的使用方法，以及一些坑。</p>\n<h2 id=\"一、Webpack-打包\"><a href=\"#一、Webpack-打包\" class=\"headerlink\" title=\"一、Webpack 打包\"></a>一、Webpack 打包</h2><p>通常业务逻辑的 js 文件是有多个的，我们需要借助一些打包工具将多个文件打包成一个 js 文件供 J2V8 使用，我们可以使用 Gulp、Webpack、Browserify，本文主要讲 Webpack 的使用。<br>主要流程如下：</p>\n<p><strong>编写基础逻辑并通过 <code>module.exports</code> 对外部提供</strong></p>\n<p><strong>编写 <code>index.js</code> 入口文件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  simpleFunc, complexFunc</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>** 编写<code>webpack.config</code>打包配置**</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/example/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">library</span>: <span class=\"string\">&#x27;libExample&#x27;</span>,                 <span class=\"comment\">// j2v8 加载该lib</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;example.js&#x27;</span>,                <span class=\"comment\">// 导出指定命名的 js 文件 </span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行 <code>webpack</code> 打包命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack --config webpack.config.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、运行-JavaScript\"><a href=\"#二、运行-JavaScript\" class=\"headerlink\" title=\"二、运行 JavaScript\"></a>二、运行 JavaScript</h2><p>到这里我们已经有一份通过 Webpack 打包好的 js 文件了，要在 j2v8 中运行 JavaScript 文件，使用以下步骤：</p>\n<p><strong>1、创建一个 V8 实例</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">V8 v8 = V8.createV8Runtime();</span><br></pre></td></tr></table></figure>\n<p><strong>2、读取 JavaScript 文件</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scriptStr = String(Files.readAllBytes(Paths.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;example.js&quot;</span>)))</span><br></pre></td></tr></table></figure>\n<p><strong>3、在 V8 实例中执行 JavaScript 代码</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">v8.executeScript(scriptStr);</span><br></pre></td></tr></table></figure>\n<p>这一步已经让整个 js 文件运行起来，但我们还不能调用我们的方法</p>\n<p><strong>4、读取指定模块</strong></p>\n<p>由于是通过 Webpack 打包，在 Webpack 的 <code>output.library</code> 配置，选项用于将打包后的代码作为一个库(library)暴露出去，以便其他应用程序或模块可以使用它。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> rootLib =v8.getObject(libName); <span class=\"comment\">// 这里的 libName 就是 output.library 配置的名字</span></span><br></pre></td></tr></table></figure>\n<p>如果是访问模块的导出对象中的子对象，那么继续：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> subLib =rootLib.getObject(subLibName); <span class=\"comment\">// 这里的 subLibName 是 index 文件中 module.exports 里面的模块名</span></span><br></pre></td></tr></table></figure>\n<p> 如果子对象还有子对象，继续<code>.getObject</code> 即可</p>\n<p><strong>5、运行指定方法</strong></p>\n<p>接下来就简单了，直接通过如下方法执行 js 中的指定方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeVoidFunction</span><span class=\"params\">(String name, V8Array parameters)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">executeStringFunction</span><span class=\"params\">(String name, V8Array parameters)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">executeDoubleFunction</span><span class=\"params\">(String name, V8Array parameters)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">executeIntegerFunction</span><span class=\"params\">(String name, V8Array parameters)</span></span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<p><code>V8Object</code> 提供了很多数据格式调用，不过都差不多，主要是在返回值那里帮你实现了数据的转化，如果不想用转化好的格式，希望自己来操作的话，使用<code>public V8Object executeObjectFunction() </code> 拿到返回值，自己去转化即可</p>\n<p><strong>6、释放资源</strong></p>\n<p>由于 V8 运行消耗较多的资源，执行结束的时候要将在过程中创建的所有的资源释放，避免导致内存泄漏。<br>V8提供了close方法，如果只使用 v8.close() 进行释放，或者未关闭过程中有用到 v8 runtime 的变量都会报如下错误，正确的做法是将所有资源进行关闭。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalStateException: <span class=\"number\">3</span> Object(s) still exist in runtime</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、进阶\"><a href=\"#三、进阶\" class=\"headerlink\" title=\"三、进阶\"></a>三、进阶</h2><p>通过以上的方式已经能执行很多逻辑了，但在实践过过程中发现：如何 js 的返回值是 Promise 的话不会等到最终的结果给我们，而是直接返回了一个 Promise 对象，以及看不到 <code>console.log</code> 打印的日志…… 诸如此类的问题需要解决，这里主要讲讲这两种方法的实现。</p>\n<p><strong>注册 Native 插件</strong></p>\n<p>J2V8 是一个基于 V8 引擎的 Java 库，它允许在 Java 中执行 JavaScript 代码。由于 J2V8 是在 Java 中运行的，它没有直接访问浏览器或控制台的能力，因此无法直接使用 console.log 函数来输出日志，总结 <strong>J2V8 不能实现以下功能：</strong></p>\n<blockquote>\n<ul>\n<li>浏览器 API：j2v8 是在 Java 中运行的，因此无法直接访问浏览器 API，如 DOM、BOM 等。这意味着 j2v8 无法直接操作网页内容、处理事件等</li>\n<li>文件系统访问：j2v8 在 Java 中运行，无法直接访问文件系统。如果需要访问文件系统，需要使用 Java 提供的文件操作 API。</li>\n<li>定时器：JavaScript 中有多种定时器函数，如 setTimeout、setInterval 等，可以在指定时间后执行代码。但 j2v8 无法实现这些定时器函数，因为它无法直接访问系统的计时器。</li>\n<li>Web Worker：Web Worker 是 JavaScript 中的一个特殊对象，可以在后台线程中执行代码，以避免阻塞主线程。但 j2v8 无法实现 Web Worker，因为它无法直接访问操作系统的线程。</li>\n<li>Node.js API：j2v8 主要是为了在 Java 中执行浏览器端的 JavaScript 代码而设计的，因此无法直接访问 Node.js API。如果需要在 Java 中执行 Node.js 代码，可以考虑使用 Nashorn 等其他工具。</li>\n</ul>\n</blockquote>\n<p>这里是 <code>console.log</code>的一个简单实现：</p>\n<p><code>V8Object</code> 是 J2V8 中的一个类，它代表了一个 JavaScript 对象，对于 <code>console.log</code> 我们可以将 <code>console</code> 看作一个对象，其有一个叫 <code>log</code> 的方法，要实现在 js 中打印日志到 Android Studio 控制台，如下即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsolePlugin</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fun <span class=\"title function_\">log</span><span class=\"params\">(message: Any)</span> &#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">&quot;ConsolePlugin&quot;</span>, message.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fun <span class=\"title function_\">register</span><span class=\"params\">(v8: V8)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">v8Console</span> <span class=\"operator\">=</span> V8Object(v8)</span><br><span class=\"line\">        <span class=\"comment\">// 第一个 log 表示 在 Java 中该方法的名字，第二个 log 表示在 JavaScript 中调用的名字 </span></span><br><span class=\"line\">        v8Console.registerJavaMethod(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;log&quot;</span>, <span class=\"string\">&quot;log&quot;</span>, arrayOf&lt;Class&lt;*&gt;&gt;(Any::class.java))</span><br><span class=\"line\">        v8Console.setWeak()</span><br><span class=\"line\">        <span class=\"comment\">// 将含有叫&quot;log&quot;方法的一个对象加到运行环境中，该对象被命名为 &quot;console&quot;</span></span><br><span class=\"line\">        v8.add(<span class=\"string\">&quot;console&quot;</span>, v8Console)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ConsolePlugin().register(v8)</span><br></pre></td></tr></table></figure>\n\n<p>具体代码可参考:<a href=\"https://github.com/VomPom/J2V8_tutorial\">J2V8_tutorial</a></p>\n<h4 id=\"执行返回值是-Promise-类型的方法\"><a href=\"#执行返回值是-Promise-类型的方法\" class=\"headerlink\" title=\"执行返回值是 Promise 类型的方法\"></a>执行返回值是 Promise 类型的方法</h4><p>之前将的方法调用都是返回数据为基础类型，由于在 Java&#x2F;kotlin 中没有<code>Promise</code>类型的方法，所以对于 <code>Promise</code> 方法我们需要进行一些特殊处理，我们通过使用 <code>CountDownLatch</code> 可以来实现一个 “异步变同步” 的操作，我们需要考虑的是如何接受到 <code>resolve</code> <code>rejcet</code>的调用，js 中 Promise 的方法使用如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">PromiseMethod</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// success got result</span></span><br><span class=\"line\">  &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// error...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 J2V8中一样的实现</p>\n<p><strong>获取返回的 Promise 对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">val</span> <span class=\"variable\">promiseObj</span> <span class=\"operator\">=</span> v8.executeFunction(functionName, v8Array) as V8Object</span><br></pre></td></tr></table></figure>\n<p>**执行 Promise 对象的 then 和 catch 方法 **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsPromise.apply &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">onResolveParameter</span> <span class=\"operator\">=</span> V8Array(v8).push(onResolve)</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">onRejectParameter</span> <span class=\"operator\">=</span> V8Array(v8).push(onReject)</span><br><span class=\"line\">        executeVoidFunction(<span class=\"string\">&quot;then&quot;</span>, onResolveParameter)</span><br><span class=\"line\">        executeVoidFunction(<span class=\"string\">&quot;catch&quot;</span>, onRejectParameter)</span><br><span class=\"line\">        ....</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>其中 onResolve</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">val</span> <span class=\"variable\">onResolve</span> <span class=\"operator\">=</span> V8Function(jsRuntime) &#123; receiver, parameters -&gt;</span><br><span class=\"line\">        ……</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>具体代码可参考:<a href=\"https://github.com/VomPom/J2V8_tutorial\">J2V8_tutorial</a></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>以上基本上能解决大部分 Android 调用 js的代码逻辑了，这里对整体执行的流程进行一个总结</p>\n<p>1、通过 webpack 对多个 .js 文件打包<br>2、初始化 V8 环境并加载 .js 文件<br>3、注册 Java 方法，供 js 进行调用<br>4、读取指定的模板<br>5、执行目标 js 方法，并释放 v8 执行过程中产生的资源</p>\n<h3 id=\"踩过的一些坑\"><a href=\"#踩过的一些坑\" class=\"headerlink\" title=\"踩过的一些坑\"></a>踩过的一些坑</h3><p>1、<code>java.lang.UnsupportedOperationException: StartNodeJS Not Supported.</code></p>\n<p>这个库有一个 <code>NodeJS.createNodeJS()</code>方法，以为是完美结合 NodeJs 的，查了下不太支持 Android，不过也有人提出解决方法：<a href=\"https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8\">https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8</a></p>\n<p>2、<code>java.lang.IllegalStateException: 3 Object(s) still exist in runtime</code></p>\n<p>这是调用 &#96;v8.close&#96;&#96; 总是会遇到的问题，一定需要确保使用了 v8 Runtime 过程变量有被释放掉，可能有时候不知道具体哪个变量没有被释放</p>\n<p>3、<code>setTimeout、setInterval</code> 无效</p>\n<p>这是我最开始遇到的问题，简单想着“既然能执行js代码，那 setTimeout、setInterval 这些方法都是 js 最普通的方法应该没问题吧”，如果有一些平时在 js 很常见的操作如果无法执行，最好 check 一下 J2V8 是否支持</p>\n<p>4、Undefined 相关</p>\n<p>虽然源码里面通过了一个 Undefined 的类，但是不能直接使用，如果方法返回的 Undefined，通过 <code>V8Object</code> 的 <code>isUndefined()</code> 去判断</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>[1]J2V8 <a href=\"https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/\">https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/</a></p>\n<p>[2] Registering Java Callbacks with J2V8 <a href=\"https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/\">https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/</a></p>\n<p>[3] Simple JS in Node.js <a href=\"https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html\">https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html</a></p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","api":"api/tags/JavaScript.json"}],"api":"api/posts/2023/09/30/Android-J2V8-实践.json"}],"info":{"type":"archive","year":2023,"month":9}},"api":"api/archives/2023/09/page.1.json"}