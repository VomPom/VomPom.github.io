{"data":{"index":1,"total":1,"posts":[{"title":"H264码流结构理解整理","slug":"H264码流结构理解整理","date":"2025-09-15T13:31:00.000Z","updated":"2025-09-15T13:53:19.214Z","comments":true,"url":"2025/09/15/H264码流结构理解整理/","excerpt":"<p>本文将带你深入H.264文件的内部，从宏观到微观，逐一剖析其各个组成部分的作用、相互关系以及一些精妙的设计哲学。<br>在了解H264之前需要有以下的一些基础知识：</p>\n<h2 id=\"宏观结构：从文件到帧\"><a href=\"#宏观结构：从文件到帧\" class=\"headerlink\" title=\"宏观结构：从文件到帧\"></a>宏观结构：从文件到帧</h2><p>一个H.264原始码流（<code>.h264</code>或<code>.264</code>文件）并不是一个简单的“视频文件”，它不包含音频、字幕等元信息。它是一个<strong>纯粹的、编码后的视频数据比特流</strong>。这个流的结构可以看作一个分层模型，如下图所示，理解这个结构是理解H.264的关键：</p>\n<p><img src=\"https://www.hardening-consulting.com/images/h264_bitstream.png\"></p>\n<h3 id=\"网络抽象层单元-NAL-Unit\"><a href=\"#网络抽象层单元-NAL-Unit\" class=\"headerlink\" title=\"网络抽象层单元 (NAL Unit)\"></a>网络抽象层单元 (NAL Unit)</h3><p>H.264设计的一个核心思想是<strong>网络友好性</strong>。为了实现这一目标，整个码流被分割成一个个独立的包，称为 <strong>NAL Unit（网络抽象层单元）</strong>。每个NAL Unit都是一个自包含的数据包，包含一个头部和负载数据。这种设计使得H.流非常适合在容易产生包丢失和延迟的网络（如RTP&#x2F;UDP）中传输，因为一个NAL Unit的丢失通常不会导致整个视频无法解码。</p>\n<h3 id=\"关键概念：帧-Frame-与片-Slice\"><a href=\"#关键概念：帧-Frame-与片-Slice\" class=\"headerlink\" title=\"关键概念：帧 (Frame) 与片 (Slice)\"></a>关键概念：帧 (Frame) 与片 (Slice)</h3><p>在视频编码中，一<strong>帧（Frame）</strong> 通常对应一张静态图片。H.264对一帧图像进行编码后，其数据可能会被装进<strong>一个或多个NAL Unit</strong>中。</p>\n<p>为什么是一或多个？这是因为一帧数据可以被分割成多个<strong>片（Slice）</strong>。每个Slice都是一个独立的编码单元，包含了一帧图像中的一部分宏块（Macroblock）。将一帧分割成多个Slice主要有两个好处：</p>\n<ol>\n<li><strong>错误恢复</strong>：在网络传输中，如果一个Slice丢失了，解码器仍然可以利用错误隐藏技术来近似恢复图像，而不是丢失整帧。</li>\n<li><strong>并行处理</strong>：多个Slice可以并行编码或解码，提高效率。</li>\n</ol>\n<h2 id=\"微观结构：NAL-Unit的内部世界\"><a href=\"#微观结构：NAL-Unit的内部世界\" class=\"headerlink\" title=\"微观结构：NAL Unit的内部世界\"></a>微观结构：NAL Unit的内部世界</h2><p>现在，让我们打开一个NAL Unit，看看它里面到底有什么。</p>\n<h3 id=\"NAL-Unit-Header（头部）\"><a href=\"#NAL-Unit-Header（头部）\" class=\"headerlink\" title=\"NAL Unit Header（头部）\"></a>NAL Unit Header（头部）</h3><p>每个NAL Unit都以一个1字节（可扩展为2字节）的头部开始。这个头部虽然小，但信息量巨大：</p>\n<ul>\n<li><strong>禁止位（F）</strong>：通常为0，如果为1表示该单元出错。</li>\n<li><strong>重要性指示位（NRI）</strong>：表示这个NAL Unit的重要性。值越大，解码器越需要优先保护它（如SPS&#x2F;PPS的NRI值最高）。</li>\n<li><strong>类型（Type）</strong>：这是最关键的部分！它定义了该单元负载数据的类型。主要分为两大类：<ul>\n<li><strong>VCL（视频编码层）单元</strong>：真正携带编码视频数据的单元（如Slice）。</li>\n<li><strong>Non-VCL（非视频编码层）单元</strong>：携带元数据和控制信息的单元，是解码的“说明书”。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NAL-Unit-Payload（负载）\"><a href=\"#NAL-Unit-Payload（负载）\" class=\"headerlink\" title=\"NAL Unit Payload（负载）\"></a>NAL Unit Payload（负载）</h3><p>负载部分的数据内容完全由头部中的<strong>类型（Type）</strong> 决定。</p>\n<h4 id=\"关键的Non-VCL单元（元数据）\"><a href=\"#关键的Non-VCL单元（元数据）\" class=\"headerlink\" title=\"关键的Non-VCL单元（元数据）\"></a><strong>关键的Non-VCL单元（元数据）</strong></h4><p>这些单元不包含图像像素数据，但<strong>没有它们，VCL单元根本无法被解码</strong>。它们通常在视频流开始时发送一次，但如果解码器中途加入，也需要重新获取。</p>\n<p>  <strong>SPS（序列参数集 - Type 7）</strong><br>    *   <strong>作用</strong>：包含了适用于<strong>整个视频序列</strong>的全局参数。它是解码器的“总纲”。<br>    *   <strong>包含信息</strong>：视频的档次、级别、分辨率（<code>pic_width_in_mbs_minus1</code>等）、帧率、色深、比特深度等。没有SPS，解码器连图像该解码成多大都不知道。</p>\n<p>   <strong>PPS（图像参数集 - Type 8）</strong><br>    *   <strong>作用</strong>：包含了适用于<strong>一幅或多幅图像</strong>的解码参数。它更像是“章节细则”。<br>    *   <strong>包含信息</strong>：熵编码模式（CAVLC或CABAC）、量化参数等。PPS可以改变，从而在序列中实现不同的编码配置。</p>\n<p>   <strong>IDR（即时解码刷新 - 属于VCL，但特殊）</strong><br>    *   <strong>作用</strong>：一个特殊的Slice（通常是I-Slice），它告诉解码器：“从这里开始，可以独立解码，不再需要参考之前的帧了。”<br>    *   <strong>意义</strong>：IDR帧是<strong>随机访问和 seeking 的关键点</strong>。当你拖动视频进度条时，播放器总是在寻找最近的IDR帧开始解码，因为它能清空之前的参考帧缓冲区，保证解码正确。</p>\n<h4 id=\"VCL单元（核心数据）\"><a href=\"#VCL单元（核心数据）\" class=\"headerlink\" title=\"VCL单元（核心数据）\"></a><strong>VCL单元（核心数据）</strong></h4><p>这些单元携带了实际的压缩视频数据，即Slice。</p>\n<p>  <strong>Slice Header（切片头）</strong><br>    *   每个Slice都有自己的头，其中包含了当前Slice解码所需的<strong>信息</strong>：<br>        *   引用哪个PPS（从而间接引用SPS）。<br>        *   帧类型（I, P, B）。<br>        *   量化参数。<br>        *   根据帧类型，包含运动向量预测所需的信息。</p>\n<p>   <strong>Slice Data（切片数据）</strong><br>    *   这是压缩数据的核心，由一系列<strong>宏块（Macroblock）</strong> 组成。<br>    *   <strong>宏块</strong>通常是16x16像素的编码单元，它包含了：<br>        *   <strong>预测信息</strong>：对于I帧，是帧内预测模式；对于P&#x2F;B帧，是运动向量（描述当前块是从参考帧的哪个位置移动过来的）。<br>        *   <strong>残差数据</strong>：经过预测后，当前块与预测块之间的差值。这部分数据会经过<strong>变换（DCT）、量化、熵编码（CAVLC&#x2F;CABAC）</strong>，从而获得极高的压缩率。</p>\n<h2 id=\"特殊设计点\"><a href=\"#特殊设计点\" class=\"headerlink\" title=\"特殊设计点\"></a>特殊设计点</h2><h3 id=\"3-1-参数集（SPS-PPS）机制\"><a href=\"#3-1-参数集（SPS-PPS）机制\" class=\"headerlink\" title=\"3.1 参数集（SPS&#x2F;PPS）机制\"></a>3.1 参数集（SPS&#x2F;PPS）机制</h3><p>这是H.264一个非常巧妙的设计。它将<strong>很少改变但至关重要的信息</strong>（SPS&#x2F;PPS）与<strong>频繁变化的数据</strong>（Slice）分离开。</p>\n<ul>\n<li><strong>优点一：鲁棒性</strong>：即使丢失了一些Slice，只要SPS&#x2F;PPS还在，解码器就能继续工作。</li>\n<li><strong>优点二：效率</strong>：无需在每一个Slice中都重复这些头部信息，大大节省了码流。</li>\n<li><strong>优点三：灵活性</strong>：一个码流中可以存在多个PPS，并在不同场景下切换使用。</li>\n</ul>\n<h3 id=\"3-2-I-P-B帧与GOP（图像组）\"><a href=\"#3-2-I-P-B帧与GOP（图像组）\" class=\"headerlink\" title=\"3.2 I, P, B帧与GOP（图像组）\"></a>3.2 I, P, B帧与GOP（图像组）</h3><ul>\n<li><strong>I帧（Intra）</strong>：自包含帧，仅使用本帧内的信息进行编码，不参考其他帧。它是压缩率最低但最关键的帧，是P帧和B帧的锚点。</li>\n<li><strong>P帧（Predicted）</strong>：参考前面的I帧或P帧进行运动补偿预测编码，压缩率高于I帧。</li>\n<li><strong>B帧（Bi-directional）</strong>：可以同时参考前面和后面的帧，获得最高的压缩率，但会带来编码延迟。</li>\n<li>一个<strong>GOP</strong>就是从上一个IDR帧到下一个IDR帧之前的所有帧序列。GOP长度越长，B&#x2F;P帧越多，压缩率越高，但随机访问的间隔也越长。</li>\n</ul>\n<h3 id=\"3-3-熵编码：CAVLC-与-CABAC\"><a href=\"#3-3-熵编码：CAVLC-与-CABAC\" class=\"headerlink\" title=\"3.3 熵编码：CAVLC 与 CABAC\"></a>3.3 熵编码：CAVLC 与 CABAC</h3><p>这是压缩过程中的最后一步，将数据转换为二进制码流。</p>\n<ul>\n<li><strong>CAVLC（上下文自适应变长编码）</strong>：相对简单，压缩效率一般，用于Baseline等档次。</li>\n<li><strong>CABAC（上下文自适应二进制算术编码）</strong>：非常复杂，但压缩效率比CAVLC高出10%-20%，是Main和High档次效率高的主要原因之一。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>H.264的结构是一个分层、模块化的杰作：</p>\n<ol>\n<li><strong>整体</strong>：码流由一个个<strong>NAL Unit</strong>组成，适合网络传输。</li>\n<li><strong>局部</strong>：NAL Unit分为<strong>VCL</strong>（携带Slice数据）和<strong>Non-VCL</strong>（携带SPS&#x2F;PPS等元数据）。</li>\n<li><strong>核心</strong>：Slice数据由<strong>宏块</strong>组成，宏块包含了<strong>预测信息</strong>和<strong>残差数据</strong>，通过预测和变换编码实现压缩。</li>\n<li><strong>精妙设计</strong>：<strong>参数集分离</strong>、<strong>IDR帧</strong>、<strong>Slice划分</strong>和<strong>CABAC</strong>等特性共同造就了H.264在效率、鲁棒性和灵活性上的完美平衡。</li>\n</ol>\n<p>理解H.264的结构，不仅能帮助我们更好地处理视频数据（如封装、传输、解码问题定位），更能让我们体会到工程师们在标准制定中的智慧和远见。尽管如今H.265&#x2F;HEVC、AV1等更先进的编码器已经出现，但H.264的基本设计思想和结构仍然深刻地影响着它们。</p>\n","cover":null,"images":["https://www.hardening-consulting.com/images/h264_bitstream.png"],"content":"<p>本文将带你深入H.264文件的内部，从宏观到微观，逐一剖析其各个组成部分的作用、相互关系以及一些精妙的设计哲学。<br>在了解H264之前需要有以下的一些基础知识：</p>\n<h2 id=\"宏观结构：从文件到帧\"><a href=\"#宏观结构：从文件到帧\" class=\"headerlink\" title=\"宏观结构：从文件到帧\"></a>宏观结构：从文件到帧</h2><p>一个H.264原始码流（<code>.h264</code>或<code>.264</code>文件）并不是一个简单的“视频文件”，它不包含音频、字幕等元信息。它是一个<strong>纯粹的、编码后的视频数据比特流</strong>。这个流的结构可以看作一个分层模型，如下图所示，理解这个结构是理解H.264的关键：</p>\n<p><img src=\"https://www.hardening-consulting.com/images/h264_bitstream.png\"></p>\n<h3 id=\"网络抽象层单元-NAL-Unit\"><a href=\"#网络抽象层单元-NAL-Unit\" class=\"headerlink\" title=\"网络抽象层单元 (NAL Unit)\"></a>网络抽象层单元 (NAL Unit)</h3><p>H.264设计的一个核心思想是<strong>网络友好性</strong>。为了实现这一目标，整个码流被分割成一个个独立的包，称为 <strong>NAL Unit（网络抽象层单元）</strong>。每个NAL Unit都是一个自包含的数据包，包含一个头部和负载数据。这种设计使得H.流非常适合在容易产生包丢失和延迟的网络（如RTP&#x2F;UDP）中传输，因为一个NAL Unit的丢失通常不会导致整个视频无法解码。</p>\n<h3 id=\"关键概念：帧-Frame-与片-Slice\"><a href=\"#关键概念：帧-Frame-与片-Slice\" class=\"headerlink\" title=\"关键概念：帧 (Frame) 与片 (Slice)\"></a>关键概念：帧 (Frame) 与片 (Slice)</h3><p>在视频编码中，一<strong>帧（Frame）</strong> 通常对应一张静态图片。H.264对一帧图像进行编码后，其数据可能会被装进<strong>一个或多个NAL Unit</strong>中。</p>\n<p>为什么是一或多个？这是因为一帧数据可以被分割成多个<strong>片（Slice）</strong>。每个Slice都是一个独立的编码单元，包含了一帧图像中的一部分宏块（Macroblock）。将一帧分割成多个Slice主要有两个好处：</p>\n<ol>\n<li><strong>错误恢复</strong>：在网络传输中，如果一个Slice丢失了，解码器仍然可以利用错误隐藏技术来近似恢复图像，而不是丢失整帧。</li>\n<li><strong>并行处理</strong>：多个Slice可以并行编码或解码，提高效率。</li>\n</ol>\n<h2 id=\"微观结构：NAL-Unit的内部世界\"><a href=\"#微观结构：NAL-Unit的内部世界\" class=\"headerlink\" title=\"微观结构：NAL Unit的内部世界\"></a>微观结构：NAL Unit的内部世界</h2><p>现在，让我们打开一个NAL Unit，看看它里面到底有什么。</p>\n<h3 id=\"NAL-Unit-Header（头部）\"><a href=\"#NAL-Unit-Header（头部）\" class=\"headerlink\" title=\"NAL Unit Header（头部）\"></a>NAL Unit Header（头部）</h3><p>每个NAL Unit都以一个1字节（可扩展为2字节）的头部开始。这个头部虽然小，但信息量巨大：</p>\n<ul>\n<li><strong>禁止位（F）</strong>：通常为0，如果为1表示该单元出错。</li>\n<li><strong>重要性指示位（NRI）</strong>：表示这个NAL Unit的重要性。值越大，解码器越需要优先保护它（如SPS&#x2F;PPS的NRI值最高）。</li>\n<li><strong>类型（Type）</strong>：这是最关键的部分！它定义了该单元负载数据的类型。主要分为两大类：<ul>\n<li><strong>VCL（视频编码层）单元</strong>：真正携带编码视频数据的单元（如Slice）。</li>\n<li><strong>Non-VCL（非视频编码层）单元</strong>：携带元数据和控制信息的单元，是解码的“说明书”。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NAL-Unit-Payload（负载）\"><a href=\"#NAL-Unit-Payload（负载）\" class=\"headerlink\" title=\"NAL Unit Payload（负载）\"></a>NAL Unit Payload（负载）</h3><p>负载部分的数据内容完全由头部中的<strong>类型（Type）</strong> 决定。</p>\n<h4 id=\"关键的Non-VCL单元（元数据）\"><a href=\"#关键的Non-VCL单元（元数据）\" class=\"headerlink\" title=\"关键的Non-VCL单元（元数据）\"></a><strong>关键的Non-VCL单元（元数据）</strong></h4><p>这些单元不包含图像像素数据，但<strong>没有它们，VCL单元根本无法被解码</strong>。它们通常在视频流开始时发送一次，但如果解码器中途加入，也需要重新获取。</p>\n<p>  <strong>SPS（序列参数集 - Type 7）</strong><br>    *   <strong>作用</strong>：包含了适用于<strong>整个视频序列</strong>的全局参数。它是解码器的“总纲”。<br>    *   <strong>包含信息</strong>：视频的档次、级别、分辨率（<code>pic_width_in_mbs_minus1</code>等）、帧率、色深、比特深度等。没有SPS，解码器连图像该解码成多大都不知道。</p>\n<p>   <strong>PPS（图像参数集 - Type 8）</strong><br>    *   <strong>作用</strong>：包含了适用于<strong>一幅或多幅图像</strong>的解码参数。它更像是“章节细则”。<br>    *   <strong>包含信息</strong>：熵编码模式（CAVLC或CABAC）、量化参数等。PPS可以改变，从而在序列中实现不同的编码配置。</p>\n<p>   <strong>IDR（即时解码刷新 - 属于VCL，但特殊）</strong><br>    *   <strong>作用</strong>：一个特殊的Slice（通常是I-Slice），它告诉解码器：“从这里开始，可以独立解码，不再需要参考之前的帧了。”<br>    *   <strong>意义</strong>：IDR帧是<strong>随机访问和 seeking 的关键点</strong>。当你拖动视频进度条时，播放器总是在寻找最近的IDR帧开始解码，因为它能清空之前的参考帧缓冲区，保证解码正确。</p>\n<h4 id=\"VCL单元（核心数据）\"><a href=\"#VCL单元（核心数据）\" class=\"headerlink\" title=\"VCL单元（核心数据）\"></a><strong>VCL单元（核心数据）</strong></h4><p>这些单元携带了实际的压缩视频数据，即Slice。</p>\n<p>  <strong>Slice Header（切片头）</strong><br>    *   每个Slice都有自己的头，其中包含了当前Slice解码所需的<strong>信息</strong>：<br>        *   引用哪个PPS（从而间接引用SPS）。<br>        *   帧类型（I, P, B）。<br>        *   量化参数。<br>        *   根据帧类型，包含运动向量预测所需的信息。</p>\n<p>   <strong>Slice Data（切片数据）</strong><br>    *   这是压缩数据的核心，由一系列<strong>宏块（Macroblock）</strong> 组成。<br>    *   <strong>宏块</strong>通常是16x16像素的编码单元，它包含了：<br>        *   <strong>预测信息</strong>：对于I帧，是帧内预测模式；对于P&#x2F;B帧，是运动向量（描述当前块是从参考帧的哪个位置移动过来的）。<br>        *   <strong>残差数据</strong>：经过预测后，当前块与预测块之间的差值。这部分数据会经过<strong>变换（DCT）、量化、熵编码（CAVLC&#x2F;CABAC）</strong>，从而获得极高的压缩率。</p>\n<h2 id=\"特殊设计点\"><a href=\"#特殊设计点\" class=\"headerlink\" title=\"特殊设计点\"></a>特殊设计点</h2><h3 id=\"3-1-参数集（SPS-PPS）机制\"><a href=\"#3-1-参数集（SPS-PPS）机制\" class=\"headerlink\" title=\"3.1 参数集（SPS&#x2F;PPS）机制\"></a>3.1 参数集（SPS&#x2F;PPS）机制</h3><p>这是H.264一个非常巧妙的设计。它将<strong>很少改变但至关重要的信息</strong>（SPS&#x2F;PPS）与<strong>频繁变化的数据</strong>（Slice）分离开。</p>\n<ul>\n<li><strong>优点一：鲁棒性</strong>：即使丢失了一些Slice，只要SPS&#x2F;PPS还在，解码器就能继续工作。</li>\n<li><strong>优点二：效率</strong>：无需在每一个Slice中都重复这些头部信息，大大节省了码流。</li>\n<li><strong>优点三：灵活性</strong>：一个码流中可以存在多个PPS，并在不同场景下切换使用。</li>\n</ul>\n<h3 id=\"3-2-I-P-B帧与GOP（图像组）\"><a href=\"#3-2-I-P-B帧与GOP（图像组）\" class=\"headerlink\" title=\"3.2 I, P, B帧与GOP（图像组）\"></a>3.2 I, P, B帧与GOP（图像组）</h3><ul>\n<li><strong>I帧（Intra）</strong>：自包含帧，仅使用本帧内的信息进行编码，不参考其他帧。它是压缩率最低但最关键的帧，是P帧和B帧的锚点。</li>\n<li><strong>P帧（Predicted）</strong>：参考前面的I帧或P帧进行运动补偿预测编码，压缩率高于I帧。</li>\n<li><strong>B帧（Bi-directional）</strong>：可以同时参考前面和后面的帧，获得最高的压缩率，但会带来编码延迟。</li>\n<li>一个<strong>GOP</strong>就是从上一个IDR帧到下一个IDR帧之前的所有帧序列。GOP长度越长，B&#x2F;P帧越多，压缩率越高，但随机访问的间隔也越长。</li>\n</ul>\n<h3 id=\"3-3-熵编码：CAVLC-与-CABAC\"><a href=\"#3-3-熵编码：CAVLC-与-CABAC\" class=\"headerlink\" title=\"3.3 熵编码：CAVLC 与 CABAC\"></a>3.3 熵编码：CAVLC 与 CABAC</h3><p>这是压缩过程中的最后一步，将数据转换为二进制码流。</p>\n<ul>\n<li><strong>CAVLC（上下文自适应变长编码）</strong>：相对简单，压缩效率一般，用于Baseline等档次。</li>\n<li><strong>CABAC（上下文自适应二进制算术编码）</strong>：非常复杂，但压缩效率比CAVLC高出10%-20%，是Main和High档次效率高的主要原因之一。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>H.264的结构是一个分层、模块化的杰作：</p>\n<ol>\n<li><strong>整体</strong>：码流由一个个<strong>NAL Unit</strong>组成，适合网络传输。</li>\n<li><strong>局部</strong>：NAL Unit分为<strong>VCL</strong>（携带Slice数据）和<strong>Non-VCL</strong>（携带SPS&#x2F;PPS等元数据）。</li>\n<li><strong>核心</strong>：Slice数据由<strong>宏块</strong>组成，宏块包含了<strong>预测信息</strong>和<strong>残差数据</strong>，通过预测和变换编码实现压缩。</li>\n<li><strong>精妙设计</strong>：<strong>参数集分离</strong>、<strong>IDR帧</strong>、<strong>Slice划分</strong>和<strong>CABAC</strong>等特性共同造就了H.264在效率、鲁棒性和灵活性上的完美平衡。</li>\n</ol>\n<p>理解H.264的结构，不仅能帮助我们更好地处理视频数据（如封装、传输、解码问题定位），更能让我们体会到工程师们在标准制定中的智慧和远见。尽管如今H.265&#x2F;HEVC、AV1等更先进的编码器已经出现，但H.264的基本设计思想和结构仍然深刻地影响着它们。</p>\n","categories":[],"tags":[{"name":"音视频","slug":"音视频","api":"api/tags/音视频.json"}],"api":"api/posts/2025/09/15/H264码流结构理解整理.json"}],"info":{"type":"archive","year":2025,"month":9}},"api":"api/archives/2025/09/page.1.json"}