{"data":{"index":1,"total":1,"posts":[{"title":"手写一个精简版Koin：深入理解依赖注入核心原理","slug":"Koin-源码理解相关","date":"2025-08-25T13:08:00.000Z","updated":"2025-08-25T12:12:15.175Z","comments":true,"url":"2025/08/25/Koin-源码理解相关/","excerpt":"<p>在现代 Android 应用开发中，依赖注入（Dependency Injection, DI）已成为构建松耦合、可测试代码的重要技术。Koin 作为一个轻量级的Kotlin依赖注入框架，因其简洁的DSL和易用性深受开发者喜爱。最近对其源码进行学习了解，通过手写一个极度精简的 Koin 核心代码，来透彻理解Koin的注册、解析和参数传递机制。</p>\n<blockquote>\n<p><strong>本文代码基于 Koin 源码思想实现，仅用于学习核心原理，并非 Koin官 方代码。</strong></p>\n</blockquote>\n<h2 id=\"核心概念与项目结构\"><a href=\"#核心概念与项目结构\" class=\"headerlink\" title=\"核心概念与项目结构\"></a>核心概念与项目结构</h2><p>下图是基于 koin 4.1 解析的UML 类图之间的关系</p>\n<img src=\"https://cdn.julis.wang/blog/img/koin_uml.png\"> \n<p>power by <a href=\"https://www.mermaidchart.com/\">mermaidchart</a></p>\n<p>主要类：</p>\n<ul>\n<li><strong><code>KoinApplication</code></strong>: Koin启动的入口，负责初始化容器和加载模块。</li>\n<li><strong><code>Koin</code></strong>: 核心容器，持有实例注册表(<code>InstanceRegistry</code>)和作用域注册表(<code>ScopeRegistry</code>)。</li>\n<li><strong><code>Module</code></strong>: 定义依赖的地方，存放了所有的 bean 定义（<code>BeanDefinition</code>）与工厂（<code>InstanceFactory</code>）。</li>\n<li><strong><code>BeanDefinition</code></strong>: 对一个依赖项的定义，包括其类型、限定符、所属作用域以及创建它的 lambda 表达式。</li>\n<li><strong><code>InstanceFactory</code></strong>: 负责根据 <code>BeanDefinition</code> 创建实例的核心工厂，分为 <code>SingleFactory</code> (单例)、<code>FactoryFactory</code> (工厂模式) 和 <code>ScopeFactory</code> (作用域内单例)。</li>\n<li><strong><code>Scope</code></strong>: 作用域，用于管理特定生命周期内的实例。</li>\n<li><strong><code>ParametersHolder</code></strong>: 参数容器，用于在获取实例时动态传递参数。</li>\n</ul>\n<h2 id=\"Koin-的注册流程（Declaration）\"><a href=\"#Koin-的注册流程（Declaration）\" class=\"headerlink\" title=\"Koin 的注册流程（Declaration）\"></a>Koin 的注册流程（Declaration）</h2><p>注册是DI容器工作的第一步。通过 <code>startKoin</code> 和 <code>module</code> DSL来声明依赖。</p>\n<h3 id=\"启动-Koin-与模块加载\"><a href=\"#启动-Koin-与模块加载\" class=\"headerlink\" title=\"启动 Koin 与模块加载\"></a>启动 Koin 与模块加载</h3><p>整个启动加载流程将 kotlin 的语法糖用到了极致，也就使得整个代码看起来是如此的简洁。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myApp = startKoin &#123;</span><br><span class=\"line\">    modules(appModule)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个模块</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appModule = module &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册一个单例，其构造需要一個 Int 参数</span></span><br><span class=\"line\">    single &#123; (<span class=\"keyword\">data</span>: <span class=\"built_in\">Int</span>) -&gt; ComponentInt(<span class=\"keyword\">data</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注册一个工厂（每次获取都是新实例），其构造需要 Int 和 Float 参数</span></span><br><span class=\"line\">    factory &#123; (data1: <span class=\"built_in\">Int</span>, data2: <span class=\"built_in\">Float</span>) -&gt; ComponentIntFloat(data1, data2) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>流程剖析：</strong></p>\n<p><strong><code>startKoin</code></strong><br>这是一个顶级函数，它调用 <code>GlobalContext.startKoin</code>，创建并初始化一个 <code>KoinApplication</code> 对象。</p>\n<p><strong><code>modules(...)</code></strong><br><code>KoinApplication</code> 的方法，它将传入的 <code>Module</code> 列表交给 <code>Koin</code> 实例的 <code>loadModels</code> 方法处理。</p>\n<p><strong><code>module &#123; ... &#125;</code></strong><br>DSL函数，它创建一个 <code>Module</code> 对象，并执行其中的配置lambda。</p>\n<p><strong><code>single/factory/scope</code></strong><br><code>Module</code> 的扩展函数。它们的作用是：</p>\n<ul>\n<li>使用 <code>_createDefinition</code> 将 lambda 表达式包装成一个 <code>BeanDefinition</code>对象。</li>\n<li>使用 <code>_InstanceFactory</code> 将 <code>BeanDefinition</code> 包装成对应的 <code>InstanceFactory</code>。</li>\n<li>调用 <code>indexPrimaryType</code>，生成一个<strong>唯一的Key</strong>（格式：<code>类名:限定符:作用域</code>），并将 <code>Factory</code> 存入 <code>Module.mappings</code> 这个 <code>HashMap</code> 中。</li>\n</ul>\n<p><strong>最终存储</strong><br><code>Koin</code> 的 <code>InstanceRegistry</code> 会遍历所有 <code>Module</code>，将它们 <code>mappings</code> 中的全部 <code>Factory</code> 都合并到自己的 <code>_instances</code>（一个 <code>ConcurrentHashMap</code>）中。</p>\n<p>至此，所有依赖的定义都已注册到容器中，静待获取。</p>\n<h2 id=\"Koin的实例获取流程（Retrieval）\"><a href=\"#Koin的实例获取流程（Retrieval）\" class=\"headerlink\" title=\"Koin的实例获取流程（Retrieval）\"></a>Koin的实例获取流程（Retrieval）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取无参依赖（普通方式）</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> component = <span class=\"keyword\">get</span>&lt;Component&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 scope 作用域限定进行获取</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> scope = koin.createScope(<span class=\"string\">&quot;scope&quot;</span>, scopeQualifier)</span><br><span class=\"line\"><span class=\"keyword\">val</span> component = scope.<span class=\"keyword\">get</span>&lt;Component&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要动态参数的获取</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> componentWithArgs = <span class=\"keyword\">get</span>&lt;ComponentInt&gt; &#123; parametersOf(<span class=\"number\">42</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> componentWithMultiArgs = <span class=\"keyword\">get</span>&lt;ComponentIntFloat&gt; &#123; parametersOf(<span class=\"number\">101</span>, <span class=\"number\">3.14f</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程剖析\"><a href=\"#流程剖析\" class=\"headerlink\" title=\"流程剖析\"></a>流程剖析</h3><p><strong><code>Scope.get&lt;T&gt;</code></strong></p>\n<p>这是 <code>Scope</code> 的一个扩展函数。它首先创建一个 <code>ResolutionContext</code>，封装了当前作用域、要解析的类型、限定符以及最重要的——<strong>参数持有器 <code>ParametersHolder</code></strong>（由 <code>parametersOf</code> 函数创建）。</p>\n<p> <strong>解析上下文（ResolutionContext）</strong></p>\n<p> 这个上下文对象包含了解析一个实例所需的所有信息。</p>\n<p><strong>核心解析器（CoreResolver）</strong><br><code>get</code> 操作会委托给 <code>Koin</code> 的 <code>CoreResolver</code>进行处理。源码里面对于查找顺序有非常清晰的层次体现：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">resolveFromContext</span><span class=\"params\">(scope : <span class=\"type\">Scope</span>, instanceContext: <span class=\"type\">ResolutionContext</span>)</span></span>: T &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolveFromContextOrNull(scope,instanceContext) ?: throwNoDefinitionFound(instanceContext)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">resolveFromContextOrNull</span><span class=\"params\">(scope : <span class=\"type\">Scope</span>, instanceContext: <span class=\"type\">ResolutionContext</span>, lookupParent : <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span>)</span></span>: T? &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolveFromInjectedParameters(instanceContext)</span><br><span class=\"line\">          ?: resolveFromRegistry(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromStackedParameters(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromScopeSource(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromScopeArchetype(scope,instanceContext)</span><br><span class=\"line\">          ?: <span class=\"keyword\">if</span> (lookupParent) resolveFromParentScopes(scope,instanceContext) <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">          ?: resolveInExtensions(scope,instanceContext)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>查找工厂</strong></p>\n<ul>\n<li><code>Resolver</code> 会调用 <code>InstanceRegistry.resolveDefinition</code>。</li>\n<li>该方法使用和注册时<strong>相同的算法</strong>生成Key（类名:限定符:作用域），然后从 <code>_instances</code> 中查找对应的 <code>InstanceFactory</code>。</li>\n</ul>\n<p> <strong>创建实例</strong></p>\n<ul>\n<li><p>找到 <code>Factory</code> 后，调用其 <code>get(context: ResolutionContext)</code> 方法。</p>\n</li>\n<li><p><code>Factory</code> 会调用自己的 <code>create</code> 方法。<strong>关键一步来了</strong>：在 <code>create</code> 方法中，会执行 <code>BeanDefinition.definition.invoke(context.scope, parameters)</code>。这其实就是执行了之前注册的 lambda：<code>&#123; (data: Int) -&gt; ComponentInt(data) &#125;</code>。</p>\n</li>\n<li><p><strong>参数传递</strong>：这里的 <code>parameters</code> 就是你在 <code>get</code> 时传入的 <code>ParametersHolder</code>。Lambda 的参数 <code>(data: Int)</code> 会从 <code>ParametersHolder</code> 中按顺序（或使用解构）取出值</p>\n</li>\n</ul>\n<p><strong>返回实例</strong></p>\n<p>工厂将创建好的实例返回给调用者。</p>\n<p>对于 <code>SingleFactory</code>，它会将第一次创建出来的实例缓存起来，后续调用直接返回缓存实例。<code>FactoryFactory</code> 则每次都会执行 <code>create</code> 方法。</p>\n<h2 id=\"其他技术\"><a href=\"#其他技术\" class=\"headerlink\" title=\"其他技术\"></a>其他技术</h2><h3 id=\"DslMarker-的作用\"><a href=\"#DslMarker-的作用\" class=\"headerlink\" title=\"@DslMarker 的作用\"></a>@DslMarker 的作用</h3><p>你的代码开头定义了三个注解：<code>@KoinApplicationDslMarker</code>, <code>@KoinDslMarker</code>, <code>@OptionDslMarker</code>。这是Kotlin DSL的<strong>安全卫士</strong>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KoinDslMarker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@KoinDslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Module</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">single</span><span class=\"params\">(...)</span></span> &#123; ... &#125; <span class=\"comment\">// 这个single在DSL里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@KoinDslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KoinApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modules</span><span class=\"params\">(...)</span></span> &#123; ... &#125; <span class=\"comment\">// 这个modules在DSL里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    startKoin &#123;</span><br><span class=\"line\">        modules(...) <span class=\"comment\">// 正确：在 KoinApplication 的 lambda 里</span></span><br><span class=\"line\">        single &#123; ... &#125; <span class=\"comment\">// 编译错误！@DslMarker 阻止了你隐式地使用外部 Receiver (Module)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@DslMarker</code> 的作用是防止在嵌套的DSL Lambda中，意外地调用到外层Receiver的方法，从而让DSL书写更加清晰和安全。</p>\n<h3 id=\"2-优雅的参数传递与解构\"><a href=\"#2-优雅的参数传递与解构\" class=\"headerlink\" title=\"2. 优雅的参数传递与解构\"></a>2. 优雅的参数传递与解构</h3><p>这是你实现的一个亮点，完美复刻了Koin的动态参数特性。</p>\n<ul>\n<li><strong><code>ParametersHolder</code></strong>：一个轻量的参数容器，内部用一个 <code>List&lt;Any?&gt;</code> 存储参数。</li>\n<li><strong><code>parametersOf</code></strong>：辅助函数，优雅地创建 <code>ParametersHolder</code>。</li>\n<li><strong>解构声明（Destructuring Declaration）</strong>：<code>ParametersHolder</code> 重写了 <code>component1()</code> 到 <code>component5()</code> 操作符。这使得我们在定义lambda时，可以直接用 <code>(a: A, b: B)</code> 的形式来接收参数，而不是手动调用 <code>parameters.get&lt;X&gt;(0)</code>。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册端：看起来就像普通函数</span></span><br><span class=\"line\">single &#123; (id: <span class=\"built_in\">Int</span>, name: String) -&gt; User(id, name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取端：传递参数非常直观</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = <span class=\"keyword\">get</span>&lt;User&gt; &#123; parametersOf(<span class=\"number\">123</span>, <span class=\"string\">&quot;Julius&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>这种设计极大地提升了API的简洁性和可读性。</p>\n<h2 id=\"手写-koin-代码介绍\"><a href=\"#手写-koin-代码介绍\" class=\"headerlink\" title=\"手写 koin 代码介绍\"></a>手写 koin 代码介绍</h2><p>基于对源码的理解和参考，实现了 koin 的基本功能，整体分成三部分：简单 single 数据存取、包含 scope 能力、动态参数能力，分成三个文件夹，顺序123是基于前面带代码累加的。</p>\n<p><strong>简单 single 数据存取</strong><br>这是一份最简单的代码，大概200行不到，基本上包含了 koin 的核心思想：启动时注册组件定义。解析时，先查作用域缓存，命中则直接返回。未命中则递归解析其依赖项，调用工厂函数创建实例，最后返回实例。</p>\n<p>从这里我们也能看出来 koin 的缺点：Koin 启动时 (startKoin) 需要将所有模块的定义 (BeanDefinition) 注册到容器中。实例数量过多会显著增加启动注册过程的耗时，影响应用启动速度。由于每个实例都会对应一个 BeanDefinition 以及 Factory ，内存占用会相应地上升。</p>\n<p>整个流程简单来讲就是生成一个 map，通过 key 获取对于的数据。</p>\n<p><strong>Scope 能力</strong><br>这一份是在之前的能力上进行添加，此前将所有的数据都注册到 “root” 这个容器内，全局通用，但为了将不同作用域分开，需要引入 scope 的概念。</p>\n<p>简单理解就是在通过 key 获取的 map 里面的数据的时候，这个 key 是有一定的规则的，核心逻辑在这里：<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexKey</span><span class=\"params\">(clazz: <span class=\"type\">KClass</span>&lt;*&gt;, typeQualifier: <span class=\"type\">String</span>?, scopeQualifier: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buildString &#123;</span><br><span class=\"line\">        append(clazz.java.name)</span><br><span class=\"line\">        append(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        append(typeQualifier ?: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        append(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        append(scopeQualifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br> 不同的 scope 实际上也就是获取的 key 值的不同。</p>\n<p><strong>动态参数能力</strong><br>最后在 scope 的基础上实现了一个比较重要的能力-动态参数能力，通过这个能力可以让有实例能够在运行的时候根据参数动态创建。这个能力也是像在安卓 Activity&#x2F;Fragment 里面 viewmodel() 实现依赖注入的必要实现。 </p>\n<p>简单理解就是在 get() 的时候将参数传入到获取实例的调用链中，在运行时执行注册的 Lambda 函数invoke时候将作为参数传递到构造方法中去。这里单独拎出来实现是因为这个参数传递影响到整个流程的逻辑，为了上上面的两个能力逻辑更简单清晰，单独在这一部分实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这个手写的迷你Koin，可以深刻地理解到，一个现代DI容器的核心无非是解决两个问题：</p>\n<ol>\n<li><strong>如何注册（Declaration）</strong>：通过DSL将依赖的创建方式（Lambda）以键值对的形式保存到一个全局的注册表中。</li>\n<li><strong>如何获取（Retrieval）</strong>：根据请求的类型、限定符和作用域生成Key，从注册表中找到对应的创建工厂，并调用它来生成实例。支持通过参数容器实现动态传参。</li>\n</ol>\n<p>除此之外，诸如 <code>@DslMarker</code> 保证DSL安全、<strong>解构</strong>实现参数优雅传递，都是构建一个健壮、易用框架的关键技术。</p>\n<p>虽然这个实现省略了Koin的许多高级功能（如完整的Scope生命周期管理、属性注入、Android特定支持等），但它已经囊括了最核心、最精妙的设计思想，再理解其他的模块也会简单很多。</p>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/koin_uml.png"],"content":"<p>在现代 Android 应用开发中，依赖注入（Dependency Injection, DI）已成为构建松耦合、可测试代码的重要技术。Koin 作为一个轻量级的Kotlin依赖注入框架，因其简洁的DSL和易用性深受开发者喜爱。最近对其源码进行学习了解，通过手写一个极度精简的 Koin 核心代码，来透彻理解Koin的注册、解析和参数传递机制。</p>\n<blockquote>\n<p><strong>本文代码基于 Koin 源码思想实现，仅用于学习核心原理，并非 Koin官 方代码。</strong></p>\n</blockquote>\n<h2 id=\"核心概念与项目结构\"><a href=\"#核心概念与项目结构\" class=\"headerlink\" title=\"核心概念与项目结构\"></a>核心概念与项目结构</h2><p>下图是基于 koin 4.1 解析的UML 类图之间的关系</p>\n<img src=\"https://cdn.julis.wang/blog/img/koin_uml.png\"> \n<p>power by <a href=\"https://www.mermaidchart.com/\">mermaidchart</a></p>\n<p>主要类：</p>\n<ul>\n<li><strong><code>KoinApplication</code></strong>: Koin启动的入口，负责初始化容器和加载模块。</li>\n<li><strong><code>Koin</code></strong>: 核心容器，持有实例注册表(<code>InstanceRegistry</code>)和作用域注册表(<code>ScopeRegistry</code>)。</li>\n<li><strong><code>Module</code></strong>: 定义依赖的地方，存放了所有的 bean 定义（<code>BeanDefinition</code>）与工厂（<code>InstanceFactory</code>）。</li>\n<li><strong><code>BeanDefinition</code></strong>: 对一个依赖项的定义，包括其类型、限定符、所属作用域以及创建它的 lambda 表达式。</li>\n<li><strong><code>InstanceFactory</code></strong>: 负责根据 <code>BeanDefinition</code> 创建实例的核心工厂，分为 <code>SingleFactory</code> (单例)、<code>FactoryFactory</code> (工厂模式) 和 <code>ScopeFactory</code> (作用域内单例)。</li>\n<li><strong><code>Scope</code></strong>: 作用域，用于管理特定生命周期内的实例。</li>\n<li><strong><code>ParametersHolder</code></strong>: 参数容器，用于在获取实例时动态传递参数。</li>\n</ul>\n<h2 id=\"Koin-的注册流程（Declaration）\"><a href=\"#Koin-的注册流程（Declaration）\" class=\"headerlink\" title=\"Koin 的注册流程（Declaration）\"></a>Koin 的注册流程（Declaration）</h2><p>注册是DI容器工作的第一步。通过 <code>startKoin</code> 和 <code>module</code> DSL来声明依赖。</p>\n<h3 id=\"启动-Koin-与模块加载\"><a href=\"#启动-Koin-与模块加载\" class=\"headerlink\" title=\"启动 Koin 与模块加载\"></a>启动 Koin 与模块加载</h3><p>整个启动加载流程将 kotlin 的语法糖用到了极致，也就使得整个代码看起来是如此的简洁。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> myApp = startKoin &#123;</span><br><span class=\"line\">    modules(appModule)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个模块</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appModule = module &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册一个单例，其构造需要一個 Int 参数</span></span><br><span class=\"line\">    single &#123; (<span class=\"keyword\">data</span>: <span class=\"built_in\">Int</span>) -&gt; ComponentInt(<span class=\"keyword\">data</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注册一个工厂（每次获取都是新实例），其构造需要 Int 和 Float 参数</span></span><br><span class=\"line\">    factory &#123; (data1: <span class=\"built_in\">Int</span>, data2: <span class=\"built_in\">Float</span>) -&gt; ComponentIntFloat(data1, data2) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>流程剖析：</strong></p>\n<p><strong><code>startKoin</code></strong><br>这是一个顶级函数，它调用 <code>GlobalContext.startKoin</code>，创建并初始化一个 <code>KoinApplication</code> 对象。</p>\n<p><strong><code>modules(...)</code></strong><br><code>KoinApplication</code> 的方法，它将传入的 <code>Module</code> 列表交给 <code>Koin</code> 实例的 <code>loadModels</code> 方法处理。</p>\n<p><strong><code>module &#123; ... &#125;</code></strong><br>DSL函数，它创建一个 <code>Module</code> 对象，并执行其中的配置lambda。</p>\n<p><strong><code>single/factory/scope</code></strong><br><code>Module</code> 的扩展函数。它们的作用是：</p>\n<ul>\n<li>使用 <code>_createDefinition</code> 将 lambda 表达式包装成一个 <code>BeanDefinition</code>对象。</li>\n<li>使用 <code>_InstanceFactory</code> 将 <code>BeanDefinition</code> 包装成对应的 <code>InstanceFactory</code>。</li>\n<li>调用 <code>indexPrimaryType</code>，生成一个<strong>唯一的Key</strong>（格式：<code>类名:限定符:作用域</code>），并将 <code>Factory</code> 存入 <code>Module.mappings</code> 这个 <code>HashMap</code> 中。</li>\n</ul>\n<p><strong>最终存储</strong><br><code>Koin</code> 的 <code>InstanceRegistry</code> 会遍历所有 <code>Module</code>，将它们 <code>mappings</code> 中的全部 <code>Factory</code> 都合并到自己的 <code>_instances</code>（一个 <code>ConcurrentHashMap</code>）中。</p>\n<p>至此，所有依赖的定义都已注册到容器中，静待获取。</p>\n<h2 id=\"Koin的实例获取流程（Retrieval）\"><a href=\"#Koin的实例获取流程（Retrieval）\" class=\"headerlink\" title=\"Koin的实例获取流程（Retrieval）\"></a>Koin的实例获取流程（Retrieval）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取无参依赖（普通方式）</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> component = <span class=\"keyword\">get</span>&lt;Component&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 scope 作用域限定进行获取</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> scope = koin.createScope(<span class=\"string\">&quot;scope&quot;</span>, scopeQualifier)</span><br><span class=\"line\"><span class=\"keyword\">val</span> component = scope.<span class=\"keyword\">get</span>&lt;Component&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过需要动态参数的获取</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> componentWithArgs = <span class=\"keyword\">get</span>&lt;ComponentInt&gt; &#123; parametersOf(<span class=\"number\">42</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> componentWithMultiArgs = <span class=\"keyword\">get</span>&lt;ComponentIntFloat&gt; &#123; parametersOf(<span class=\"number\">101</span>, <span class=\"number\">3.14f</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程剖析\"><a href=\"#流程剖析\" class=\"headerlink\" title=\"流程剖析\"></a>流程剖析</h3><p><strong><code>Scope.get&lt;T&gt;</code></strong></p>\n<p>这是 <code>Scope</code> 的一个扩展函数。它首先创建一个 <code>ResolutionContext</code>，封装了当前作用域、要解析的类型、限定符以及最重要的——<strong>参数持有器 <code>ParametersHolder</code></strong>（由 <code>parametersOf</code> 函数创建）。</p>\n<p> <strong>解析上下文（ResolutionContext）</strong></p>\n<p> 这个上下文对象包含了解析一个实例所需的所有信息。</p>\n<p><strong>核心解析器（CoreResolver）</strong><br><code>get</code> 操作会委托给 <code>Koin</code> 的 <code>CoreResolver</code>进行处理。源码里面对于查找顺序有非常清晰的层次体现：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">resolveFromContext</span><span class=\"params\">(scope : <span class=\"type\">Scope</span>, instanceContext: <span class=\"type\">ResolutionContext</span>)</span></span>: T &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolveFromContextOrNull(scope,instanceContext) ?: throwNoDefinitionFound(instanceContext)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">resolveFromContextOrNull</span><span class=\"params\">(scope : <span class=\"type\">Scope</span>, instanceContext: <span class=\"type\">ResolutionContext</span>, lookupParent : <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span>)</span></span>: T? &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolveFromInjectedParameters(instanceContext)</span><br><span class=\"line\">          ?: resolveFromRegistry(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromStackedParameters(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromScopeSource(scope,instanceContext)</span><br><span class=\"line\">          ?: resolveFromScopeArchetype(scope,instanceContext)</span><br><span class=\"line\">          ?: <span class=\"keyword\">if</span> (lookupParent) resolveFromParentScopes(scope,instanceContext) <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">          ?: resolveInExtensions(scope,instanceContext)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>查找工厂</strong></p>\n<ul>\n<li><code>Resolver</code> 会调用 <code>InstanceRegistry.resolveDefinition</code>。</li>\n<li>该方法使用和注册时<strong>相同的算法</strong>生成Key（类名:限定符:作用域），然后从 <code>_instances</code> 中查找对应的 <code>InstanceFactory</code>。</li>\n</ul>\n<p> <strong>创建实例</strong></p>\n<ul>\n<li><p>找到 <code>Factory</code> 后，调用其 <code>get(context: ResolutionContext)</code> 方法。</p>\n</li>\n<li><p><code>Factory</code> 会调用自己的 <code>create</code> 方法。<strong>关键一步来了</strong>：在 <code>create</code> 方法中，会执行 <code>BeanDefinition.definition.invoke(context.scope, parameters)</code>。这其实就是执行了之前注册的 lambda：<code>&#123; (data: Int) -&gt; ComponentInt(data) &#125;</code>。</p>\n</li>\n<li><p><strong>参数传递</strong>：这里的 <code>parameters</code> 就是你在 <code>get</code> 时传入的 <code>ParametersHolder</code>。Lambda 的参数 <code>(data: Int)</code> 会从 <code>ParametersHolder</code> 中按顺序（或使用解构）取出值</p>\n</li>\n</ul>\n<p><strong>返回实例</strong></p>\n<p>工厂将创建好的实例返回给调用者。</p>\n<p>对于 <code>SingleFactory</code>，它会将第一次创建出来的实例缓存起来，后续调用直接返回缓存实例。<code>FactoryFactory</code> 则每次都会执行 <code>create</code> 方法。</p>\n<h2 id=\"其他技术\"><a href=\"#其他技术\" class=\"headerlink\" title=\"其他技术\"></a>其他技术</h2><h3 id=\"DslMarker-的作用\"><a href=\"#DslMarker-的作用\" class=\"headerlink\" title=\"@DslMarker 的作用\"></a>@DslMarker 的作用</h3><p>你的代码开头定义了三个注解：<code>@KoinApplicationDslMarker</code>, <code>@KoinDslMarker</code>, <code>@OptionDslMarker</code>。这是Kotlin DSL的<strong>安全卫士</strong>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KoinDslMarker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@KoinDslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Module</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">single</span><span class=\"params\">(...)</span></span> &#123; ... &#125; <span class=\"comment\">// 这个single在DSL里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@KoinDslMarker</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KoinApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modules</span><span class=\"params\">(...)</span></span> &#123; ... &#125; <span class=\"comment\">// 这个modules在DSL里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    startKoin &#123;</span><br><span class=\"line\">        modules(...) <span class=\"comment\">// 正确：在 KoinApplication 的 lambda 里</span></span><br><span class=\"line\">        single &#123; ... &#125; <span class=\"comment\">// 编译错误！@DslMarker 阻止了你隐式地使用外部 Receiver (Module)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@DslMarker</code> 的作用是防止在嵌套的DSL Lambda中，意外地调用到外层Receiver的方法，从而让DSL书写更加清晰和安全。</p>\n<h3 id=\"2-优雅的参数传递与解构\"><a href=\"#2-优雅的参数传递与解构\" class=\"headerlink\" title=\"2. 优雅的参数传递与解构\"></a>2. 优雅的参数传递与解构</h3><p>这是你实现的一个亮点，完美复刻了Koin的动态参数特性。</p>\n<ul>\n<li><strong><code>ParametersHolder</code></strong>：一个轻量的参数容器，内部用一个 <code>List&lt;Any?&gt;</code> 存储参数。</li>\n<li><strong><code>parametersOf</code></strong>：辅助函数，优雅地创建 <code>ParametersHolder</code>。</li>\n<li><strong>解构声明（Destructuring Declaration）</strong>：<code>ParametersHolder</code> 重写了 <code>component1()</code> 到 <code>component5()</code> 操作符。这使得我们在定义lambda时，可以直接用 <code>(a: A, b: B)</code> 的形式来接收参数，而不是手动调用 <code>parameters.get&lt;X&gt;(0)</code>。</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册端：看起来就像普通函数</span></span><br><span class=\"line\">single &#123; (id: <span class=\"built_in\">Int</span>, name: String) -&gt; User(id, name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取端：传递参数非常直观</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> user = <span class=\"keyword\">get</span>&lt;User&gt; &#123; parametersOf(<span class=\"number\">123</span>, <span class=\"string\">&quot;Julius&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>这种设计极大地提升了API的简洁性和可读性。</p>\n<h2 id=\"手写-koin-代码介绍\"><a href=\"#手写-koin-代码介绍\" class=\"headerlink\" title=\"手写 koin 代码介绍\"></a>手写 koin 代码介绍</h2><p>基于对源码的理解和参考，实现了 koin 的基本功能，整体分成三部分：简单 single 数据存取、包含 scope 能力、动态参数能力，分成三个文件夹，顺序123是基于前面带代码累加的。</p>\n<p><strong>简单 single 数据存取</strong><br>这是一份最简单的代码，大概200行不到，基本上包含了 koin 的核心思想：启动时注册组件定义。解析时，先查作用域缓存，命中则直接返回。未命中则递归解析其依赖项，调用工厂函数创建实例，最后返回实例。</p>\n<p>从这里我们也能看出来 koin 的缺点：Koin 启动时 (startKoin) 需要将所有模块的定义 (BeanDefinition) 注册到容器中。实例数量过多会显著增加启动注册过程的耗时，影响应用启动速度。由于每个实例都会对应一个 BeanDefinition 以及 Factory ，内存占用会相应地上升。</p>\n<p>整个流程简单来讲就是生成一个 map，通过 key 获取对于的数据。</p>\n<p><strong>Scope 能力</strong><br>这一份是在之前的能力上进行添加，此前将所有的数据都注册到 “root” 这个容器内，全局通用，但为了将不同作用域分开，需要引入 scope 的概念。</p>\n<p>简单理解就是在通过 key 获取的 map 里面的数据的时候，这个 key 是有一定的规则的，核心逻辑在这里：<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexKey</span><span class=\"params\">(clazz: <span class=\"type\">KClass</span>&lt;*&gt;, typeQualifier: <span class=\"type\">String</span>?, scopeQualifier: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buildString &#123;</span><br><span class=\"line\">        append(clazz.java.name)</span><br><span class=\"line\">        append(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        append(typeQualifier ?: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        append(<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">        append(scopeQualifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br> 不同的 scope 实际上也就是获取的 key 值的不同。</p>\n<p><strong>动态参数能力</strong><br>最后在 scope 的基础上实现了一个比较重要的能力-动态参数能力，通过这个能力可以让有实例能够在运行的时候根据参数动态创建。这个能力也是像在安卓 Activity&#x2F;Fragment 里面 viewmodel() 实现依赖注入的必要实现。 </p>\n<p>简单理解就是在 get() 的时候将参数传入到获取实例的调用链中，在运行时执行注册的 Lambda 函数invoke时候将作为参数传递到构造方法中去。这里单独拎出来实现是因为这个参数传递影响到整个流程的逻辑，为了上上面的两个能力逻辑更简单清晰，单独在这一部分实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过这个手写的迷你Koin，可以深刻地理解到，一个现代DI容器的核心无非是解决两个问题：</p>\n<ol>\n<li><strong>如何注册（Declaration）</strong>：通过DSL将依赖的创建方式（Lambda）以键值对的形式保存到一个全局的注册表中。</li>\n<li><strong>如何获取（Retrieval）</strong>：根据请求的类型、限定符和作用域生成Key，从注册表中找到对应的创建工厂，并调用它来生成实例。支持通过参数容器实现动态传参。</li>\n</ol>\n<p>除此之外，诸如 <code>@DslMarker</code> 保证DSL安全、<strong>解构</strong>实现参数优雅传递，都是构建一个健壮、易用框架的关键技术。</p>\n<p>虽然这个实现省略了Koin的许多高级功能（如完整的Scope生命周期管理、属性注入、Android特定支持等），但它已经囊括了最核心、最精妙的设计思想，再理解其他的模块也会简单很多。</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"koin","slug":"koin","api":"api/tags/koin.json"}],"api":"api/posts/2025/08/25/Koin-源码理解相关.json"}],"info":{"type":"archive","year":2025,"month":8}},"api":"api/archives/2025/08/page.1.json"}