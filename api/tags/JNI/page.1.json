{"data":{"index":1,"total":1,"posts":[{"title":"（转）JNI内存管理及优化","slug":"JNI内存管理及优化","date":"2021-03-10T12:08:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2021/03/10/JNI内存管理及优化/","excerpt":"<p>最近接触JNI相关的项目遇到一些与内存相关到问题，JNI或者说是C&#x2F;C++开发与平时的Java开发相比，总会给人更多的“惊喜”，因为不熟悉native开发，所以有很多知识都不太清楚，一点一点地记录。<br>在掘金相关搜索到下面这篇，个人感觉还不错。<br>以下内容转载自：</p>\n<p><a href=\"https://juejin.cn/post/6844903743352209422\">https://juejin.cn/post/6844903743352209422</a></p>\n<img width=\"60%\" src=\"https://cdn.julis.wang/blog/img/167c522c1dfb148f.png\">\n<p>上面这张图大家都应该很熟了，下面只讲下和JNI有关的部分</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。 本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p>\n<h4 id=\"堆-Java-Heap\"><a href=\"#堆-Java-Heap\" class=\"headerlink\" title=\"堆(Java-Heap)\"></a>堆(Java-Heap)</h4><p>所有对象都在这里分配内存，是垃圾收集的主要区域（”GC 堆”）。 堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p>\n<p>可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xmx1024m -Xms1024m</span><br><span class=\"line\">//-Xmx1024m：设置JVM最大可用内存为1024M。</span><br><span class=\"line\">//-Xms1024m：设置JVM初始内存为1024m。此值可与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</span><br></pre></td></tr></table></figure>\n\n<p>在Android系统对于每个应用都有内存使用的限制，机器的内存限制，在&#x2F;system&#x2F;build.prop文件中配置的。可以在manifest文件application节点加入 <code>android:largeHeap=&quot;true&quot;</code>来让Dalvik&#x2F;ART虚拟机分配更大的堆内存空间</p>\n<h4 id=\"直接内存（native堆）\"><a href=\"#直接内存（native堆）\" class=\"headerlink\" title=\"直接内存（native堆）\"></a>直接内存（native堆）</h4><p>也称为C-Heap，供Java Runtime进程使用的，没有相应的参数来控制其大小，其大小依赖于操作系统进程的最大值。  Java应用程序都是在Java Runtime Environment（JRE）中运行，而Runtime本身就是由Native语言（如：C&#x2F;C++）编写程序。Native Memory就是操作系统分配给Runtime进程的可用内存，它与Heap Memory不同，Java Heap 是Java应用程序的内存。。Native Memory的主要作用如下：</p>\n<ul>\n<li>管理java heap的状态数据（用于GC）;</li>\n<li>JNI调用，也就是Native Stack；</li>\n<li>JIT（即使编译器）编译时使用Native Memory，并且JIT的输入（Java字节码）和输出（可执行代码）也都是保存在Native Memory；</li>\n<li>NIO direct buffer；</li>\n<li>Threads；</li>\n<li>类加载器和类信息都是保存在Native Memory中的。</li>\n</ul>\n<h3 id=\"JNI内存\"><a href=\"#JNI内存\" class=\"headerlink\" title=\"JNI内存\"></a>JNI内存</h3><p>在Java代码中，Java对象被存放在JVM的Java Heap，由垃圾回收器（Garbage Collector，即GC）自动回收就可以。</p>\n<p> 在Native代码中，内存是从Native Memory中分配的，需要根据Native编程规范去操作内存。如：C&#x2F;C++使用malloc()&#x2F;new分配内存，需要手动使用free()&#x2F;delete回收内存。</p>\n<p> 然而，JNI和上面两者又有些区别。 JNI提供了与Java相对应的引用类型（如：jobject、jstring、jclass、jarray、jintArray等），以便Native代码可以通过JNI函数访问到Java对象。引用所指向的Java对象通常就是存放在Java Heap，而Native代码持有的引用是存放在Native Memory中。</p>\n<p>举个例子，如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring jstr = env-&gt;<span class=\"built_in\">NewStringUTF</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jstring类型是JNI提供的，对应于Java的String类型</li>\n<li>JNI函数<code>NewStringUTF()</code>用于构造一个String对象，该对象存放在Java Heap中，同时返回了一个jstring类型的引用。</li>\n<li>String对象的引用保存在jstr中，jstr是Native的一个局部变量，存放在Native Memory中。</li>\n</ul>\n<p>开发人员都应该遇到过OOM（Out of Memory）异常，在JNI开发中，该异常可能发生在Java Heap中，也可能发生在Native Memory中。</p>\n<ul>\n<li>string类型是JNI提供的，对应于Java的String类型</li>\n<li>JNI函数<code>NewStringUTF()</code>用于构造一个String对象，该对象存放在Java Heap中，同时返回了一个jstring类型的引用。</li>\n<li>String对象的引用保存在jstr中，jstr是Native的一个局部变量，存放在Native Memory中。</li>\n</ul>\n<p>开发人员都应该遇到过OOM（Out of Memory）异常，在JNI开发中，该异常可能发生在Java Heap中，也可能发生在Native Memory中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">java.lang.OutOfMemoryError: native memory exhausted</span><br></pre></td></tr></table></figure>\n\n<p><strong>Java Heap 中出现 Out of Memory异常的原因有两种：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）程序过于庞大，致使过多 Java 对象的同时存在；</span><br><span class=\"line\">2）程序编写的错误导致 Java Heap 内存泄漏。</span><br></pre></td></tr></table></figure>\n\n<p><strong>Native Memory中出现 Out of Memory异常的原因：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）程序申请过多资源，系统未能满足，比如说大量线程资源；</span><br><span class=\"line\">2）程序编写的错误导致Native Memory内存泄漏。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JNI引用\"><a href=\"#JNI引用\" class=\"headerlink\" title=\"JNI引用\"></a>JNI引用</h3><p>JNI引用有三种：<code>Local Reference</code>、<code>Global Reference</code>、<code>Weak Global Reference</code>。下面分别来介绍一下这三种引用内存分配和管理。</p>\n<p><strong>Local Reference</strong></p>\n<p>只在Native Method执行时存在，只在创建它的线程有效，不能跨线程使用。它的生命期是在Native Method的执行期开始创建（从Java代码切换到Native代码环境时，或者在Native Method执行时调用JNI函数时），在Native Method执行完毕切换回Java代码时，所有Local Reference被删除（GC会回收其内存），生命期结束（调用<code>DeleteLocalRef()</code>可以提前回收内存，结束其生命期）。</p>\n<p> 实际上，每当线程从Java环境切换到Native代码环境时，JVM 会分配一块内存用于创建一个<code>Local Reference Table</code>，这个Table用来存放本次Native Method 执行中创建的所有<code>Local Reference</code>。每当在 Native代码中引用到一个Java对象时，JVM 就会在这个Table中创建一个<code>Local Reference</code>。比如，我们调用 NewStringUTF() 在 Java Heap 中创建一个 String 对象后，在 <code>Local Reference Table</code> 中就会相应新增一个 <code>Local Reference</code>。</p>\n<p>Local Reference 表、Local Reference 和 Java 对象的关系</p>\n<img src=\"https://cdn.julis.wang/blog/img/167c56e72c22fbe7.png\">\n<p>接下来举个简单例子说明一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring jstr = env-&gt;NewStringUTF(&quot;Hello World!&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jstr存放在Native Method Stack中，是一个局部变量</li>\n<li>对于开发者来说，Local Reference Table是不可见的</li>\n<li><code>Local Reference Table</code>的内存不大，所能存放<code>的Local Reference</code>数量也是有限的（在Android中默认最大容量是512个），使用不当就会引起溢出异常</li>\n<li><code>Local Reference</code>并不是Native里面的局部变量，局部变量存放在堆栈中，其引用存放在<code>Local Reference Table</code>中。</li>\n</ul>\n<p>在Native Method结束时，JVM会自动释放Local Reference，但<code>Local Reference Table</code>是有大小限制的，在开发中应该及时使用DeleteLocalRef()删除不必要的Local Reference，不然可能会出现溢出错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">JNI ERROR (app bug): local reference table overflow (max=512)</span><br></pre></td></tr></table></figure>\n\n<p>在C&#x2F;C++中实例化的JNI对象，如果不返回java，必须用release掉或delete，否则内存泄露。包括NewStringUTF，NewObject。对于一般的基本数据类型（如：jint，jdouble等），是没必要调用该函数删除掉的。如果返回java不必delete，java会自己回收。</p>\n<p><strong>Global Reference</strong></p>\n<p>Local Reference是在Native Method执行的时候出现的，而<code>Global Reference</code>是通过JNI函数<code>NewGlobalRef()</code>和<code>DeleteGlobalRef()</code>来创建和删除的。 <code>Global Reference</code>具有全局性，可以在多个Native Method调用过程和多线程中使用，在主动调用DeleteGlobalRef之前，它是一直有效的（GC不会回收其内存）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建obj参数所引用对象的新全局引用。obj参数既可以是全局引用，也可以是局部引用。全局引用通过调用DeleteGlobalRef()来显式撤消。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param obj 全局或局部引用。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 返回全局引用。如果系统内存不足则返回 NULL。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">jobject <span class=\"title function_\">NewGlobalRef</span><span class=\"params\">(jobject obj)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除globalRef所指向的全局引用</span></span><br><span class=\"line\"><span class=\"comment\"> * @param globalRef 全局引用</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DeleteGlobalRef</span><span class=\"params\">(jobject globalRef)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Global reference</code>时，当 native code 不再需要访问<code>Global reference</code> 时，应当调用 JNI 函数 <code>DeleteGlobalRef()</code> 删除 <code>Global reference</code>和它引用的 Java 对象。否则<code>Global Reference</code>引用的 Java 对象将永远停留在 Java Heap 中，从而导致 Java Heap 的内存泄漏。</p>\n<p><strong>Weak Global Reference</strong></p>\n<p>用<code>NewWeakGlobalRef()</code>和<code>DeleteWeakGlobalRef()</code>进行创建和删除，它与<code>Global Reference</code>的区别在于该类型的引用随时都可能被GC回收。</p>\n<p>对<code>于Weak Global Reference</code>而言，可以通过<code>isSameObject()</code>将其与NULL比较，看看是否已经被回收了。如果返回JNI_TRUE，则表示已经被回收了，需要重新初始化弱全局引用。<code>Weak Global Reference</code>的回收时机是不确定的，有可能在前一行代码判断它是可用的，后一行代码就被GC回收掉了。为了避免这事事情发生，JNI官方给出了正确的做法，通过NewLocalRef()获取<code>Weak Global Reference</code>，避免被GC回收。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><h4 id=\"Local-Reference-不是-native-code-的局部变量\"><a href=\"#Local-Reference-不是-native-code-的局部变量\" class=\"headerlink\" title=\"Local Reference 不是 native code 的局部变量\"></a>Local Reference 不是 native code 的局部变量</h4><p>很多人会误将 JNI 中的 Local Reference 理解为 Native Code 的局部变量。这是错误的。</p>\n<p>Native Code 的局部变量和 Local Reference 是完全不同的，区别可以总结为：</p>\n<p>⑴局部变量存储在线程堆栈中，而 Local Reference 存储在 Local Ref 表中。</p>\n<p>⑵局部变量在函数退栈后被删除，而 Local Reference 在调用 DeleteLocalRef() 后才会从 Local Ref 表中删除，并且失效，或者在整个 Native Method 执行结束后被删除。</p>\n<p>⑶可以在代码中直接访问局部变量，而 Local Reference 的内容无法在代码中直接访问，必须通过 JNI function 间接访问。JNI function 实现了对 Local Reference 的间接访问，JNI function 的内部实现依赖于具体 JVM。</p>\n<h4 id=\"注意释放所有对jobject的引用：\"><a href=\"#注意释放所有对jobject的引用：\" class=\"headerlink\" title=\"注意释放所有对jobject的引用：\"></a>注意释放所有对jobject的引用：</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_com_test_application_MainActivity_init</span><span class=\"params\">(JNIEnv *env, jobject instance, jstring data,</span></span><br><span class=\"line\"><span class=\"params\">                                      jbyteArray <span class=\"built_in\">array</span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len = env-&gt;GetArrayLength(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *utfChars = env-&gt;GetStringUTFChars(data, <span class=\"number\">0</span>);</span><br><span class=\"line\">    jbyte *arrayElements = env-&gt;GetByteArrayElements(<span class=\"built_in\">array</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    jstring pJstring = env-&gt;NewStringUTF(utfChars); </span><br><span class=\"line\"></span><br><span class=\"line\">    jbyteArray jpicArray = env-&gt;NewByteArray(len);</span><br><span class=\"line\">    env-&gt;SetByteArrayRegion(jpicArray, <span class=\"number\">0</span>, len, arrayElements);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    env-&gt;DeleteLocalRef(pJstring);</span><br><span class=\"line\">    env-&gt;DeleteLocalRef(jpicArray);</span><br><span class=\"line\"></span><br><span class=\"line\">    env-&gt;ReleaseStringUTFChars(data, utfChars);</span><br><span class=\"line\">    env-&gt;ReleaseByteArrayElements(<span class=\"built_in\">array</span>, arrayElements, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring result = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其它的还有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jclass ref= (env)-&gt;FindClass(&quot;java/lang/String&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">env-&gt;DeleteLocalRef(ref);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>因为根据<code>jni.h</code>里的定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> jobject         jclass;</span><br></pre></td></tr></table></figure>\n\n<p>jclass也是jobject。而<code>jmethodID</code>&#x2F;<code>jfielID</code>和jobject没有继承关系，它们不是object,只是个整数，不存在被释放与否的问题。</p>\n<h4 id=\"局部引用和全局引用的转换\"><a href=\"#局部引用和全局引用的转换\" class=\"headerlink\" title=\"局部引用和全局引用的转换\"></a>局部引用和全局引用的转换</h4><p>注意Local Reference的生命周期，如果在Native中需要长时间持有一个Java对象，就不能使用将jobject存储在Native，否则在下次使用的时候，即使同一个线程调用，也将会无法使用。下面是错误的做法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring global;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_org_hik_libyuv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        JNIEnv *env,</span></span><br><span class=\"line\"><span class=\"params\">        jobject <span class=\"comment\">/* this */</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring local = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    global = local;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是使用Global Reference，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring global;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_org_hik_libyuv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        JNIEnv *env,</span></span><br><span class=\"line\"><span class=\"params\">        jobject <span class=\"comment\">/* this */</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring local = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    global = static_cast&lt;jstring&gt;(env-&gt;NewGlobalRef(global));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><p>JNIEnv和jobject对象都不能跨线程使用。 对于jobject，解决办法是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">a、m_obj = env-&gt;NewGlobalRef(obj);<span class=\"comment\">//创建一个全局变量  </span></span><br><span class=\"line\"></span><br><span class=\"line\">b、jobject obj = env-&gt;AllocObject(m_cls);<span class=\"comment\">//在每个线程中都生成一个对象</span></span><br></pre></td></tr></table></figure>\n\n<p>对于JNIEnv，解决办法是在每个线程中都重新生成一个env</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">JavaVM *gJavaVM;<span class=\"comment\">//声明全局变量</span></span><br><span class=\"line\">(*env)-&gt;GetJavaVM(env, &amp;gJavaVM);<span class=\"comment\">//在JNI方法的中赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEnv *env;<span class=\"comment\">//在其它线程中获取当前线程的env  </span></span><br><span class=\"line\">m_jvm-&gt;AttachCurrentThread((<span class=\"type\">void</span> **)&amp;env, <span class=\"literal\">NULL</span>);  </span><br></pre></td></tr></table></figure>\n\n<p>当在一个线程里面调用AttachCurrentThr</p>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/167c522c1dfb148f.png","https://cdn.julis.wang/blog/img/167c56e72c22fbe7.png"],"content":"<p>最近接触JNI相关的项目遇到一些与内存相关到问题，JNI或者说是C&#x2F;C++开发与平时的Java开发相比，总会给人更多的“惊喜”，因为不熟悉native开发，所以有很多知识都不太清楚，一点一点地记录。<br>在掘金相关搜索到下面这篇，个人感觉还不错。<br>以下内容转载自：</p>\n<p><a href=\"https://juejin.cn/post/6844903743352209422\">https://juejin.cn/post/6844903743352209422</a></p>\n<img width=\"60%\" src=\"https://cdn.julis.wang/blog/img/167c522c1dfb148f.png\">\n<p>上面这张图大家都应该很熟了，下面只讲下和JNI有关的部分</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。 本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p>\n<h4 id=\"堆-Java-Heap\"><a href=\"#堆-Java-Heap\" class=\"headerlink\" title=\"堆(Java-Heap)\"></a>堆(Java-Heap)</h4><p>所有对象都在这里分配内存，是垃圾收集的主要区域（”GC 堆”）。 堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p>\n<p>可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xmx1024m -Xms1024m</span><br><span class=\"line\">//-Xmx1024m：设置JVM最大可用内存为1024M。</span><br><span class=\"line\">//-Xms1024m：设置JVM初始内存为1024m。此值可与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</span><br></pre></td></tr></table></figure>\n\n<p>在Android系统对于每个应用都有内存使用的限制，机器的内存限制，在&#x2F;system&#x2F;build.prop文件中配置的。可以在manifest文件application节点加入 <code>android:largeHeap=&quot;true&quot;</code>来让Dalvik&#x2F;ART虚拟机分配更大的堆内存空间</p>\n<h4 id=\"直接内存（native堆）\"><a href=\"#直接内存（native堆）\" class=\"headerlink\" title=\"直接内存（native堆）\"></a>直接内存（native堆）</h4><p>也称为C-Heap，供Java Runtime进程使用的，没有相应的参数来控制其大小，其大小依赖于操作系统进程的最大值。  Java应用程序都是在Java Runtime Environment（JRE）中运行，而Runtime本身就是由Native语言（如：C&#x2F;C++）编写程序。Native Memory就是操作系统分配给Runtime进程的可用内存，它与Heap Memory不同，Java Heap 是Java应用程序的内存。。Native Memory的主要作用如下：</p>\n<ul>\n<li>管理java heap的状态数据（用于GC）;</li>\n<li>JNI调用，也就是Native Stack；</li>\n<li>JIT（即使编译器）编译时使用Native Memory，并且JIT的输入（Java字节码）和输出（可执行代码）也都是保存在Native Memory；</li>\n<li>NIO direct buffer；</li>\n<li>Threads；</li>\n<li>类加载器和类信息都是保存在Native Memory中的。</li>\n</ul>\n<h3 id=\"JNI内存\"><a href=\"#JNI内存\" class=\"headerlink\" title=\"JNI内存\"></a>JNI内存</h3><p>在Java代码中，Java对象被存放在JVM的Java Heap，由垃圾回收器（Garbage Collector，即GC）自动回收就可以。</p>\n<p> 在Native代码中，内存是从Native Memory中分配的，需要根据Native编程规范去操作内存。如：C&#x2F;C++使用malloc()&#x2F;new分配内存，需要手动使用free()&#x2F;delete回收内存。</p>\n<p> 然而，JNI和上面两者又有些区别。 JNI提供了与Java相对应的引用类型（如：jobject、jstring、jclass、jarray、jintArray等），以便Native代码可以通过JNI函数访问到Java对象。引用所指向的Java对象通常就是存放在Java Heap，而Native代码持有的引用是存放在Native Memory中。</p>\n<p>举个例子，如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring jstr = env-&gt;<span class=\"built_in\">NewStringUTF</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jstring类型是JNI提供的，对应于Java的String类型</li>\n<li>JNI函数<code>NewStringUTF()</code>用于构造一个String对象，该对象存放在Java Heap中，同时返回了一个jstring类型的引用。</li>\n<li>String对象的引用保存在jstr中，jstr是Native的一个局部变量，存放在Native Memory中。</li>\n</ul>\n<p>开发人员都应该遇到过OOM（Out of Memory）异常，在JNI开发中，该异常可能发生在Java Heap中，也可能发生在Native Memory中。</p>\n<ul>\n<li>string类型是JNI提供的，对应于Java的String类型</li>\n<li>JNI函数<code>NewStringUTF()</code>用于构造一个String对象，该对象存放在Java Heap中，同时返回了一个jstring类型的引用。</li>\n<li>String对象的引用保存在jstr中，jstr是Native的一个局部变量，存放在Native Memory中。</li>\n</ul>\n<p>开发人员都应该遇到过OOM（Out of Memory）异常，在JNI开发中，该异常可能发生在Java Heap中，也可能发生在Native Memory中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">java.lang.OutOfMemoryError: native memory exhausted</span><br></pre></td></tr></table></figure>\n\n<p><strong>Java Heap 中出现 Out of Memory异常的原因有两种：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）程序过于庞大，致使过多 Java 对象的同时存在；</span><br><span class=\"line\">2）程序编写的错误导致 Java Heap 内存泄漏。</span><br></pre></td></tr></table></figure>\n\n<p><strong>Native Memory中出现 Out of Memory异常的原因：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）程序申请过多资源，系统未能满足，比如说大量线程资源；</span><br><span class=\"line\">2）程序编写的错误导致Native Memory内存泄漏。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JNI引用\"><a href=\"#JNI引用\" class=\"headerlink\" title=\"JNI引用\"></a>JNI引用</h3><p>JNI引用有三种：<code>Local Reference</code>、<code>Global Reference</code>、<code>Weak Global Reference</code>。下面分别来介绍一下这三种引用内存分配和管理。</p>\n<p><strong>Local Reference</strong></p>\n<p>只在Native Method执行时存在，只在创建它的线程有效，不能跨线程使用。它的生命期是在Native Method的执行期开始创建（从Java代码切换到Native代码环境时，或者在Native Method执行时调用JNI函数时），在Native Method执行完毕切换回Java代码时，所有Local Reference被删除（GC会回收其内存），生命期结束（调用<code>DeleteLocalRef()</code>可以提前回收内存，结束其生命期）。</p>\n<p> 实际上，每当线程从Java环境切换到Native代码环境时，JVM 会分配一块内存用于创建一个<code>Local Reference Table</code>，这个Table用来存放本次Native Method 执行中创建的所有<code>Local Reference</code>。每当在 Native代码中引用到一个Java对象时，JVM 就会在这个Table中创建一个<code>Local Reference</code>。比如，我们调用 NewStringUTF() 在 Java Heap 中创建一个 String 对象后，在 <code>Local Reference Table</code> 中就会相应新增一个 <code>Local Reference</code>。</p>\n<p>Local Reference 表、Local Reference 和 Java 对象的关系</p>\n<img src=\"https://cdn.julis.wang/blog/img/167c56e72c22fbe7.png\">\n<p>接下来举个简单例子说明一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring jstr = env-&gt;NewStringUTF(&quot;Hello World!&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>jstr存放在Native Method Stack中，是一个局部变量</li>\n<li>对于开发者来说，Local Reference Table是不可见的</li>\n<li><code>Local Reference Table</code>的内存不大，所能存放<code>的Local Reference</code>数量也是有限的（在Android中默认最大容量是512个），使用不当就会引起溢出异常</li>\n<li><code>Local Reference</code>并不是Native里面的局部变量，局部变量存放在堆栈中，其引用存放在<code>Local Reference Table</code>中。</li>\n</ul>\n<p>在Native Method结束时，JVM会自动释放Local Reference，但<code>Local Reference Table</code>是有大小限制的，在开发中应该及时使用DeleteLocalRef()删除不必要的Local Reference，不然可能会出现溢出错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">JNI ERROR (app bug): local reference table overflow (max=512)</span><br></pre></td></tr></table></figure>\n\n<p>在C&#x2F;C++中实例化的JNI对象，如果不返回java，必须用release掉或delete，否则内存泄露。包括NewStringUTF，NewObject。对于一般的基本数据类型（如：jint，jdouble等），是没必要调用该函数删除掉的。如果返回java不必delete，java会自己回收。</p>\n<p><strong>Global Reference</strong></p>\n<p>Local Reference是在Native Method执行的时候出现的，而<code>Global Reference</code>是通过JNI函数<code>NewGlobalRef()</code>和<code>DeleteGlobalRef()</code>来创建和删除的。 <code>Global Reference</code>具有全局性，可以在多个Native Method调用过程和多线程中使用，在主动调用DeleteGlobalRef之前，它是一直有效的（GC不会回收其内存）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建obj参数所引用对象的新全局引用。obj参数既可以是全局引用，也可以是局部引用。全局引用通过调用DeleteGlobalRef()来显式撤消。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param obj 全局或局部引用。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 返回全局引用。如果系统内存不足则返回 NULL。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">jobject <span class=\"title function_\">NewGlobalRef</span><span class=\"params\">(jobject obj)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除globalRef所指向的全局引用</span></span><br><span class=\"line\"><span class=\"comment\"> * @param globalRef 全局引用</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DeleteGlobalRef</span><span class=\"params\">(jobject globalRef)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Global reference</code>时，当 native code 不再需要访问<code>Global reference</code> 时，应当调用 JNI 函数 <code>DeleteGlobalRef()</code> 删除 <code>Global reference</code>和它引用的 Java 对象。否则<code>Global Reference</code>引用的 Java 对象将永远停留在 Java Heap 中，从而导致 Java Heap 的内存泄漏。</p>\n<p><strong>Weak Global Reference</strong></p>\n<p>用<code>NewWeakGlobalRef()</code>和<code>DeleteWeakGlobalRef()</code>进行创建和删除，它与<code>Global Reference</code>的区别在于该类型的引用随时都可能被GC回收。</p>\n<p>对<code>于Weak Global Reference</code>而言，可以通过<code>isSameObject()</code>将其与NULL比较，看看是否已经被回收了。如果返回JNI_TRUE，则表示已经被回收了，需要重新初始化弱全局引用。<code>Weak Global Reference</code>的回收时机是不确定的，有可能在前一行代码判断它是可用的，后一行代码就被GC回收掉了。为了避免这事事情发生，JNI官方给出了正确的做法，通过NewLocalRef()获取<code>Weak Global Reference</code>，避免被GC回收。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><h4 id=\"Local-Reference-不是-native-code-的局部变量\"><a href=\"#Local-Reference-不是-native-code-的局部变量\" class=\"headerlink\" title=\"Local Reference 不是 native code 的局部变量\"></a>Local Reference 不是 native code 的局部变量</h4><p>很多人会误将 JNI 中的 Local Reference 理解为 Native Code 的局部变量。这是错误的。</p>\n<p>Native Code 的局部变量和 Local Reference 是完全不同的，区别可以总结为：</p>\n<p>⑴局部变量存储在线程堆栈中，而 Local Reference 存储在 Local Ref 表中。</p>\n<p>⑵局部变量在函数退栈后被删除，而 Local Reference 在调用 DeleteLocalRef() 后才会从 Local Ref 表中删除，并且失效，或者在整个 Native Method 执行结束后被删除。</p>\n<p>⑶可以在代码中直接访问局部变量，而 Local Reference 的内容无法在代码中直接访问，必须通过 JNI function 间接访问。JNI function 实现了对 Local Reference 的间接访问，JNI function 的内部实现依赖于具体 JVM。</p>\n<h4 id=\"注意释放所有对jobject的引用：\"><a href=\"#注意释放所有对jobject的引用：\" class=\"headerlink\" title=\"注意释放所有对jobject的引用：\"></a>注意释放所有对jobject的引用：</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_com_test_application_MainActivity_init</span><span class=\"params\">(JNIEnv *env, jobject instance, jstring data,</span></span><br><span class=\"line\"><span class=\"params\">                                      jbyteArray <span class=\"built_in\">array</span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len = env-&gt;GetArrayLength(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *utfChars = env-&gt;GetStringUTFChars(data, <span class=\"number\">0</span>);</span><br><span class=\"line\">    jbyte *arrayElements = env-&gt;GetByteArrayElements(<span class=\"built_in\">array</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    jstring pJstring = env-&gt;NewStringUTF(utfChars); </span><br><span class=\"line\"></span><br><span class=\"line\">    jbyteArray jpicArray = env-&gt;NewByteArray(len);</span><br><span class=\"line\">    env-&gt;SetByteArrayRegion(jpicArray, <span class=\"number\">0</span>, len, arrayElements);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    env-&gt;DeleteLocalRef(pJstring);</span><br><span class=\"line\">    env-&gt;DeleteLocalRef(jpicArray);</span><br><span class=\"line\"></span><br><span class=\"line\">    env-&gt;ReleaseStringUTFChars(data, utfChars);</span><br><span class=\"line\">    env-&gt;ReleaseByteArrayElements(<span class=\"built_in\">array</span>, arrayElements, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring result = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其它的还有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jclass ref= (env)-&gt;FindClass(&quot;java/lang/String&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">env-&gt;DeleteLocalRef(ref);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>因为根据<code>jni.h</code>里的定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> jobject         jclass;</span><br></pre></td></tr></table></figure>\n\n<p>jclass也是jobject。而<code>jmethodID</code>&#x2F;<code>jfielID</code>和jobject没有继承关系，它们不是object,只是个整数，不存在被释放与否的问题。</p>\n<h4 id=\"局部引用和全局引用的转换\"><a href=\"#局部引用和全局引用的转换\" class=\"headerlink\" title=\"局部引用和全局引用的转换\"></a>局部引用和全局引用的转换</h4><p>注意Local Reference的生命周期，如果在Native中需要长时间持有一个Java对象，就不能使用将jobject存储在Native，否则在下次使用的时候，即使同一个线程调用，也将会无法使用。下面是错误的做法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring global;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_org_hik_libyuv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        JNIEnv *env,</span></span><br><span class=\"line\"><span class=\"params\">        jobject <span class=\"comment\">/* this */</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring local = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    global = local;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是使用Global Reference，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">jstring global;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class=\"line\"><span class=\"title function_\">Java_org_hik_libyuv_MainActivity_stringFromJNI</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        JNIEnv *env,</span></span><br><span class=\"line\"><span class=\"params\">        jobject <span class=\"comment\">/* this */</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> hello = <span class=\"string\">&quot;Hello from C++&quot;</span>;</span><br><span class=\"line\">    jstring local = env-&gt;NewStringUTF(hello.c_str());</span><br><span class=\"line\">    global = static_cast&lt;jstring&gt;(env-&gt;NewGlobalRef(global));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><p>JNIEnv和jobject对象都不能跨线程使用。 对于jobject，解决办法是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">a、m_obj = env-&gt;NewGlobalRef(obj);<span class=\"comment\">//创建一个全局变量  </span></span><br><span class=\"line\"></span><br><span class=\"line\">b、jobject obj = env-&gt;AllocObject(m_cls);<span class=\"comment\">//在每个线程中都生成一个对象</span></span><br></pre></td></tr></table></figure>\n\n<p>对于JNIEnv，解决办法是在每个线程中都重新生成一个env</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">JavaVM *gJavaVM;<span class=\"comment\">//声明全局变量</span></span><br><span class=\"line\">(*env)-&gt;GetJavaVM(env, &amp;gJavaVM);<span class=\"comment\">//在JNI方法的中赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEnv *env;<span class=\"comment\">//在其它线程中获取当前线程的env  </span></span><br><span class=\"line\">m_jvm-&gt;AttachCurrentThread((<span class=\"type\">void</span> **)&amp;env, <span class=\"literal\">NULL</span>);  </span><br></pre></td></tr></table></figure>\n\n<p>当在一个线程里面调用AttachCurrentThr</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Android","slug":"Android","api":"api/tags/Android.json"},{"name":"JNI","slug":"JNI","api":"api/tags/JNI.json"}],"api":"api/posts/2021/03/10/JNI内存管理及优化.json"}],"info":{"type":"tag","name":"JNI","slug":"JNI"}},"api":"api/tags/JNI/page.1.json"}