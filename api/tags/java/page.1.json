{"data":{"index":1,"total":1,"posts":[{"title":"WeakHashMap与Java引用相关","slug":"WeakHashMap与Java引用相关","date":"2020-06-22T03:19:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2020/06/22/WeakHashMap与Java引用相关/","excerpt":"<p>记得在很久之前有写过一篇<a href=\"https://blog.csdn.net/u010107153/article/details/102821282\">《Java中的Reference解析》</a>，主要讲的是Java中的四种引用方式与引用队列，不过这些都是基础的理论知识，最近开发项目中有使用到WeakHashMap，对于Java的引用以及引用队列有了更深的了解，在此做个相关总结。</p>\n<h2 id=\"一、WeakHashMap的实现方式\"><a href=\"#一、WeakHashMap的实现方式\" class=\"headerlink\" title=\"一、WeakHashMap的实现方式\"></a>一、WeakHashMap的实现方式</h2><p>总体来说，WeakHashMap的底层数据结构与HashMap的实现差不多，都是用“拉链法”来实现，主要区别在于WeakHashMap的Entry 继承于WeakReference，并维护一个ReferenceQueue，使其具有了“弱引用的特性”，其构造方法可以看出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entry(Object key, V value,ReferenceQueue&lt;Object&gt; queue,<span class=\"type\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(key, queue); <span class=\"comment\">//这里比较关键</span></span><br><span class=\"line\">            ……</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>其中的super父类的代码实现为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"built_in\">super</span> T&gt; q)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过对父类的构造方法可以知道，WeakMap的key值为弱引用类型，回顾一下弱引用的特点：<strong>垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</strong> 于是WeakHashMap的作用就凸显出来了：**对于数据中Key-value，key因为使用的弱引用会被回收，而value也会得到对应的释放。**以我这次的需求为例：key为Webview页面或者Flutter&#x2F;RN页面，value为调用native方法相关存储的对象。当页面需要关闭调webivew的时候，Webview应该要被释放，要不然会产生内存泄漏，当其被释放之后，对应的value也没有意义了，所以也需要被释放掉。</p>\n<p> 那么WeakHashMap是如何让value释放的呢？</p>\n<h2 id=\"二、WeakHashMap如何释放无用的Value\"><a href=\"#二、WeakHashMap如何释放无用的Value\" class=\"headerlink\" title=\"二、WeakHashMap如何释放无用的Value\"></a>二、WeakHashMap如何释放无用的Value</h2><p>要回收无用的Value，那么引用队列（ReferenceQueue）就派上用场了，回顾一下引用队列的作用：<strong>当一个引用（软引用、弱引用）关联到了一个引用队列后，当这个引用所引用的对象要被垃圾回收时，就会将它加入到所关联的引用队列中。</strong><br>所以判断一个引用对象是否已经被回收的一个现象就是，这个对象的引用是否被加入到了它所关联的引用队列。<br>那么对于WeakHashMap也是利用这一点特性，在其代码中put\\get等方法都有执行对应等检查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Object</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> maskNull(key);</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> hash(k);</span><br><span class=\"line\">       Entry&lt;K,V&gt;[] tab = getTable(); <span class=\"comment\">//具体实现在getTable执行的expungeStaleEntries里面</span></span><br><span class=\"line\">       ……</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">get</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> maskNull(key);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Expunges stale entries from the table.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">expungeStaleEntries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"literal\">null</span>; ) &#123; <span class=\"comment\">//这里的queue就是引用队列</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123; </span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> indexFor(e.hash, table.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                        table[i] = next;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next;</span><br><span class=\"line\">                    <span class=\"comment\">// Must not null out e.next;</span></span><br><span class=\"line\">                    <span class=\"comment\">// stale entries may be in use by a HashIterator</span></span><br><span class=\"line\">                    e.value = <span class=\"literal\">null</span>; <span class=\"comment\">// Help GC</span></span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码逻辑可以很清楚的知道：WeakHashMap通过对引用队列的数据进行检查，对key被回收对象的对应Value进行了回收。</p>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>1、WeakHashMap的Entry 继承于WeakReference，并维护一个ReferenceQueue<br>2、在执行get\\put等相关数据操作的时候 会对数据进行相关处理，主要是清除掉无用对象对</p>\n","cover":null,"images":[],"content":"<p>记得在很久之前有写过一篇<a href=\"https://blog.csdn.net/u010107153/article/details/102821282\">《Java中的Reference解析》</a>，主要讲的是Java中的四种引用方式与引用队列，不过这些都是基础的理论知识，最近开发项目中有使用到WeakHashMap，对于Java的引用以及引用队列有了更深的了解，在此做个相关总结。</p>\n<h2 id=\"一、WeakHashMap的实现方式\"><a href=\"#一、WeakHashMap的实现方式\" class=\"headerlink\" title=\"一、WeakHashMap的实现方式\"></a>一、WeakHashMap的实现方式</h2><p>总体来说，WeakHashMap的底层数据结构与HashMap的实现差不多，都是用“拉链法”来实现，主要区别在于WeakHashMap的Entry 继承于WeakReference，并维护一个ReferenceQueue，使其具有了“弱引用的特性”，其构造方法可以看出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entry(Object key, V value,ReferenceQueue&lt;Object&gt; queue,<span class=\"type\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>(key, queue); <span class=\"comment\">//这里比较关键</span></span><br><span class=\"line\">            ……</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>其中的super父类的代码实现为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"built_in\">super</span> T&gt; q)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过对父类的构造方法可以知道，WeakMap的key值为弱引用类型，回顾一下弱引用的特点：<strong>垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</strong> 于是WeakHashMap的作用就凸显出来了：**对于数据中Key-value，key因为使用的弱引用会被回收，而value也会得到对应的释放。**以我这次的需求为例：key为Webview页面或者Flutter&#x2F;RN页面，value为调用native方法相关存储的对象。当页面需要关闭调webivew的时候，Webview应该要被释放，要不然会产生内存泄漏，当其被释放之后，对应的value也没有意义了，所以也需要被释放掉。</p>\n<p> 那么WeakHashMap是如何让value释放的呢？</p>\n<h2 id=\"二、WeakHashMap如何释放无用的Value\"><a href=\"#二、WeakHashMap如何释放无用的Value\" class=\"headerlink\" title=\"二、WeakHashMap如何释放无用的Value\"></a>二、WeakHashMap如何释放无用的Value</h2><p>要回收无用的Value，那么引用队列（ReferenceQueue）就派上用场了，回顾一下引用队列的作用：<strong>当一个引用（软引用、弱引用）关联到了一个引用队列后，当这个引用所引用的对象要被垃圾回收时，就会将它加入到所关联的引用队列中。</strong><br>所以判断一个引用对象是否已经被回收的一个现象就是，这个对象的引用是否被加入到了它所关联的引用队列。<br>那么对于WeakHashMap也是利用这一点特性，在其代码中put\\get等方法都有执行对应等检查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Object</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> maskNull(key);</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> hash(k);</span><br><span class=\"line\">       Entry&lt;K,V&gt;[] tab = getTable(); <span class=\"comment\">//具体实现在getTable执行的expungeStaleEntries里面</span></span><br><span class=\"line\">       ……</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">get</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> maskNull(key);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> hash(k);</span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Expunges stale entries from the table.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">expungeStaleEntries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"literal\">null</span>; ) &#123; <span class=\"comment\">//这里的queue就是引用队列</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123; </span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> indexFor(e.hash, table.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                        table[i] = next;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next;</span><br><span class=\"line\">                    <span class=\"comment\">// Must not null out e.next;</span></span><br><span class=\"line\">                    <span class=\"comment\">// stale entries may be in use by a HashIterator</span></span><br><span class=\"line\">                    e.value = <span class=\"literal\">null</span>; <span class=\"comment\">// Help GC</span></span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码逻辑可以很清楚的知道：WeakHashMap通过对引用队列的数据进行检查，对key被回收对象的对应Value进行了回收。</p>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>1、WeakHashMap的Entry 继承于WeakReference，并维护一个ReferenceQueue<br>2、在执行get\\put等相关数据操作的时候 会对数据进行相关处理，主要是清除掉无用对象对</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2020/06/22/WeakHashMap与Java引用相关.json"},{"title":"Java中的Reference解析","slug":"Java四种引用","date":"2019-10-30T11:45:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/10/30/Java四种引用/","excerpt":"<p>Java执行GC判断对象是否存活有两种方式其中一种是<strong>引用计数</strong>。</p>\n<p><strong>引用计数</strong>：Java堆中每一个对象都有一个引用计数属性，引用每新增1次计数加1，引用每释放1次计数减1。</p>\n<p>在JDK 1.2以前的版本中，若一个对象不被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有对象处于(reachable)可达状态，程序才能使用它。</p>\n<p>从JDK 1.2版本开始，对象的引用被划分为4种级别，从而使程序能更加灵活地控制对象的生命周期。这4种级别由高到低依次为：<code>强引用、软引用、弱引用和虚引用</code>，本文主要讲解各个引用的用途以及引用队列的作用。</p>\n<h2 id=\"1、强引用（StrongReference）\"><a href=\"#1、强引用（StrongReference）\" class=\"headerlink\" title=\"1、强引用（StrongReference）\"></a>1、强引用（StrongReference）</h2><p>强引用指的是程序代码中普遍存在的，类似如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p><em><strong>当内存空间不足时，只要强引用还在，Java虚拟机会抛出OutOfMemoryError错误，使程序异常终止，也不会靠回收强引用的对象来解决内存不足的问题。</strong></em></p>\n<p>如果强引用对象不使用时，需要弱化从而使GC能够回收，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">object = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、软引用（SoftReference）\"><a href=\"#2、软引用（SoftReference）\" class=\"headerlink\" title=\"2、软引用（SoftReference）\"></a>2、软引用（SoftReference）</h2><p><em><strong>软引用是用来描述一些有用但并不是必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回首范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</strong></em></p>\n<p>这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等，软引用可用来实现内存敏感的高速缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strongReference</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 软引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softReference = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;String&gt;(str);</span><br></pre></td></tr></table></figure>\n\n<p>软引用可以和一个引用队列(ReferenceQueue)联合使用。如果软引用所引用对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReferenceQueue&lt;String&gt; referenceQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softReference = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;&gt;(str, referenceQueue);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// Notify GC</span></span><br><span class=\"line\">System.gc();</span><br><span class=\"line\">System.out.println(softReference.get()); <span class=\"comment\">// abc</span></span><br><span class=\"line\">Reference&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">String</span>&gt; reference = referenceQueue.poll();</span><br><span class=\"line\">System.out.println(reference); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：软引用对象是在jvm内存不够的时候才会被回收，我们调用System.gc()方法只是起通知作用，JVM什么时候扫描回收对象是JVM自己的状态决定的。就算扫描到软引用对象也不一定会回收它，只有内存不够的时候才会回收。</p>\n<p>当内存不足时，JVM首先将软引用中的对象引用置为<code>null</code>，然后通知垃圾回收器进行回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(JVM内存不足) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 将软引用中的对象引用置为null</span></span><br><span class=\"line\">     str = <span class=\"literal\">null</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 通知垃圾回收器进行回收</span></span><br><span class=\"line\">     System.gc();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，垃圾收集线程会在虚拟机抛出<code>OutOfMemoryError</code>之前回收软引用对象，而且虚拟机会尽可能优先回收长时间闲置不用的软引用对象。对那些刚构建的或刚使用过的较新的软对象会被虚拟机尽可能保留，这就是引入引用队列ReferenceQueue的原因，后面会具体讲解。</p>\n<h2 id=\"3、弱引用（WeakReference）\"><a href=\"#3、弱引用（WeakReference）\" class=\"headerlink\" title=\"3、弱引用（WeakReference）\"></a>3、弱引用（WeakReference）</h2><p><em><strong>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的<br>对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，<br>都会回收掉只被弱引用关联的对象。</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakReference = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(str);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>复制代码JVM首先将软引用中的对象引用置为null，然后通知垃圾回收器进行回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br><span class=\"line\">System.gc();</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果一个对象是偶尔(很少)的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用Weak Reference来记住此对象。</p>\n<p>下面的代码会让一个弱引用再次变为一个强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakReference = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(str);</span><br><span class=\"line\"><span class=\"comment\">// 弱引用转强引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strongReference</span> <span class=\"operator\">=</span> weakReference.get();</span><br></pre></td></tr></table></figure>\n\n<p>同样，弱引用可以和一个引用队列(ReferenceQueue)联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n<h2 id=\"4、虚引用（PhantomReference）\"><a href=\"#4、虚引用（PhantomReference）\" class=\"headerlink\" title=\"4、虚引用（PhantomReference）\"></a>4、虚引用（PhantomReference）</h2><p><em><strong>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。</strong></em></p>\n<p>虚引用主要用来<strong>跟踪对象被垃圾回收器回收的活动</strong>，虚引用与软引用和弱引用的一个区别在于：</p>\n<blockquote>\n<p>虚引用必须和引用队列(ReferenceQueue)联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">ReferenceQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建虚引用，要求必须与一个引用队列关联</span></span><br><span class=\"line\"><span class=\"type\">PhantomReference</span> <span class=\"variable\">pr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>(str, queue);</span><br></pre></td></tr></table></figure>\n<p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要进行垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>\n<h2 id=\"5、引用队列（ReferenceQueue）\"><a href=\"#5、引用队列（ReferenceQueue）\" class=\"headerlink\" title=\"5、引用队列（ReferenceQueue）\"></a>5、引用队列（ReferenceQueue）</h2><p>在前面软引用、弱引用和虚引用都有讲到引用队列，那引用队列具体是做什么的呢？<br>官方对于引用队列类的注释是：</p>\n<blockquote>\n<p> Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.<br> 译为：引用队列是将垃圾收集器在监测到适当的可达性更改后将已注册的引用对象添加到该队列。</p>\n</blockquote>\n<p>对于软引用和弱引用和虚引用，我们希望当一个对象被gc掉的时候通知用户线程，进行额外的处理时，就需要使用引用队列了。<code>ReferenceQueue</code>即这样的一个对象，当一个obj被gc掉之后，其相应的包装类，即ref对象会被放入queue中。我们可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理等。</p>\n<p>查看源码发现ReferenceQueue的代码结构并不复杂，从源码上看，实际上ReferenceQueue只是名义上的引用队列，它只保存了Reference链表的头(head)节点，并且提供了队列出队入队删除操作，而Reference实际上本身提供单向链表的功能，也就是说Reference通过成员属性next构建单向链表，而链表的操作是委托给ReferenceQueue完成。详细参考：<a href=\"https://www.throwable.club/2019/02/16/java-reference/#ReferenceQueue\">深入理解JDK中的Reference原理和源码实现</a></p>\n<img src=\"https://cdn.julis.wang/blog/img/20191030191550407.png\">\n<h2 id=\"6、总结\"><a href=\"#6、总结\" class=\"headerlink\" title=\"6、总结\"></a>6、总结</h2><p>1、Java中四种引用的级别和强度由高到低依次为：<code>强引用 -&gt; 软引用 -&gt; 弱引用 -&gt; 虚引用</code></p>\n<p>2、ReferenceQueue引用队列用来记录被回收的引用为用户线程做额外操作作铺垫</p>\n<p>3、对各种引用回收时间、用途、生成时间作总结：</p>\n<img src=\"https://cdn.julis.wang/blog/img/78afb9b4d86f5feef01ac947f96baee331c.jpg\">\n<p>参考：</p>\n<p>1、《深入理解Java虚拟机》</p>\n<p>2、<a href=\"https://www.throwable.club/2019/02/16/java-reference/#ReferenceQueue\">深入理解JDK中的Reference原理和源码实现</a></p>\n<p>3、<a href=\"https://juejin.im/post/5b82c02df265da436152f5ad\">理解Java的强引用、软引用、弱引用和虚引用</a></p>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/20191030191550407.png","https://cdn.julis.wang/blog/img/78afb9b4d86f5feef01ac947f96baee331c.jpg"],"content":"<p>Java执行GC判断对象是否存活有两种方式其中一种是<strong>引用计数</strong>。</p>\n<p><strong>引用计数</strong>：Java堆中每一个对象都有一个引用计数属性，引用每新增1次计数加1，引用每释放1次计数减1。</p>\n<p>在JDK 1.2以前的版本中，若一个对象不被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有对象处于(reachable)可达状态，程序才能使用它。</p>\n<p>从JDK 1.2版本开始，对象的引用被划分为4种级别，从而使程序能更加灵活地控制对象的生命周期。这4种级别由高到低依次为：<code>强引用、软引用、弱引用和虚引用</code>，本文主要讲解各个引用的用途以及引用队列的作用。</p>\n<h2 id=\"1、强引用（StrongReference）\"><a href=\"#1、强引用（StrongReference）\" class=\"headerlink\" title=\"1、强引用（StrongReference）\"></a>1、强引用（StrongReference）</h2><p>强引用指的是程序代码中普遍存在的，类似如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p><em><strong>当内存空间不足时，只要强引用还在，Java虚拟机会抛出OutOfMemoryError错误，使程序异常终止，也不会靠回收强引用的对象来解决内存不足的问题。</strong></em></p>\n<p>如果强引用对象不使用时，需要弱化从而使GC能够回收，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">object = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、软引用（SoftReference）\"><a href=\"#2、软引用（SoftReference）\" class=\"headerlink\" title=\"2、软引用（SoftReference）\"></a>2、软引用（SoftReference）</h2><p><em><strong>软引用是用来描述一些有用但并不是必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回首范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</strong></em></p>\n<p>这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等，软引用可用来实现内存敏感的高速缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 强引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strongReference</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 软引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softReference = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;String&gt;(str);</span><br></pre></td></tr></table></figure>\n\n<p>软引用可以和一个引用队列(ReferenceQueue)联合使用。如果软引用所引用对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReferenceQueue&lt;String&gt; referenceQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">SoftReference&lt;String&gt; softReference = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;&gt;(str, referenceQueue);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// Notify GC</span></span><br><span class=\"line\">System.gc();</span><br><span class=\"line\">System.out.println(softReference.get()); <span class=\"comment\">// abc</span></span><br><span class=\"line\">Reference&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">String</span>&gt; reference = referenceQueue.poll();</span><br><span class=\"line\">System.out.println(reference); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：软引用对象是在jvm内存不够的时候才会被回收，我们调用System.gc()方法只是起通知作用，JVM什么时候扫描回收对象是JVM自己的状态决定的。就算扫描到软引用对象也不一定会回收它，只有内存不够的时候才会回收。</p>\n<p>当内存不足时，JVM首先将软引用中的对象引用置为<code>null</code>，然后通知垃圾回收器进行回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(JVM内存不足) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 将软引用中的对象引用置为null</span></span><br><span class=\"line\">     str = <span class=\"literal\">null</span>;</span><br><span class=\"line\">     <span class=\"comment\">// 通知垃圾回收器进行回收</span></span><br><span class=\"line\">     System.gc();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，垃圾收集线程会在虚拟机抛出<code>OutOfMemoryError</code>之前回收软引用对象，而且虚拟机会尽可能优先回收长时间闲置不用的软引用对象。对那些刚构建的或刚使用过的较新的软对象会被虚拟机尽可能保留，这就是引入引用队列ReferenceQueue的原因，后面会具体讲解。</p>\n<h2 id=\"3、弱引用（WeakReference）\"><a href=\"#3、弱引用（WeakReference）\" class=\"headerlink\" title=\"3、弱引用（WeakReference）\"></a>3、弱引用（WeakReference）</h2><p><em><strong>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的<br>对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，<br>都会回收掉只被弱引用关联的对象。</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakReference = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(str);</span><br><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>复制代码JVM首先将软引用中的对象引用置为null，然后通知垃圾回收器进行回收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">str = <span class=\"literal\">null</span>;</span><br><span class=\"line\">System.gc();</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果一个对象是偶尔(很少)的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用Weak Reference来记住此对象。</p>\n<p>下面的代码会让一个弱引用再次变为一个强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">WeakReference&lt;String&gt; weakReference = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;&gt;(str);</span><br><span class=\"line\"><span class=\"comment\">// 弱引用转强引用</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">strongReference</span> <span class=\"operator\">=</span> weakReference.get();</span><br></pre></td></tr></table></figure>\n\n<p>同样，弱引用可以和一个引用队列(ReferenceQueue)联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n<h2 id=\"4、虚引用（PhantomReference）\"><a href=\"#4、虚引用（PhantomReference）\" class=\"headerlink\" title=\"4、虚引用（PhantomReference）\"></a>4、虚引用（PhantomReference）</h2><p><em><strong>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。</strong></em></p>\n<p>虚引用主要用来<strong>跟踪对象被垃圾回收器回收的活动</strong>，虚引用与软引用和弱引用的一个区别在于：</p>\n<blockquote>\n<p>虚引用必须和引用队列(ReferenceQueue)联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">ReferenceQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建虚引用，要求必须与一个引用队列关联</span></span><br><span class=\"line\"><span class=\"type\">PhantomReference</span> <span class=\"variable\">pr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>(str, queue);</span><br></pre></td></tr></table></figure>\n<p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要进行垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>\n<h2 id=\"5、引用队列（ReferenceQueue）\"><a href=\"#5、引用队列（ReferenceQueue）\" class=\"headerlink\" title=\"5、引用队列（ReferenceQueue）\"></a>5、引用队列（ReferenceQueue）</h2><p>在前面软引用、弱引用和虚引用都有讲到引用队列，那引用队列具体是做什么的呢？<br>官方对于引用队列类的注释是：</p>\n<blockquote>\n<p> Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.<br> 译为：引用队列是将垃圾收集器在监测到适当的可达性更改后将已注册的引用对象添加到该队列。</p>\n</blockquote>\n<p>对于软引用和弱引用和虚引用，我们希望当一个对象被gc掉的时候通知用户线程，进行额外的处理时，就需要使用引用队列了。<code>ReferenceQueue</code>即这样的一个对象，当一个obj被gc掉之后，其相应的包装类，即ref对象会被放入queue中。我们可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理等。</p>\n<p>查看源码发现ReferenceQueue的代码结构并不复杂，从源码上看，实际上ReferenceQueue只是名义上的引用队列，它只保存了Reference链表的头(head)节点，并且提供了队列出队入队删除操作，而Reference实际上本身提供单向链表的功能，也就是说Reference通过成员属性next构建单向链表，而链表的操作是委托给ReferenceQueue完成。详细参考：<a href=\"https://www.throwable.club/2019/02/16/java-reference/#ReferenceQueue\">深入理解JDK中的Reference原理和源码实现</a></p>\n<img src=\"https://cdn.julis.wang/blog/img/20191030191550407.png\">\n<h2 id=\"6、总结\"><a href=\"#6、总结\" class=\"headerlink\" title=\"6、总结\"></a>6、总结</h2><p>1、Java中四种引用的级别和强度由高到低依次为：<code>强引用 -&gt; 软引用 -&gt; 弱引用 -&gt; 虚引用</code></p>\n<p>2、ReferenceQueue引用队列用来记录被回收的引用为用户线程做额外操作作铺垫</p>\n<p>3、对各种引用回收时间、用途、生成时间作总结：</p>\n<img src=\"https://cdn.julis.wang/blog/img/78afb9b4d86f5feef01ac947f96baee331c.jpg\">\n<p>参考：</p>\n<p>1、《深入理解Java虚拟机》</p>\n<p>2、<a href=\"https://www.throwable.club/2019/02/16/java-reference/#ReferenceQueue\">深入理解JDK中的Reference原理和源码实现</a></p>\n<p>3、<a href=\"https://juejin.im/post/5b82c02df265da436152f5ad\">理解Java的强引用、软引用、弱引用和虚引用</a></p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/10/30/Java四种引用.json"},{"title":"Java中Lambda表达式解析","slug":"Java中Lambda表达式解析","date":"2019-10-09T10:55:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/10/09/Java中Lambda表达式解析/","excerpt":"<p>在大部分开发者看来，Lambda 表达式只是一种语法糖，简化了书写匿名内部类的写法。实际上Lambda表达式并不仅仅是匿名内部类的语法糖，JVM内部是通过invokedynamic指令来实现Lambda表达式的，与内部类的实现有很大的差异。本文主要记录lambda的实现原理。</p>\n<h2 id=\"一、函数式接口\"><a href=\"#一、函数式接口\" class=\"headerlink\" title=\"一、函数式接口\"></a><strong>一、函数式接口</strong></h2><p>众所周知Javascript具有一个强大的特性：<strong>闭包</strong>。Java中最接近闭包概念的东西就是lambda表达式了，而Lambda为Java添加了缺失函数式编程的特点。所以什么是函数是接口呢？</p>\n<p>函数式接口需满足以下两个条件：</p>\n<ol>\n<li>它是接口</li>\n<li>这个接口<strong>有且仅有一个抽象方法</strong></li>\n</ol>\n<p>例如我们常用的：Runnable、View.OnClickListener、Comparable等都是函数式接口，因为它们都只有一个方法，而且都是抽象的。虽然只有一个抽象方法，是不是就意味着只能有一个方法呢？实际并不是，虽然有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>\n<p>嗯？！Java接口中难道还可以定义非抽象方法么？平时我们的接口大概长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IdiomSubmitListener</span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">verifyResult</span><span class=\"params\">(String result)</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onSuceess</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那接口的非抽象方法是啥？原来在JDK 1.8 对于接口而言具有以下新特性：<br><strong>接口可以定义非抽象方法，但必须使用default或者staic关键字来修饰</strong><br>具体细节点可以参考 <a href=\"https://blog.csdn.net/austral/article/details/53402476\">JAVA 8新特性 允许接口定义非抽象方法 快速入门案例</a></p>\n<p>如果一个接口符合函数式接口的定义，那么我们就可以在该接口上面声明FunctionalInterface注解，用来表示该接口是一个函数式接口，并按照函数式接口的规范在编译的时候对该接口进行检查。</p>\n<p>当然如果某个接口只有一个抽象方法，但我们并没有给该接口声明FunctionalInterface注解，那么编译器依旧会将该接口看做是函数式接口。</p>\n<p>那Lambda表达式跟函数式接口又有什么关联呢？<br>在JDK 1.8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型–函数式接口。</p>\n<p>因此可以说 在JDK 1.8中，Lambda表达式就是一个函数式接口的实例。<br><strong>所以如果一个实例是函数式接口的实例，那么该对象就可以用Lambda表达式来表示</strong></p>\n<h2 id=\"二、Lambda表达式与匿名内部类\"><a href=\"#二、Lambda表达式与匿名内部类\" class=\"headerlink\" title=\"二、Lambda表达式与匿名内部类\"></a><strong>二、Lambda表达式与匿名内部类</strong></h2><p>我们知道代码IDE如果是在JDK1.8的环境下，使用匿名内部类作为一个参数传入到方法中，编译器会提示我们：<code>Anonymous new Runnable() can be replaced with lambda</code>，匿名内部类XXX可以替换为lambda表达式。</p>\n<p>如下所示，匿名内部类 Runnable是一个函数式接口的实例，所以我们可以用lambda表达式来将之替换，从而将代码变得更加简洁。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0Lzc4YzgxZWMyZjkzMmE5MDhmOTcxM2NiZGM5ODRkOGFhMWI2LmpwZw?x-oss-process=image/format,png\"></p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009170329915.png\">\n<p>那么我们是否就认为：Lambda表达式只是为匿名内部类中提供的一种语法糖，他们有什么区别呢？底层原理是完全一样的呢？</p>\n<p>他们主要区别如下：</p>\n<p>1、关键字this。匿名内部类的this指向匿名类，而Lambda表达式的this指向被Lambda包围的外部类</p>\n<p>2、编译方式。Java编译器将Lambda表达式编译成类的私有方法，使用Java7的invokedynamic字节码动态绑定这个方法。而匿名内部类将编译成<strong>外部类$数字编号</strong>的新类。这也造成第1点关键字this指向不同地方的原因。</p>\n<h2 id=\"三、Lambda实现原理\"><a href=\"#三、Lambda实现原理\" class=\"headerlink\" title=\"三、Lambda实现原理\"></a><strong>三、Lambda实现原理</strong></h2><p>我们知道如果使用匿名内部类，编译期间会生成一个外部类$数字编号的类，如图所示：</p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009172403269.png\">\n\n<p>而如果使用Lambda表达式进行编译后并没有生成新类。</p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009172455212.png\">\n<p>我们对Lambda表达式生成的class文件使用：javap -p -v Test.class 进行反编译生成如下内容，为便于观察，删除了一些无用内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">wang</span>.julis.jwbase.basecompact.Test</span><br><span class=\"line\"></span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #<span class=\"number\">1</span> = Methodref          #<span class=\"number\">9.</span>#<span class=\"number\">18</span>         <span class=\"comment\">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> wang.julis.jwbase.basecompact.Test();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0001</span>) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">12</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLambda</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0002</span>) ACC_PRIVATE</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">3</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           #<span class=\"number\">2</span>                  <span class=\"comment\">// class java/lang/Thread</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: dup</span><br><span class=\"line\">         <span class=\"number\">4</span>: invokedynamic #<span class=\"number\">3</span>,  <span class=\"number\">0</span>              <span class=\"comment\">// InvokeDynamic #0:run:()Ljava/lang/Runnable;</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: invokespecial #<span class=\"number\">4</span>                  <span class=\"comment\">// Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\">        <span class=\"number\">12</span>: pop</span><br><span class=\"line\">        <span class=\"number\">13</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">18</span>: <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> lambda$testLambda$<span class=\"number\">0</span>();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x100a</span>) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: getstatic     #<span class=\"number\">5</span>                  <span class=\"comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: ldc           #<span class=\"number\">6</span>                  <span class=\"comment\">// String lambda</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: invokevirtual #<span class=\"number\">7</span>                  <span class=\"comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">15</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">16</span>: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">&quot;Test.java&quot;</span></span><br><span class=\"line\">InnerClasses:</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> #<span class=\"number\">50</span>= #<span class=\"number\">49</span> of #<span class=\"number\">53</span>;    <span class=\"comment\">// Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class=\"line\">BootstrapMethods:</span><br><span class=\"line\">  <span class=\"number\">0</span>: #<span class=\"number\">21</span> REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class=\"line\">    Method arguments:</span><br><span class=\"line\">      #<span class=\"number\">22</span> ()V</span><br><span class=\"line\">      #<span class=\"number\">23</span> REF_invokeStatic wang/julis/jwbase/basecompact/Test.lambda$testLambda$<span class=\"number\">0</span>:()V</span><br><span class=\"line\">      #<span class=\"number\">22</span> ()V</span><br></pre></td></tr></table></figure>\n<p>从反编译的结果我们可以看到：</p>\n<p>1、编译期间自动生成私有静态类<code>lambda$testLambda$0</code>而这里面就就是lambda的具体实现逻辑</p>\n<p>2、使用invokedynamic去执行lambda表达式 关于invokedynamic命令具体细节可以参考： <a href=\"https://time.geekbang.org/column/article/12564\">08 | JVM是怎么实现invokedynamic的？（上）</a></p>\n<p>3、lambda表达式编译后并没有生成外部类$数字编号的类</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>1、函数式接口：有且仅有一个抽象方法，可以用非抽象方法1.8后支持</p>\n<p>2、匿名内部类的this指向匿名类，而Lambda表达式的this指向被Lambda包围的外部类</p>\n<p>3、lambda表达式编译后不会生成外部类$数字编号的类</p>\n<p>4、Java编译器将Lambda表达式编译成类的私有方法，使用Java7的invokedynamic字节码动态绑定这个方法。</p>\n<p>参考：<br>1、《深入探索Android热修复技术原理》2.3.8章节<br>2、<a href=\"https://blog.csdn.net/zw19910924/article/details/75907348\">Java8 lambda表达式、函数式接口、方法引用</a></p>\n","cover":null,"images":["https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0Lzc4YzgxZWMyZjkzMmE5MDhmOTcxM2NiZGM5ODRkOGFhMWI2LmpwZw?x-oss-process=image/format,png","https://cdn.julis.wang/blog/img/20191009170329915.png","https://cdn.julis.wang/blog/img/20191009172403269.png","https://cdn.julis.wang/blog/img/20191009172455212.png"],"content":"<p>在大部分开发者看来，Lambda 表达式只是一种语法糖，简化了书写匿名内部类的写法。实际上Lambda表达式并不仅仅是匿名内部类的语法糖，JVM内部是通过invokedynamic指令来实现Lambda表达式的，与内部类的实现有很大的差异。本文主要记录lambda的实现原理。</p>\n<h2 id=\"一、函数式接口\"><a href=\"#一、函数式接口\" class=\"headerlink\" title=\"一、函数式接口\"></a><strong>一、函数式接口</strong></h2><p>众所周知Javascript具有一个强大的特性：<strong>闭包</strong>。Java中最接近闭包概念的东西就是lambda表达式了，而Lambda为Java添加了缺失函数式编程的特点。所以什么是函数是接口呢？</p>\n<p>函数式接口需满足以下两个条件：</p>\n<ol>\n<li>它是接口</li>\n<li>这个接口<strong>有且仅有一个抽象方法</strong></li>\n</ol>\n<p>例如我们常用的：Runnable、View.OnClickListener、Comparable等都是函数式接口，因为它们都只有一个方法，而且都是抽象的。虽然只有一个抽象方法，是不是就意味着只能有一个方法呢？实际并不是，虽然有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>\n<p>嗯？！Java接口中难道还可以定义非抽象方法么？平时我们的接口大概长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IdiomSubmitListener</span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">verifyResult</span><span class=\"params\">(String result)</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onSuceess</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那接口的非抽象方法是啥？原来在JDK 1.8 对于接口而言具有以下新特性：<br><strong>接口可以定义非抽象方法，但必须使用default或者staic关键字来修饰</strong><br>具体细节点可以参考 <a href=\"https://blog.csdn.net/austral/article/details/53402476\">JAVA 8新特性 允许接口定义非抽象方法 快速入门案例</a></p>\n<p>如果一个接口符合函数式接口的定义，那么我们就可以在该接口上面声明FunctionalInterface注解，用来表示该接口是一个函数式接口，并按照函数式接口的规范在编译的时候对该接口进行检查。</p>\n<p>当然如果某个接口只有一个抽象方法，但我们并没有给该接口声明FunctionalInterface注解，那么编译器依旧会将该接口看做是函数式接口。</p>\n<p>那Lambda表达式跟函数式接口又有什么关联呢？<br>在JDK 1.8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型–函数式接口。</p>\n<p>因此可以说 在JDK 1.8中，Lambda表达式就是一个函数式接口的实例。<br><strong>所以如果一个实例是函数式接口的实例，那么该对象就可以用Lambda表达式来表示</strong></p>\n<h2 id=\"二、Lambda表达式与匿名内部类\"><a href=\"#二、Lambda表达式与匿名内部类\" class=\"headerlink\" title=\"二、Lambda表达式与匿名内部类\"></a><strong>二、Lambda表达式与匿名内部类</strong></h2><p>我们知道代码IDE如果是在JDK1.8的环境下，使用匿名内部类作为一个参数传入到方法中，编译器会提示我们：<code>Anonymous new Runnable() can be replaced with lambda</code>，匿名内部类XXX可以替换为lambda表达式。</p>\n<p>如下所示，匿名内部类 Runnable是一个函数式接口的实例，所以我们可以用lambda表达式来将之替换，从而将代码变得更加简洁。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9vc2NpbWcub3NjaGluYS5uZXQvb3NjbmV0Lzc4YzgxZWMyZjkzMmE5MDhmOTcxM2NiZGM5ODRkOGFhMWI2LmpwZw?x-oss-process=image/format,png\"></p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009170329915.png\">\n<p>那么我们是否就认为：Lambda表达式只是为匿名内部类中提供的一种语法糖，他们有什么区别呢？底层原理是完全一样的呢？</p>\n<p>他们主要区别如下：</p>\n<p>1、关键字this。匿名内部类的this指向匿名类，而Lambda表达式的this指向被Lambda包围的外部类</p>\n<p>2、编译方式。Java编译器将Lambda表达式编译成类的私有方法，使用Java7的invokedynamic字节码动态绑定这个方法。而匿名内部类将编译成<strong>外部类$数字编号</strong>的新类。这也造成第1点关键字this指向不同地方的原因。</p>\n<h2 id=\"三、Lambda实现原理\"><a href=\"#三、Lambda实现原理\" class=\"headerlink\" title=\"三、Lambda实现原理\"></a><strong>三、Lambda实现原理</strong></h2><p>我们知道如果使用匿名内部类，编译期间会生成一个外部类$数字编号的类，如图所示：</p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009172403269.png\">\n\n<p>而如果使用Lambda表达式进行编译后并没有生成新类。</p>\n<img src=\"https://cdn.julis.wang/blog/img/20191009172455212.png\">\n<p>我们对Lambda表达式生成的class文件使用：javap -p -v Test.class 进行反编译生成如下内容，为便于观察，删除了一些无用内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">wang</span>.julis.jwbase.basecompact.Test</span><br><span class=\"line\"></span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #<span class=\"number\">1</span> = Methodref          #<span class=\"number\">9.</span>#<span class=\"number\">18</span>         <span class=\"comment\">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> wang.julis.jwbase.basecompact.Test();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0001</span>) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">12</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLambda</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0002</span>) ACC_PRIVATE</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">3</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: <span class=\"keyword\">new</span>           #<span class=\"number\">2</span>                  <span class=\"comment\">// class java/lang/Thread</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: dup</span><br><span class=\"line\">         <span class=\"number\">4</span>: invokedynamic #<span class=\"number\">3</span>,  <span class=\"number\">0</span>              <span class=\"comment\">// InvokeDynamic #0:run:()Ljava/lang/Runnable;</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: invokespecial #<span class=\"number\">4</span>                  <span class=\"comment\">// Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span></span><br><span class=\"line\">        <span class=\"number\">12</span>: pop</span><br><span class=\"line\">        <span class=\"number\">13</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">14</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">18</span>: <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> lambda$testLambda$<span class=\"number\">0</span>();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x100a</span>) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: getstatic     #<span class=\"number\">5</span>                  <span class=\"comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: ldc           #<span class=\"number\">6</span>                  <span class=\"comment\">// String lambda</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: invokevirtual #<span class=\"number\">7</span>                  <span class=\"comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">15</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">16</span>: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">&quot;Test.java&quot;</span></span><br><span class=\"line\">InnerClasses:</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> #<span class=\"number\">50</span>= #<span class=\"number\">49</span> of #<span class=\"number\">53</span>;    <span class=\"comment\">// Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class=\"line\">BootstrapMethods:</span><br><span class=\"line\">  <span class=\"number\">0</span>: #<span class=\"number\">21</span> REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class=\"line\">    Method arguments:</span><br><span class=\"line\">      #<span class=\"number\">22</span> ()V</span><br><span class=\"line\">      #<span class=\"number\">23</span> REF_invokeStatic wang/julis/jwbase/basecompact/Test.lambda$testLambda$<span class=\"number\">0</span>:()V</span><br><span class=\"line\">      #<span class=\"number\">22</span> ()V</span><br></pre></td></tr></table></figure>\n<p>从反编译的结果我们可以看到：</p>\n<p>1、编译期间自动生成私有静态类<code>lambda$testLambda$0</code>而这里面就就是lambda的具体实现逻辑</p>\n<p>2、使用invokedynamic去执行lambda表达式 关于invokedynamic命令具体细节可以参考： <a href=\"https://time.geekbang.org/column/article/12564\">08 | JVM是怎么实现invokedynamic的？（上）</a></p>\n<p>3、lambda表达式编译后并没有生成外部类$数字编号的类</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>1、函数式接口：有且仅有一个抽象方法，可以用非抽象方法1.8后支持</p>\n<p>2、匿名内部类的this指向匿名类，而Lambda表达式的this指向被Lambda包围的外部类</p>\n<p>3、lambda表达式编译后不会生成外部类$数字编号的类</p>\n<p>4、Java编译器将Lambda表达式编译成类的私有方法，使用Java7的invokedynamic字节码动态绑定这个方法。</p>\n<p>参考：<br>1、《深入探索Android热修复技术原理》2.3.8章节<br>2、<a href=\"https://blog.csdn.net/zw19910924/article/details/75907348\">Java8 lambda表达式、函数式接口、方法引用</a></p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/10/09/Java中Lambda表达式解析.json"},{"title":"Java虚拟机类的加载机制","slug":"Java虚拟机类的加载机制","date":"2019-03-21T01:35:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/21/Java虚拟机类的加载机制/","excerpt":"<p><strong>什么是虚拟机类的加载机制？</strong></p>\n<blockquote>\n<p>虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验，转换，解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>\n</blockquote>\n<p>类从加载到虚拟机的内存中开始，直到卸载出内存为止，整个生命周期为：</p>\n<ul>\n<li><p>加载（loading）</p>\n</li>\n<li><p>验证（verification）</p>\n</li>\n<li><p>准备(preparation)</p>\n</li>\n<li><p>解析(resolution)</p>\n</li>\n<li><p>初始化(initialization)</p>\n</li>\n<li><p>使用(using)</p>\n</li>\n<li><p>卸载（unloading）</p>\n</li>\n</ul>\n<p>其中 验证、准备、解析部分统称为连接</p>\n<img src=\"https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg\">\n<p>接下来依次讲解，各个步骤所做的事</p>\n<h2 id=\"第一部分-加载\"><a href=\"#第一部分-加载\" class=\"headerlink\" title=\"第一部分 加载\"></a><strong>第一部分 加载</strong></h2><hr>\n<p>“加载”是“类加载”的一个阶段，注意区分概念。类的加载由<strong>类加载器</strong>（后面介绍）加载主要完成三件事情：</p>\n<p><strong>1、通过一个类的全限定名来获取其定义的二进制字节流。</strong></p>\n<p><strong>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</strong></p>\n<p><strong>3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</strong></p>\n<blockquote>\n<p>加载阶段完成后，虚拟机外部的二进制字节流将按照虚拟机所需的格式存储在方法区中，同时在内存中实例化一个java.lang.Class的实例对象。相对于HotSpot，这个实例对象比较特殊，虽然是一个对象，但并没有放置在堆中，而是放置在方法区中。这个对象将作为程序访问方法区中这些类数据的外部接口。</p>\n</blockquote>\n<h2 id=\"第二部分-验证\"><a href=\"#第二部分-验证\" class=\"headerlink\" title=\"第二部分 验证\"></a><strong>第二部分 验证</strong></h2><hr>\n<p>这一步主要是确保Class文件的字节流符合虚拟机的规范</p>\n<p>主要验证以下几个部分：</p>\n<p><strong>1、文件格式验证</strong><br>验证是否以魔数开头、主次版本号是否在当前虚拟机处理范围内…</p>\n<p>这一验证阶段主要是保证输入的字节流能正确地解析并存储与方法区内，格式上符合Java类型信息的要求。只有通过这个阶段，字节流才会进入内存的方法区中存储，后面的三个验证方式也都是给予方法区中的数据验证，不再会操作字节流。</p>\n<p><strong>2、元数据验证</strong>  验证这个类是否有父类、这个类是否继承了不允许继承的类…</p>\n<p>该阶段主要对类的元数据进行语义校验，保证符合java语言规范的元数据信息。</p>\n<p><strong>3、字节码验证</strong></p>\n<p>最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是否合法、符合逻辑。</p>\n<p><strong>4、符号引用验证</strong> </p>\n<p>这个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作发生在连接的解析阶段。目的是确保解析动作正常执行，如果无法通过验证，将抛出 IllegalAccessError、NoSuchFieldError、NoSuchMethodError等异常。</p>\n<h2 id=\"第三部分-准备\"><a href=\"#第三部分-准备\" class=\"headerlink\" title=\"第三部分 准备\"></a><strong>第三部分 准备</strong></h2><hr>\n<p>准备阶段是正式为类变量分配内存并设置<strong>类变量初始值</strong>的阶段，这些变量所实用的内存将在<strong>方法区</strong>中进行分配。</p>\n<p><strong>这时候的分配仅仅是类变量(staic修饰的变量)，而实例变量将会在对象实例化时随对象一起分配在Java对中。</strong></p>\n<p>假设一个类变量为：public static int count &#x3D; 10;这时候会分配0，而不是10，分配10是在程序编译后。</p>\n<h2 id=\"第四部分-解析\"><a href=\"#第四部分-解析\" class=\"headerlink\" title=\"第四部分 解析\"></a><strong>第四部分 解析</strong></h2><hr>\n<p>解析阶段是虚拟机将常量池的符号引用替换为直接引用的阶段</p>\n<p><strong>1、类或者接口的的解析</strong></p>\n<p><strong>2、字段解析</strong></p>\n<p><strong>3、类方法解析</strong></p>\n<p><strong>4、接口方法解析</strong></p>\n<blockquote>\n<p><strong>符号引用</strong>与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p>\n</blockquote>\n<blockquote>\n<p><strong>直接引用</strong>可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n</blockquote>\n<h2 id=\"第五部分-初始化\"><a href=\"#第五部分-初始化\" class=\"headerlink\" title=\"第五部分 初始化\"></a><strong>第五部分 初始化</strong></h2><hr>\n<p>在准备阶段，变量已经被分配赋值过初始值，在初始化阶段根据代码的逻辑初始化真实的变量和其他资源。</p>\n<h2 id=\"关于类加载器\"><a href=\"#关于类加载器\" class=\"headerlink\" title=\"关于类加载器\"></a><strong>关于类加载器</strong></h2><hr>\n<p><strong>什么是类加载器？</strong></p>\n<p>在“加载”阶段中，通过一个类的全限定名来获取其定义的二进制字节流。这一动作是放到了Java虚拟机外部去实现的，是为了方便让应用自己去决定如何获取所需要的类，实现这个动作的功能是常说的“类加载器（ClassLoader）”</p>\n<p>类加载器主要有三种：</p>\n<p><strong>1.启动类加载器(Bootstrap ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\n</code></pre>\n<p><strong>2.扩展类加载器(Exension ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\\ext\n</code></pre>\n<p><strong>3.应用程序类加载器(Applicaion ClassLoader)</strong></p>\n<pre><code>负责加载ClassPath上指定的类库\n</code></pre>\n<p><strong>类加载器工作原理</strong></p>\n<p>介绍类加载器原理之前，必须得了解<strong>双亲委派模型</strong>(Parents Delegation Model)</p>\n<blockquote>\n<p>双亲委派模式的工作原理的是：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\n</blockquote>\n<img src=\"https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg\">\n\n<p>如图所示，这种层次结构关系被称为<strong>双亲委派模型</strong><br>以下为其实现代码，集中在java.lang.ClassLoader中的loadClass()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\"><span class=\"comment\">//首先检查类是否被加载</span></span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有父加载器，则先委托父加载，否则由启动类加载器加载，如果启动类加载器没有找到，则返回null</span></span><br><span class=\"line\">                      c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                  <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">\t<span class=\"comment\">//这里的ClassNotFoundException来自父加载器</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                  <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">\t<span class=\"comment\">//在父类Classloader还没办法加载的时候</span></span><br><span class=\"line\">\t<span class=\"comment\">//再调用本身的findclass方法来加载类</span></span><br><span class=\"line\">                  <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码的逻辑很清楚：</p>\n<blockquote>\n<p><strong>先加载类是否已经被加载过，若没有则调用父的loadClass()方法，如果父 类加载器为空，则使用启动类加载器作为父加载器，如果父 类加载器加载失败，再调用自己的findClass()方法进行加载</strong></p>\n</blockquote>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg","https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg"],"content":"<p><strong>什么是虚拟机类的加载机制？</strong></p>\n<blockquote>\n<p>虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验，转换，解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>\n</blockquote>\n<p>类从加载到虚拟机的内存中开始，直到卸载出内存为止，整个生命周期为：</p>\n<ul>\n<li><p>加载（loading）</p>\n</li>\n<li><p>验证（verification）</p>\n</li>\n<li><p>准备(preparation)</p>\n</li>\n<li><p>解析(resolution)</p>\n</li>\n<li><p>初始化(initialization)</p>\n</li>\n<li><p>使用(using)</p>\n</li>\n<li><p>卸载（unloading）</p>\n</li>\n</ul>\n<p>其中 验证、准备、解析部分统称为连接</p>\n<img src=\"https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg\">\n<p>接下来依次讲解，各个步骤所做的事</p>\n<h2 id=\"第一部分-加载\"><a href=\"#第一部分-加载\" class=\"headerlink\" title=\"第一部分 加载\"></a><strong>第一部分 加载</strong></h2><hr>\n<p>“加载”是“类加载”的一个阶段，注意区分概念。类的加载由<strong>类加载器</strong>（后面介绍）加载主要完成三件事情：</p>\n<p><strong>1、通过一个类的全限定名来获取其定义的二进制字节流。</strong></p>\n<p><strong>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</strong></p>\n<p><strong>3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</strong></p>\n<blockquote>\n<p>加载阶段完成后，虚拟机外部的二进制字节流将按照虚拟机所需的格式存储在方法区中，同时在内存中实例化一个java.lang.Class的实例对象。相对于HotSpot，这个实例对象比较特殊，虽然是一个对象，但并没有放置在堆中，而是放置在方法区中。这个对象将作为程序访问方法区中这些类数据的外部接口。</p>\n</blockquote>\n<h2 id=\"第二部分-验证\"><a href=\"#第二部分-验证\" class=\"headerlink\" title=\"第二部分 验证\"></a><strong>第二部分 验证</strong></h2><hr>\n<p>这一步主要是确保Class文件的字节流符合虚拟机的规范</p>\n<p>主要验证以下几个部分：</p>\n<p><strong>1、文件格式验证</strong><br>验证是否以魔数开头、主次版本号是否在当前虚拟机处理范围内…</p>\n<p>这一验证阶段主要是保证输入的字节流能正确地解析并存储与方法区内，格式上符合Java类型信息的要求。只有通过这个阶段，字节流才会进入内存的方法区中存储，后面的三个验证方式也都是给予方法区中的数据验证，不再会操作字节流。</p>\n<p><strong>2、元数据验证</strong>  验证这个类是否有父类、这个类是否继承了不允许继承的类…</p>\n<p>该阶段主要对类的元数据进行语义校验，保证符合java语言规范的元数据信息。</p>\n<p><strong>3、字节码验证</strong></p>\n<p>最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是否合法、符合逻辑。</p>\n<p><strong>4、符号引用验证</strong> </p>\n<p>这个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作发生在连接的解析阶段。目的是确保解析动作正常执行，如果无法通过验证，将抛出 IllegalAccessError、NoSuchFieldError、NoSuchMethodError等异常。</p>\n<h2 id=\"第三部分-准备\"><a href=\"#第三部分-准备\" class=\"headerlink\" title=\"第三部分 准备\"></a><strong>第三部分 准备</strong></h2><hr>\n<p>准备阶段是正式为类变量分配内存并设置<strong>类变量初始值</strong>的阶段，这些变量所实用的内存将在<strong>方法区</strong>中进行分配。</p>\n<p><strong>这时候的分配仅仅是类变量(staic修饰的变量)，而实例变量将会在对象实例化时随对象一起分配在Java对中。</strong></p>\n<p>假设一个类变量为：public static int count &#x3D; 10;这时候会分配0，而不是10，分配10是在程序编译后。</p>\n<h2 id=\"第四部分-解析\"><a href=\"#第四部分-解析\" class=\"headerlink\" title=\"第四部分 解析\"></a><strong>第四部分 解析</strong></h2><hr>\n<p>解析阶段是虚拟机将常量池的符号引用替换为直接引用的阶段</p>\n<p><strong>1、类或者接口的的解析</strong></p>\n<p><strong>2、字段解析</strong></p>\n<p><strong>3、类方法解析</strong></p>\n<p><strong>4、接口方法解析</strong></p>\n<blockquote>\n<p><strong>符号引用</strong>与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p>\n</blockquote>\n<blockquote>\n<p><strong>直接引用</strong>可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n</blockquote>\n<h2 id=\"第五部分-初始化\"><a href=\"#第五部分-初始化\" class=\"headerlink\" title=\"第五部分 初始化\"></a><strong>第五部分 初始化</strong></h2><hr>\n<p>在准备阶段，变量已经被分配赋值过初始值，在初始化阶段根据代码的逻辑初始化真实的变量和其他资源。</p>\n<h2 id=\"关于类加载器\"><a href=\"#关于类加载器\" class=\"headerlink\" title=\"关于类加载器\"></a><strong>关于类加载器</strong></h2><hr>\n<p><strong>什么是类加载器？</strong></p>\n<p>在“加载”阶段中，通过一个类的全限定名来获取其定义的二进制字节流。这一动作是放到了Java虚拟机外部去实现的，是为了方便让应用自己去决定如何获取所需要的类，实现这个动作的功能是常说的“类加载器（ClassLoader）”</p>\n<p>类加载器主要有三种：</p>\n<p><strong>1.启动类加载器(Bootstrap ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\n</code></pre>\n<p><strong>2.扩展类加载器(Exension ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\\ext\n</code></pre>\n<p><strong>3.应用程序类加载器(Applicaion ClassLoader)</strong></p>\n<pre><code>负责加载ClassPath上指定的类库\n</code></pre>\n<p><strong>类加载器工作原理</strong></p>\n<p>介绍类加载器原理之前，必须得了解<strong>双亲委派模型</strong>(Parents Delegation Model)</p>\n<blockquote>\n<p>双亲委派模式的工作原理的是：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\n</blockquote>\n<img src=\"https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg\">\n\n<p>如图所示，这种层次结构关系被称为<strong>双亲委派模型</strong><br>以下为其实现代码，集中在java.lang.ClassLoader中的loadClass()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\"><span class=\"comment\">//首先检查类是否被加载</span></span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有父加载器，则先委托父加载，否则由启动类加载器加载，如果启动类加载器没有找到，则返回null</span></span><br><span class=\"line\">                      c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                  <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">\t<span class=\"comment\">//这里的ClassNotFoundException来自父加载器</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                  <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">\t<span class=\"comment\">//在父类Classloader还没办法加载的时候</span></span><br><span class=\"line\">\t<span class=\"comment\">//再调用本身的findclass方法来加载类</span></span><br><span class=\"line\">                  <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码的逻辑很清楚：</p>\n<blockquote>\n<p><strong>先加载类是否已经被加载过，若没有则调用父的loadClass()方法，如果父 类加载器为空，则使用启动类加载器作为父加载器，如果父 类加载器加载失败，再调用自己的findClass()方法进行加载</strong></p>\n</blockquote>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/03/21/Java虚拟机类的加载机制.json"},{"title":"Android开发 LayoutInflater源码解析","slug":"LayoutInflater源码解析","date":"2019-03-03T06:40:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/03/LayoutInflater源码解析/","excerpt":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","cover":null,"images":[],"content":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/03/03/LayoutInflater源码解析.json"}],"info":{"type":"tag","name":"Java","slug":"java"}},"api":"api/tags/java/page.1.json"}