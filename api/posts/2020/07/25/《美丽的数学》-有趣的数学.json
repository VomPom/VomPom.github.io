{"data":{"title":"《美丽的数学》-有趣的数学","slug":"《美丽的数学》-有趣的数学","description":"","date":"2020-07-25T15:07:00.000Z","updated":"2025-05-20T11:46:57.000Z","language":"zh-CN","comments":true,"url":"2020/07/25/《美丽的数学》-有趣的数学/","cover":null,"images":[],"content":"<p>数学有趣而美妙。书名《美丽的数学》，封面设计得非常的棒，简单优美的线条组合组成了这一蜗牛壳形状，让我们还没有翻开书就已经看到了数学的美丽。这本书看的时间不太长，因为有很多内容已经比较熟悉了，比如斐波那契数列、费马、概率相关。不过更很多内容，让人很着迷。</p>\n<h4 id=\"一个奇迹般的等式\"><a href=\"#一个奇迹般的等式\" class=\"headerlink\" title=\"一个奇迹般的等式\"></a>一个奇迹般的等式</h4><p>我们都知道数学中有这样几个数字：<br>$$<br>\\pi  \\ \\ \\ e  \\ \\  i<br>$$<br>但你可知道他们之间也有一个等式关系：<br>$$<br>e^{i\\pi} + 1 &#x3D; 0<br>$$<br>这个方程真的很震撼，有一种得到“统一”的感觉，就像麦克斯韦<a href=\"https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E7%90%86%E8%AE%BA\">电磁理论</a>建立以后，光学也变成了电磁学的一个分支了，电学、磁学和光学得到了统一。看似没有关联的数字，但他们之间存在着这样的联系，就这一个简单的公式就能把数学中最常用的五个数学符号给统一起来了，不得不服气。</p>\n<h4 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h4><p>阶乘我们都很熟悉，也都知道该怎么去计算阶乘，公式很简单：<br>$$<br>N!&#x3D;1×2×3×…×(N-1)×N<br>$$<br>如果我们想计算1000！的阶乘呢？对于程序员来说，总是想到用代码去实习，代码大致这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        j *= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是对于1000！这样一个很大数，最终得到的结果是很大的，对于这样的代码的话，int绝对已经满足不了了，哪怕是long,long long int,但是暂且不考虑数据类型的容量。计算机在计算的时候，过程中会进行大量的运算，消耗了大量的性能，但我们最终只是需要一个结果值，而过程中的数据就变得不那么重要了，那么有没有简单的计算方式呢？当然有！又是一个神奇的公式：<br>$$<br>N!\\approx \\sqrt{2\\pi N} ( \\frac N　e)^N<br>$$<br>代码变成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=(<span class=\"type\">int</span>)(log10((<span class=\"number\">2</span>*PI*n))/<span class=\"number\">2</span>+n*log10((n/e))+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样的代码相对而言计算的性能会小很多，虽然公式只是取到一个近似值，误差值在N越大的时候误差越小，在N&#x3D;1000的时候与真实数据的误差已经小于0.01%了，这对于进行大数据很有帮助。</p>\n<h5 id=\"对于0的阶乘等于1的疑问\"><a href=\"#对于0的阶乘等于1的疑问\" class=\"headerlink\" title=\"对于0的阶乘等于1的疑问\"></a>对于0的阶乘等于1的疑问</h5><p>书中关于0的阶乘的证明有个疑问，通过公式:<br>$$<br>N!&#x3D;N*(N-1)!<br>$$<br>N为自然数大于等于0</p>\n<p>因为1！&#x3D;1，根据公式有:<br>$$<br>1!&#x3D;1*0!<br>$$<br>推出0！&#x3D;1，这样看似乎没有问题</p>\n<p>然而将N&#x3D;0再带入公式:<br>$$<br>0!&#x3D; 0*(-1)!<br>$$<br>左边等于1，右边由于0乘以任何数都为0的情况下那么右边为0,左右则矛盾冲突了，那么利用N!&#x3D;N*(N-1)!来推导0！就有一定的局限性。</p>\n<h4 id=\"非传递性骰子\"><a href=\"#非传递性骰子\" class=\"headerlink\" title=\"非传递性骰子\"></a>非传递性骰子</h4><p>对于上面的内容的话，都是一些比较纯数学公式的，但这一节的内容好像与我们的生活有那么一些关系的，说实话这一节真的有点出人意料的，让我有一种怀疑人生的感觉。现在有三颗骰子A B C，每颗骰子上面的数字并不是 1 2 3 4 5 6，而是一些特定的数字比如我们定义这样三个骰子，有六面，每一面有不同的数字，三个骰子的数字都不一样，如下图</p>\n<table>\n<thead>\n<tr>\n<th>骰子</th>\n<th>一</th>\n<th>二</th>\n<th>三</th>\n<th>四</th>\n<th>五</th>\n<th>六</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>12</td>\n<td>16</td>\n<td>17</td>\n</tr>\n<tr>\n<td>B</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n<td>18</td>\n</tr>\n<tr>\n<td>C</td>\n<td>1</td>\n<td>10</td>\n<td>12</td>\n<td>13</td>\n<td>14</td>\n<td>15</td>\n</tr>\n</tbody></table>\n<p>如果让你选这三个骰子中的一个去参与“赌博”，你会选哪一个呢？对于A骰子和B骰子，通过列表格我们可以知道：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>12</th>\n<th>16</th>\n<th>17</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n</tr>\n<tr>\n<td>6</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n</tr>\n<tr>\n<td>7</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n</tr>\n<tr>\n<td>8</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n</tr>\n<tr>\n<td>9</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>A</td>\n<td>A</td>\n<td>A</td>\n</tr>\n<tr>\n<td>18</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n<td>B</td>\n</tr>\n</tbody></table>\n<p>可以知道A获胜的概率也就是 15&#x2F;36 约等于 42%，B赢的概率会是：58%。 那么你肯定会选择B，因为它赢的概率会大一点。我们用相同的手段处理骰子B和C得到的的数据：B赢的概率是 11&#x2F;36 约等于 31%，C赢的概率是25&#x2F;36约等于 百分之69。那么你肯定会选择骰子C。</p>\n<p>好像在这样的三个骰子里面，A“最差”，C“最好”，然而对于A和C，C赢的概率真的会高一些么？！如果你继续通过上面列表格的方式你会发现，A和C比较的话，A赢的概率是 21&#x2F;36约等于 58%，C赢的概率是15&#x2F;36约等于42%。</p>\n<p>相信你如果不是有对概率论有学习过的话，一上来肯定是不相信的，然而事实就是这样的。这是因为A与B、B与C、A与C相互之间的比较产生的<strong>基本事件空间</strong>是不一样的，比如A和B比较是(2,5)(2,6)等36个基本事件，A和C又是另外36个基本事件，所以这个概率大小也不具有传递性。</p>\n<h5 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h5><p>对于这本书，我本以为会介绍这个的方程：<br>$$<br>r &#x3D;a( 1 - sin θ)<br>$$<br>因为这个方程有一个美丽的图形，而方程背后又有一个美丽的故事，感觉内容太适合这本书了，不知道为什么没有加入进去。</p>\n<p>总之这本书大部分内容都是初等数学相关的知识，看起来并不是特别的费劲，但是很多平常有经常用过的数或者公式都有其深深的内涵所在，当你对其中的原理证明进行了相关的了解之后，你会发出感叹，原来数学是如此的有趣美丽。</p>\n","raw":"title: 《美丽的数学》-有趣的数学\nauthor: 落叶挽歌\nthumbnail: 'https://cdn.pixabay.com/photo/2015/11/15/07/47/geometry-1044090_1280.jpg'\ntags:\n  - 数学\ncategories:\n  - 读书电影\ndate: 2020-07-25 23:07:00\n---\n\n数学有趣而美妙。书名《美丽的数学》，封面设计得非常的棒，简单优美的线条组合组成了这一蜗牛壳形状，让我们还没有翻开书就已经看到了数学的美丽。这本书看的时间不太长，因为有很多内容已经比较熟悉了，比如斐波那契数列、费马、概率相关。不过更很多内容，让人很着迷。\n\n#### 一个奇迹般的等式\n\n我们都知道数学中有这样几个数字：\n$$\n\\pi  \\ \\ \\ e  \\ \\  i\n$$\n但你可知道他们之间也有一个等式关系：\n$$\ne^{i\\pi} + 1 = 0\n$$\n这个方程真的很震撼，有一种得到“统一”的感觉，就像麦克斯韦[电磁理论](https://baike.baidu.com/item/电磁理论)建立以后，光学也变成了电磁学的一个分支了，电学、磁学和光学得到了统一。看似没有关联的数字，但他们之间存在着这样的联系，就这一个简单的公式就能把数学中最常用的五个数学符号给统一起来了，不得不服气。\n\n#### 阶乘\n\n阶乘我们都很熟悉，也都知道该怎么去计算阶乘，公式很简单：\n$$\nN!=1×2×3×...×(N-1)×N\n$$\n如果我们想计算1000！的阶乘呢？对于程序员来说，总是想到用代码去实习，代码大致这样：\n\n```java\nint factorial(int n){\n    for (i = 1; i <= n; i++) {\n        j *= i;\n    }\n   return j;\n}\n```\n\n但是对于1000！这样一个很大数，最终得到的结果是很大的，对于这样的代码的话，int绝对已经满足不了了，哪怕是long,long long int,但是暂且不考虑数据类型的容量。计算机在计算的时候，过程中会进行大量的运算，消耗了大量的性能，但我们最终只是需要一个结果值，而过程中的数据就变得不那么重要了，那么有没有简单的计算方式呢？当然有！又是一个神奇的公式：\n$$\nN!\\approx \\sqrt{2\\pi N} ( \\frac N　e)^N\n$$\n代码变成：\n\n```java\nans=(int)(log10((2*PI*n))/2+n*log10((n/e))+1);\n```\n\n这样的代码相对而言计算的性能会小很多，虽然公式只是取到一个近似值，误差值在N越大的时候误差越小，在N=1000的时候与真实数据的误差已经小于0.01%了，这对于进行大数据很有帮助。\n\n##### 对于0的阶乘等于1的疑问\n\n书中关于0的阶乘的证明有个疑问，通过公式:\n$$\nN!=N*(N-1)!\n$$\nN为自然数大于等于0\n\n因为1！=1，根据公式有:  \n$$\n1!=1*0!\n$$\n推出0！=1，这样看似乎没有问题\n\n然而将N=0再带入公式: \n$$\n0!= 0*(-1)!\n$$\n左边等于1，右边由于0乘以任何数都为0的情况下那么右边为0,左右则矛盾冲突了，那么利用N!=N*(N-1)!来推导0！就有一定的局限性。\n\n#### 非传递性骰子\n\n对于上面的内容的话，都是一些比较纯数学公式的，但这一节的内容好像与我们的生活有那么一些关系的，说实话这一节真的有点出人意料的，让我有一种怀疑人生的感觉。现在有三颗骰子A B C，每颗骰子上面的数字并不是 1 2 3 4 5 6，而是一些特定的数字比如我们定义这样三个骰子，有六面，每一面有不同的数字，三个骰子的数字都不一样，如下图\n\n| 骰子 | 一   | 二   | 三   | 四   | 五   | 六   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| A    | 2    | 3    | 4    | 12   | 16   | 17   |\n| B    | 5    | 6    | 7    | 8    | 9    | 18   |\n| C    | 1    | 10   | 12   | 13   | 14   | 15   |\n\n如果让你选这三个骰子中的一个去参与“赌博”，你会选哪一个呢？对于A骰子和B骰子，通过列表格我们可以知道：\n\n|      | 2    | 3    | 4    | 12   | 16   | 17   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 5    | B    | B    | B    | A    | A    | A    |\n| 6    | B    | B    | B    | A    | A    | A    |\n| 7    | B    | B    | B    | A    | A    | A    |\n| 8    | B    | B    | B    | A    | A    | A    |\n| 9    | B    | B    | B    | A    | A    | A    |\n| 18   | B    | B    | B    | B    | B    | B    |\n\n可以知道A获胜的概率也就是 15/36 约等于 42%，B赢的概率会是：58%。 那么你肯定会选择B，因为它赢的概率会大一点。我们用相同的手段处理骰子B和C得到的的数据：B赢的概率是 11/36 约等于 31%，C赢的概率是25/36约等于 百分之69。那么你肯定会选择骰子C。\n\n好像在这样的三个骰子里面，A“最差”，C“最好”，然而对于A和C，C赢的概率真的会高一些么？！如果你继续通过上面列表格的方式你会发现，A和C比较的话，A赢的概率是 21/36约等于 58%，C赢的概率是15/36约等于42%。\n\n相信你如果不是有对概率论有学习过的话，一上来肯定是不相信的，然而事实就是这样的。这是因为A与B、B与C、A与C相互之间的比较产生的**基本事件空间**是不一样的，比如A和B比较是(2,5)(2,6)等36个基本事件，A和C又是另外36个基本事件，所以这个概率大小也不具有传递性。\n\n\n##### 最后\n\n对于这本书，我本以为会介绍这个的方程：\n$$\nr =a( 1 - sin θ)\n$$\n因为这个方程有一个美丽的图形，而方程背后又有一个美丽的故事，感觉内容太适合这本书了，不知道为什么没有加入进去。\n\n\n\n总之这本书大部分内容都是初等数学相关的知识，看起来并不是特别的费劲，但是很多平常有经常用过的数或者公式都有其深深的内涵所在，当你对其中的原理证明进行了相关的了解之后，你会发出感叹，原来数学是如此的有趣美丽。\n\n\n\n","categories":[{"name":"读书电影","api":"api/categories/movie.json"}],"tags":[{"name":"数学","api":"api/tags/数学.json"}]},"api":"api/posts/2020/07/25/《美丽的数学》-有趣的数学.json"}