{"data":{"title":"想统计自己总共提交了多少行代码？","slug":"想统计自己总共提交了多少行代码？","description":"","date":"2020-03-02T03:01:00.000Z","updated":"2025-05-20T11:46:57.000Z","language":"zh-CN","comments":true,"url":"2020/03/02/想统计自己总共提交了多少行代码？/","cover":null,"images":[],"content":"<p>作为一名程序员，我们很想知道自己到底提交了多少行代码到远程仓库，有没有什么工具能够帮我们统计自己写过的代码行数呢？答案是有的。</p>\n<p>这是本次实现的最终效果:</p>\n<img width=\"60%\" src=\"https://cdn.julis.wang/blog/img/20200301170230101.png\">\n\n<h2 id=\"统计代码行数的方式\"><a href=\"#统计代码行数的方式\" class=\"headerlink\" title=\"统计代码行数的方式\"></a>统计代码行数的方式</h2><p>对于代码提交行数统计，通过git 的系统命令就能做到，如下代码所示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --author=<span class=\"string\">&#x27;username&#x27;</span> --pretty=tformat: --numstat | awk <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &#123;add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加了%s,删除了%s,合计%s\\n&quot;, add, subs, loc &#125;&#x27;</span> -</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p>只需要在如下命令输入自己的username就行了，效果如图所示·</p>\n<img src=\"https://cdn.julis.wang/blog/img/20200301170616289.png\">\n\n<p>但是有的人由于环境原因，为了区分一些环境，比如办公司叫：username.office 在家的电脑上叫做: user.home 诸如此类，难道得手动一个一个统计么？当然不行了。</p>\n<p>众所周知，由于工程项目变得更越来越大，拆库也说见不鲜，于是自己的代码分布不同的项目工程，我们想要利用git的统计命令的话就有点吃力了，需要一个一个地进入相应目录进行命令输入？当然不行了。</p>\n<p>今天自己写了一份脚本主要用于统计分布在某个文件夹下所有的代码提交行数，git开源地址：<a href=\"https://github.com/VomPom/ForFun\">https://github.com/VomPom/ForFun</a>源码如下</p>\n<p>如何使用？</p>\n<p>0、将自己需要统计的项目文件目录整理到一个文件夹</p>\n<p>1、讲users_name换成自己的的用户名</p>\n<p>2、由于文件夹下可能有一些例外的不需要统计，添加该文件夹名</p>\n<p>3、讲该shell脚本移动到某个名录下</p>\n<p>4、最后利用 sh codeLine.sh 执行命令</p>\n<img width=\"60%\" src=\"https://cdn.julis.wang/blog/img/20200301171856190.png\">\n<img width=\"60%\" src=\"https://cdn.julis.wang/blog/img/20200301172119336.png\">\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Created by https://julis.wang on 2020/02/28</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Description : 统计代码提交行数</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这里添加你的git常用用户名。考虑到每个人的账号可能有很多个，所以定义成数组</span></span><br><span class=\"line\">users_name=(<span class=\"string\">&quot;julis&quot;</span> <span class=\"string\">&quot;julis.wang&quot;</span> <span class=\"string\">&quot;julis.wang.hp&quot;</span>)      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#过滤一些不需要去遍历的文件夹</span></span><br><span class=\"line\">filter_path=(<span class=\"string\">&quot;Backend&quot;</span> <span class=\"string\">&quot;test&quot;</span> <span class=\"string\">&quot;sdk&quot;</span> <span class=\"string\">&quot;fork&quot;</span> <span class=\"string\">&quot;ArProject&quot;</span>)     </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 以下代码不需动                       </span></span><br><span class=\"line\"><span class=\"comment\">########################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> index=0             \t\t\t<span class=\"comment\">#记录当前的位置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> add_line_count=0             <span class=\"comment\">#添加的line总行数</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> remove_line_count=0          <span class=\"comment\">#删除的总行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> array_git_repositories=()    <span class=\"comment\">#用于记录仓库名</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> add_code=()                  <span class=\"comment\">#记录所有用户对某个库的添加的行数</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> remove_code=()               <span class=\"comment\">#记录所有用户对某个库的删除的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是否需要过滤该目录</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">is_fileter_dir</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;!filter_path[@]&#125;</span>&quot;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">&quot;<span class=\"variable\">$&#123;filter_path[$i]&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">return</span> 1</span><br><span class=\"line\">\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#对命令执行的返回值进行数据切割</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">get_add_remove_count</span></span>() &#123;</span><br><span class=\"line\">\tstring=<span class=\"variable\">$1</span></span><br><span class=\"line\">\tarray=(<span class=\"variable\">$&#123;string//,/ &#125;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;array[0]&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \t\tadd_line=0</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">  \t\tadd_line=<span class=\"variable\">$&#123;array[0]&#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;array[1]&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \t\tremove_line=0</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">  \t\tremove_line=<span class=\"variable\">$&#123;array[1]&#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;add_code[$index]&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \t\tadd_code[<span class=\"variable\">$index</span>]=0</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;remove_code[$index]&#125;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  \t\tremove_code[<span class=\"variable\">$index</span>]=0</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\tremove_code[<span class=\"variable\">$index</span>]=`<span class=\"built_in\">expr</span> <span class=\"variable\">$&#123;remove_code[$index]&#125;</span> + <span class=\"variable\">$remove_line</span>`</span><br><span class=\"line\">\tadd_code[<span class=\"variable\">$index</span>]=`<span class=\"built_in\">expr</span> <span class=\"variable\">$&#123;add_code[$index]&#125;</span> + <span class=\"variable\">$add_line</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;用户&quot;</span><span class=\"variable\">$2</span><span class=\"string\">&quot;添加了=&quot;</span><span class=\"variable\">$add_line</span><span class=\"string\">&quot;行 删除了&quot;</span><span class=\"variable\">$add_line</span><span class=\"string\">&quot;行&quot;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#获取该用户在该文件夹下的提交代码数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">get_user_line</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># output分别去接收 该文件夹下的提交以及删除行数</span></span><br><span class=\"line\">\toutput=$(git <span class=\"built_in\">log</span> --author=<span class=\"variable\">$&#123;1&#125;</span> --pretty=tformat: --numstat | awk <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &#123;add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加了%s,删除了%s,合计%s\\n&quot;, add, subs, loc &#125;&#x27;</span> -)</span><br><span class=\"line\">\tget_add_remove_count <span class=\"variable\">$output</span> <span class=\"variable\">$&#123;1&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#遍历每个用户名</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">trans_every_user</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;!users_name[@]&#125;</span>&quot;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tget_user_line <span class=\"string\">&quot;<span class=\"variable\">$&#123;users_name[$i]&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 整体流程，从文件夹出发</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> `<span class=\"built_in\">ls</span> -l $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$0</span>)|awk -F <span class=\"string\">&quot; &quot;</span> <span class=\"string\">&#x27;&#123;print $9&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -d <span class=\"variable\">$path</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        is_fileter_dir <span class=\"variable\">$path</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ $? == 1 ]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;=========过滤了【&quot;</span><span class=\"variable\">$path</span><span class=\"string\">&quot;】======&gt;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;=========获取【&quot;</span><span class=\"variable\">$path</span><span class=\"string\">&quot;】的Git代码提交数据======&gt;&quot;</span></span><br><span class=\"line\">\t\t\tindex=<span class=\"variable\">$&#123;#array_git_repositories[@]&#125;</span> <span class=\"comment\">#用于记录当前在第几个文件夹下处理</span></span><br><span class=\"line\">            array_git_repositories=(<span class=\"variable\">$&#123;array_git_repositories[@]&#125;</span> <span class=\"variable\">$path</span>)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            <span class=\"built_in\">cd</span> <span class=\"variable\">$path</span></span><br><span class=\"line\">            trans_every_user</span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">all_add_line=0</span><br><span class=\"line\">all_remove_line=0</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;===============================================================================&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;                  本次共统计了【&quot;</span><span class=\"variable\">$&#123;#array_git_repositories[@]&#125;</span><span class=\"string\">&quot;】个仓库   by julis.wang      &quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;===============================================================================&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%-30s %10s %10s %10s\\n&quot;</span> <span class=\"string\">&quot;Folder&quot;</span> <span class=\"string\">&quot;Add&quot;</span> <span class=\"string\">&quot;Remove&quot;</span> <span class=\"string\">&quot;All&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-------------------------------------------------------------------------------&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=<span class=\"number\">0</span>;i&lt;<span class=\"variable\">$&#123;#array_git_repositories[@]&#125;</span>;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\tall_add_line=`<span class=\"built_in\">expr</span> <span class=\"variable\">$all_add_line</span> + <span class=\"variable\">$&#123;add_code[$i]&#125;</span>`</span><br><span class=\"line\">\tall_remove_line=`<span class=\"built_in\">expr</span> <span class=\"variable\">$all_remove_line</span> + <span class=\"variable\">$&#123;remove_code[$i]&#125;</span>`</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> <span class=\"string\">&quot;%-30s %10s %10s %10s\\n&quot;</span> <span class=\"variable\">$&#123;array_git_repositories[$i]&#125;</span> <span class=\"variable\">$&#123;add_code[$i]&#125;</span> <span class=\"variable\">$&#123;remove_code[$i]&#125;</span> `<span class=\"built_in\">expr</span> <span class=\"variable\">$&#123;add_code[$i]&#125;</span> - <span class=\"variable\">$&#123;remove_code[$i]&#125;</span>`</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-------------------------------------------------------------------------------&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;%-30s %10s %10s %10s\\n&quot;</span> <span class=\"string\">&quot;Total&quot;</span> <span class=\"variable\">$all_add_line</span> <span class=\"variable\">$all_remove_line</span> `<span class=\"built_in\">expr</span> <span class=\"variable\">$all_add_line</span> - <span class=\"variable\">$all_remove_line</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;===============================================================================&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>写在最后：<br>由于本人不太擅长编写shell脚本，所有其中的代码实现方式可能比较粗糙，望理解。</p>\n","raw":"title: 想统计自己总共提交了多少行代码？\nauthor: 落叶挽歌\nthumbnail: 'https://cdn.pixabay.com/photo/2016/03/09/09/17/computer-1245714_960_720.jpg'\ntags:\n  - Shell\ncategories:\n  - 技术文章\ndate: 2020-03-02 11:01:00\n---\n作为一名程序员，我们很想知道自己到底提交了多少行代码到远程仓库，有没有什么工具能够帮我们统计自己写过的代码行数呢？答案是有的。\n\n\n这是本次实现的最终效果:\n\n\n{% qnimg 20200301170230101.png width:60% %}\n\n## 统计代码行数的方式\n对于代码提交行数统计，通过git 的系统命令就能做到，如下代码所示\n\n```bash\ngit log --author='username' --pretty=tformat: --numstat | awk '\n    {add += $1; subs += $2; loc += $1 - $2 } END { printf \"添加了%s,删除了%s,合计%s\\n\", add, subs, loc }' -\n\t\n```\n\n只需要在如下命令输入自己的username就行了，效果如图所示·\n\n{% qnimg 20200301170616289.png %}\n\n但是有的人由于环境原因，为了区分一些环境，比如办公司叫：username.office 在家的电脑上叫做: user.home 诸如此类，难道得手动一个一个统计么？当然不行了。\n\n众所周知，由于工程项目变得更越来越大，拆库也说见不鲜，于是自己的代码分布不同的项目工程，我们想要利用git的统计命令的话就有点吃力了，需要一个一个地进入相应目录进行命令输入？当然不行了。\n\n今天自己写了一份脚本主要用于统计分布在某个文件夹下所有的代码提交行数，git开源地址：[https://github.com/VomPom/ForFun](https://github.com/VomPom/ForFun)源码如下\n\n如何使用？\n\n0、将自己需要统计的项目文件目录整理到一个文件夹\n\n1、讲users_name换成自己的的用户名\n\n2、由于文件夹下可能有一些例外的不需要统计，添加该文件夹名\n\n3、讲该shell脚本移动到某个名录下\n\n4、最后利用 sh codeLine.sh 执行命令\n\n{% qnimg 20200301171856190.png width:60% %}\n{% qnimg 20200301172119336.png width:60% %}\n```bash\n########################################################\n#\n# Created by https://julis.wang on 2020/02/28\n#\n# Description : 统计代码提交行数\n#\n########################################################\n\n#!/bin/bash\n\n#这里添加你的git常用用户名。考虑到每个人的账号可能有很多个，所以定义成数组\nusers_name=(\"julis\" \"julis.wang\" \"julis.wang.hp\")      \n\n#过滤一些不需要去遍历的文件夹\nfilter_path=(\"Backend\" \"test\" \"sdk\" \"fork\" \"ArProject\")     \n\n\n\n\n########################################################\n# 以下代码不需动                       \n########################################################\n\nexport index=0             \t\t\t#记录当前的位置\nexport add_line_count=0             #添加的line总行数\nexport remove_line_count=0          #删除的总行数\n\nexport array_git_repositories=()    #用于记录仓库名\nexport add_code=()                  #记录所有用户对某个库的添加的行数\nexport remove_code=()               #记录所有用户对某个库的删除的行数\n\n#判断是否需要过滤该目录\nfunction is_fileter_dir() {\n\tfor i in \"${!filter_path[@]}\"; do\n\t\tif [ $1 == \"${filter_path[$i]}\" ]; then\n\t\t\treturn 1\n\t\tfi\n\tdone\n\treturn 0\n}\n#对命令执行的返回值进行数据切割\nfunction get_add_remove_count() {\n\tstring=$1\n\tarray=(${string//,/ })\n\tif [ ! ${array[0]} ]; then\n  \t\tadd_line=0\n\telse\n  \t\tadd_line=${array[0]}\n\tfi\n\t\n\tif [ ! ${array[1]} ]; then\n  \t\tremove_line=0\n\telse\n  \t\tremove_line=${array[1]}\n\tfi\n\n\tif [ ! ${add_code[$index]} ]; then\n  \t\tadd_code[$index]=0\n\t\n\tfi\n\tif [ ! ${remove_code[$index]} ]; then\n  \t\tremove_code[$index]=0\n\t\n\tfi\n\tremove_code[$index]=`expr ${remove_code[$index]} + $remove_line`\n\tadd_code[$index]=`expr ${add_code[$index]} + $add_line`\n\n\techo \"用户\"$2\"添加了=\"$add_line\"行 删除了\"$add_line\"行\"\n\t\n}\n#获取该用户在该文件夹下的提交代码数\nfunction get_user_line() {\n\t# output分别去接收 该文件夹下的提交以及删除行数\n\toutput=$(git log --author=${1} --pretty=tformat: --numstat | awk '\n    {add += $1; subs += $2; loc += $1 - $2 } END { printf \"添加了%s,删除了%s,合计%s\\n\", add, subs, loc }' -)\n\tget_add_remove_count $output ${1}\n}\n\n#遍历每个用户名\nfunction trans_every_user() {\n\tfor i in \"${!users_name[@]}\"; do\n\t\tget_user_line \"${users_name[$i]}\"\n\tdone\n\tcd ..\n}\n\n# 整体流程，从文件夹出发\nfor path in `ls -l $(dirname $0)|awk -F \" \" '{print $9}'`\ndo\n    if [ -d $path ]\n    then\n        is_fileter_dir $path\n        if [ $? == 1 ]\n        then\n            echo \"<=========过滤了【\"$path\"】======>\"\n            else\n            echo \"<=========获取【\"$path\"】的Git代码提交数据======>\"\n\t\t\tindex=${#array_git_repositories[@]} #用于记录当前在第几个文件夹下处理\n            array_git_repositories=(${array_git_repositories[@]} $path)\n\t\t\t\n            cd $path\n            trans_every_user\n        fi\n    fi\ndone\nall_add_line=0\nall_remove_line=0\necho '==============================================================================='\necho \"                  本次共统计了【\"${#array_git_repositories[@]}\"】个仓库   by julis.wang      \"\necho '==============================================================================='\nprintf \"%-30s %10s %10s %10s\\n\" \"Folder\" \"Add\" \"Remove\" \"All\"\necho '-------------------------------------------------------------------------------'\nfor ((i=0;i<${#array_git_repositories[@]};i++))\ndo\n\tall_add_line=`expr $all_add_line + ${add_code[$i]}`\n\tall_remove_line=`expr $all_remove_line + ${remove_code[$i]}`\n\tprintf \"%-30s %10s %10s %10s\\n\" ${array_git_repositories[$i]} ${add_code[$i]} ${remove_code[$i]} `expr ${add_code[$i]} - ${remove_code[$i]}`\ndone\necho '-------------------------------------------------------------------------------'\nprintf \"%-30s %10s %10s %10s\\n\" \"Total\" $all_add_line $all_remove_line `expr $all_add_line - $all_remove_line`\necho '==============================================================================='\n\n```\n写在最后：\n由于本人不太擅长编写shell脚本，所有其中的代码实现方式可能比较粗糙，望理解。\n\n\n\n\n\n\n\n","categories":[{"name":"技术文章","api":"api/categories/technology.json"}],"tags":[{"name":"Shell","api":"api/tags/Shell.json"}]},"api":"api/posts/2020/03/02/想统计自己总共提交了多少行代码？.json"}