{"data":{"title":"[译]软件开发人员的常青技能","slug":"软件开发人员的常青技能","description":"","date":"2024-07-08T23:27:19.000Z","updated":"2025-05-20T11:46:57.000Z","language":"zh-CN","comments":true,"url":"2024/07/09/软件开发人员的常青技能/","cover":null,"images":[],"content":"<p>最近在 Github 看到这一篇将程序员一直需要使用的非技术核心能力进行了总结，深受里面内容的启发，语言、框架都是会过时的，但有些技能无论是什么语言或者框架都是通用的，如果要在这个行业持续深根，那么这些非技术能力是必备的且实用的。本文在原文上进行翻译，并对文中提到部分专业术语进行了解释，以及对指向外部链接的文档内容作了一些简单的概述，希望能帮助到查看此文档的人。</p>\n<p>原文地址：<a href=\"https://github.com/romenrg/evergreen-skills-developers.git\">evergreen-skills-developers</a></p>\n<p>中英双文地址：<a href=\"https://github.com/VomPom/evergreen-skills-developers/blob/master/README_en_cn.md\">[译]evergreen-skills-developers</a></p>\n<h2 id=\"原文翻译：\"><a href=\"#原文翻译：\" class=\"headerlink\" title=\"原文翻译：\"></a>原文翻译：</h2><p>这个仓库包括了一份“常青技能”清单，这份清单应该可以作为对技术精湛的软件工程师&#x2F;开发者客观评价。</p>\n<p>这份工作的是为了在招聘软件开发者&#x2F;工程师时，提供一个替代的技术面试的方案。文档关注的是软开发最佳实践、跨框架原则和通用的技能；而不是我们在行业中经常看到的语言层面，或者特定技术框架的内容。</p>\n<p>编程语言不断进化，公司也不断改变他们的技术栈，框架很快就会过时，有经验的工程师使用搜索引擎能在几分钟就能解决语法相关的问题。因此，在面试候选人时关注这些方面是否有意义呢？</p>\n<p>另一方面，技术框架以外的原理和非技术的技能是在谷歌上查不到的，这些技能是“常青”的，并且对工程师的表现有巨大的影响。这些更能反映出软件开发者&#x2F;工程师为团队带来的真正价值。</p>\n<p>这个仓库是基于以下文章的一个衍生作品：”<a href=\"https://www.romenrg.com/blog/2018/12/29/what-makes-a-great-software-engineer\">是什么造就了一位伟大的软件工程师</a>“。</p>\n<p>这是一个正在进行中的工作。重要的知识可能缺失，现有的条目可能可以改进，更好的分组策略也可能被发现。因此，任何贡献（即PR或问题）都是受欢迎的。请随时按照<a href=\"https://gptx.woa.com/CONTRIBUTING.md\">贡献指南</a>提出修改建议。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%8A%80%E8%83%BD\">非技术技能</a></p>\n<ul>\n<li><a href=\"#%E6%A0%B8%E5%BF%83%E6%8A%80%E8%83%BD%EF%BC%88%E5%8F%88%E7%A7%B0%E2%80%9C%E8%BD%AF%E6%8A%80%E8%83%BD%E2%80%9D%EF%BC%89\">核心技能</a><ul>\n<li><a href=\"#%E4%BA%A4%E6%B5%81\">交流</a></li>\n<li><a href=\"#%E5%9B%A2%E9%98%9F\">团队</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%88%9B%E6%96%B0%E5%92%8C%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD\">创新和自我管理技能</a><ul>\n<li><a href=\"#%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\">开发流程</a></li>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%83%BD%E5%8A%9B\">问题解决能力</a></li>\n<li><a href=\"#%E5%BF%83%E6%80%81\">心态</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E6%8A%80%E8%83%BD%E8%83%BD%E5%8A%9B\">技能能力</a></p>\n<ul>\n<li><a href=\"#%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF%E8%83%BD%E5%8A%9B\">通用技术能力</a></li>\n<li><a href=\"#%E7%BC%96%E7%A8%8B%E5%87%86%E5%88%99\">编程准则</a><ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">数据结构</a> </li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81\">代码整洁</a></li>\n<li><a href=\"#%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86\">源码管理</a></li>\n<li><a href=\"#%E6%8A%80%E6%9C%AF%E5%90%88%E4%BD%9C\">技术合作</a></li>\n<li><a href=\"#DevOps%E5%AE%9E%E8%B7%B5\">DevOps实践</a></li>\n<li><a href=\"%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86\">通用技术知识</a><ul>\n<li><a href=\"#%E8%AF%AD%E8%A8%80%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86\">语言理论知识</a></li>\n<li><a href=\"#%E4%BC%98%E5%8C%96\">优化</a></li>\n<li><a href=\"#%E5%B9%B6%E5%8F%91\">并发</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E7%89%B9%E5%AE%9A%E9%A2%86%E5%9F%9F%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86\">特定领域技术知识</a></p>\n<ul>\n<li><p><a href=\"#%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91\">前端开发</a></p>\n</li>\n<li><p><a href=\"#%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91\">后端开发</a></p>\n</li>\n<li><p><a href=\"#%E6%9E%B6%E6%9E%84\">架构</a></p>\n</li>\n<li><p><a href=\"#%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE\">基础建设</a></p>\n</li>\n<li><p><a href=\"#%E5%AE%89%E5%85%A8\">安全</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"非技术技能\"><a href=\"#非技术技能\" class=\"headerlink\" title=\"非技术技能\"></a>非技术技能</h2><p>以下非技术能力可能是开发者最重要的能力。尽管一个人可能具备很强的技术能力，但在公司中没有良好的沟通、团队合作态度、开发流程、解决问题的能力和学习的心态的话，一切会变得非常糟糕。</p>\n<h3 id=\"核心技能（又称“软技能”）\"><a href=\"#核心技能（又称“软技能”）\" class=\"headerlink\" title=\"核心技能（又称“软技能”）\"></a>核心技能（又称“软技能”）</h3><h4 id=\"交流\"><a href=\"#交流\" class=\"headerlink\" title=\"交流\"></a>交流</h4><ul>\n<li>遵循邮件使用的最佳策略(例： <a href=\"https://www.grammarly.com/blog/email-etiquette-rules-to-know/\">some e-mail etiquette rules</a>)</li>\n</ul>\n<ul>\n<li><p>遵循沟通的最佳策略 (e.g. <a href=\"https://slack.com/intl/en-es/help/articles/115000769927-Use-threads-to-organize-discussions-\">use threads to organize discussions</a> and <a href=\"https://blog.rescuetime.com/slack-focus-guide/\">other best-practices from Slack</a>)</p>\n<p>两份链接指向的 slack 的一则使用文档和一份 slack 使用技巧文档</p>\n</li>\n<li><p><a href=\"https://jaxenter.com/aaaand-gone-true-cost-interruptions-128741.html\">最小化干扰</a></p>\n<p>链接指向的文章是一篇关于程序员在工作中，因被其他事项而中断程序开发的影响，一般人，在工作过程中断打扰后大约需要23分钟才能恢复到之前的状态，而程序员需要更久，文中强调了工作中断对程序员工作效率和心情的影响，并讨论了有计划和非计划性中断的不同影响。</p>\n</li>\n<li><p>保持礼貌</p>\n</li>\n</ul>\n<h4 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h4><ul>\n<li><p><a href=\"https://simpleprogrammer.com/empathy-software-developers\">练习同理心</a></p>\n</li>\n<li><p>保持谦逊和低调</p>\n</li>\n<li><p>做一个积极倾听的人</p>\n</li>\n<li><p>做一个好的导师</p>\n</li>\n<li><p>知识分享</p>\n</li>\n<li><p>得有见地</p>\n</li>\n</ul>\n<h3 id=\"创新和自我管理技能\"><a href=\"#创新和自我管理技能\" class=\"headerlink\" title=\"创新和自我管理技能\"></a>创新和自我管理技能</h3><h4 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h4><ul>\n<li><p>了解<a href=\"https://agilemanifesto.org/principles.html\">《敏捷开发原则》</a></p>\n</li>\n<li><p>适应迭代和增量开发</p>\n</li>\n<li><p>自组织的能力</p>\n<p>指的是个体或系统能够自发地、无需外部强制指挥，根据内部规则和相互作用来组织自身结构和行为的能力。这种能力在多个层面都有体现，包括个人自我管理、团队协作以及更广泛的社会和生态系统</p>\n</li>\n<li><p>避免产生错误的预估（比如：工时预估）</p>\n</li>\n<li><p>关注优先级和业务价值</p>\n</li>\n</ul>\n<h4 id=\"问题解决能力\"><a href=\"#问题解决能力\" class=\"headerlink\" title=\"问题解决能力\"></a>问题解决能力</h4><ul>\n<li><p>使用科学方法(<a href=\"https://en.wikipedia.org/wiki/Scientific_method\">Scientific Method</a>)</p>\n<blockquote>\n<p>科学方法是一种有系统地寻求知识的程序，涉及了以下三个步骤：问题的认知与表述、实验数据的收集、假说的构成与测试。</p>\n</blockquote>\n</li>\n<li><p>检索能力</p>\n</li>\n<li><p>横向思维</p>\n<blockquote>\n<p>横向思维，指使用间接的、具有创造力的、不是一望而知的推理方式来解决问题</p>\n</blockquote>\n</li>\n<li><p>抽象化能力</p>\n</li>\n<li><p>创造力</p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/5_Whys\">五问法</a></p>\n<blockquote>\n<p>五问法关键所在就是，鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，从结果着手，沿着因果关系链条，顺藤摸瓜，穿越不同的抽象层面，直至找出原有问题的根本原因。简而言之，就是鼓励解决问题的人要有“打破砂锅问到底”的精神。</p>\n</blockquote>\n</li>\n<li><p>风险管理</p>\n</li>\n</ul>\n<h4 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h4><ul>\n<li><p>不要害怕变化</p>\n</li>\n<li><p>敢于失败</p>\n</li>\n<li><p>终生学习</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Critical_thinking\">批判性思维</a> （保持理性，质疑决定，“让事实说话”）</p>\n</li>\n</ul>\n<h2 id=\"技能能力\"><a href=\"#技能能力\" class=\"headerlink\" title=\"技能能力\"></a>技能能力</h2><h3 id=\"通用技术能力\"><a href=\"#通用技术能力\" class=\"headerlink\" title=\"通用技术能力\"></a>通用技术能力</h3><p>有一些技术知识是永恒的，对任何软件工程师都有关，尽管他们将要从事的具体领域各不相同。为了深入了解他们的资历并了解他们的工程实践有多扎实，你可以和他们就编程原理、数据结构、清晰的代码、源代码管理、技术协作或者DevOps实践等主题进行交谈。如果这些基础扎实，他们可能能够毫无问题地学习你们特定领域的东西。</p>\n<h4 id=\"编程准则\"><a href=\"#编程准则\" class=\"headerlink\" title=\"编程准则\"></a>编程准则</h4><ul>\n<li><p>基本流程结构和逻辑代数</p>\n</li>\n<li><p>面向对象编程</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID</a>, <a href=\"https://en.wikipedia.org/wiki/GRASP_(object-oriented_design)\">GRASP</a>面向对象设计</p>\n<blockquote>\n<p><strong>SOLID</strong>（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">S</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99\">单一功能原则</a></td>\n<td>认为“对象应该仅具有一种单一功能”的概念。</td>\n</tr>\n<tr>\n<td align=\"center\">O</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99\">开闭原则</a></td>\n<td>认为“软件应该是对于扩展开放的，但是对于修改封闭的”的概念。</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\">里氏替换原则</a></td>\n<td>认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念。参考契约式设计。</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99\">接口隔离原则</a></td>\n<td>认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</td>\n</tr>\n<tr>\n<td align=\"center\">D</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99\">依赖反转原则</a></td>\n<td>认为一个方法应该遵从“依赖于抽象而不是一个实例”的概念。 依赖注入是该原则的一种实现方式。</td>\n</tr>\n</tbody></table>\n<p><strong>GRASP</strong>中提到的模式和原则包括有控制器（controller）、创建者（creator）、中介（indirection）、信息专家（information expert）、低耦合性（low coupling）、高内聚性（high cohesion）、多态（polymorphism）、保护变化（protected variations）和纯虚构（pure Fabrication）[2]</p>\n</blockquote>\n<ul>\n<li><p>函数式编程（纯函数、不变性、递归……）</p>\n</li>\n<li><p><a href=\"http://amzotti.github.io/programming%20paradigms/2015/02/13/what-is-the-difference-between-procedural-function-imperative-and-declarative-programming-paradigms/\">声明式与命令式编程</a></p>\n<blockquote>\n<p>声明式和命令式编程范例只不过是描述在不同抽象层次上编码的流行词。声明式编程关注的是“做什么，而不是如何做”，而命令式编程则关注的是“如何做，而不是做什么”。声明式编程是在比命令式编程更高的抽象层次上进行编程。两者都有其适用的地方，例如在网页开发中使用框架时需要声明式编程，而在设计算法和其他底层需求时则需要命令式编程。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><ul>\n<li><p>基本数据结构（基本类型、数组、矩阵、对象…）</p>\n</li>\n<li><p>缓存和 memoization</p>\n<p>memoization 没有一个很好的词能翻译，大概意思就是通过存储函数调用的结果，并在再次使用相同输入调用函数时直接返回已存储的结果，从而加速计算逻辑。斐波那契数列就是一个使用 memoization 的例子</p>\n</li>\n<li><p>Hash codes、 tokens、编码（比如 Base64）</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/a/80113/1213497\">栈与堆内存</a> </p>\n<p>链接指向一则在 <a href=\"https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113\">stackoverflow</a>  提出堆栈相关的诸多疑问，最高数回答解释了堆栈两种内存分配方式的基本概念、操作方式和性能差异，其中栈内存分配方式由于其后进先出的特性和近距离的存取模式，使得其在内存分配和回收上更加高效；而堆内存分配方式由于其动态和灵活的特性，对内存的管理相对复杂，但能够满足更多的内存需求</p>\n</li>\n</ul>\n<h4 id=\"代码整洁\"><a href=\"#代码整洁\" class=\"headerlink\" title=\"代码整洁\"></a>代码整洁</h4><ul>\n<li><p>懂得命名对代码的可读性的重要性</p>\n</li>\n<li><p>避免过长的方法和类，确保职责被划分到各个方法或者类中</p>\n</li>\n<li><p>遵循约定来管理项目结构</p>\n</li>\n<li><p>将复杂的布尔条件提取到命名良好的函数中</p>\n</li>\n<li><p>尽量编写尽可能自解释的代码（即通过阅读代码就能容易理解代码的功能）</p>\n</li>\n<li><p>良好的命名和轻量的文档而不是行内注释</p>\n<p><a href=\"https://www.codeproject.com/Articles/872073/Code-Comments-are-Lies\">代码注释通常可能会误导人</a>，因为它们经常被用作一种捷径，用来解释一段混乱的代码块的功能，而不是投入时间去重构它以提高其可读性。</p>\n<p>链接的文章主张编写清晰、自解释和可维护的代码，而不是过度依赖注释，同时也承认在某些特殊情况下，注释是有其必要性和价值的。</p>\n</li>\n<li><p>将文档编写为代码，理想情况下与代码一起，以便于维护（例如，在仓库中的“docs”文件夹中的 markdown 文件）</p>\n</li>\n<li><p>使用文档来描述“为什么”和“怎么做”（例如，目标、用例、组件、高级架构概述等）</p>\n</li>\n<li><p>在面向对象编程中，组合优于继承</p>\n</li>\n<li><p><a href=\"https://semver.org/\">Follow 语义化</a></p>\n</li>\n<li><p>了解TDD及其实践（例如，“红色，绿色，重构”）</p>\n<blockquote>\n<p><strong>TDD</strong>(测试驱动开发)是戴两顶帽子思考的开发方式：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上测试驱动开发的帽子，在测试的保护下，通过去除冗余的代码，提高代码品质。测试驱动着整个开发过程：首先，驱动代码的设计和功能的实现；其后，驱动代码的再设计和重构。</p>\n<ul>\n<li><p>红色：首先编写一个针对新功能的测试用例，此时由于功能尚未实现，测试用例将无法通过（失败，显示红色）</p>\n</li>\n<li><p>绿色：接下来编写功能代码，使得测试用例能够通过（成功，显示绿色）。在这个阶段，重点是让测试通过，而不是编写完美的代码。</p>\n</li>\n<li><p>重构：在测试用例通过后，对功能代码进行优化和重构，提高代码质量，同时确保测试用例仍然能够通过。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"源码管理能力\"><a href=\"#源码管理能力\" class=\"headerlink\" title=\"源码管理能力\"></a>源码管理能力</h4><ul>\n<li><p>CVS（控制版本系统）&#x2F; SCM（源代码管理）基础知识：分支、标签、集中式与分散式等</p>\n</li>\n<li><p>SCM与仓库管理&#x2F;托管的区别（即<a href=\"https://stackoverflow.com/a/13321586\">Git与GitHub之间的区别</a>）</p>\n</li>\n<li><p>理解版本化的重要性</p>\n</li>\n<li><p>Commit 最佳实践</p>\n<ul>\n<li><p><a href=\"https://lucasr.org/2011/01/29/micro-commits/\">微提交</a> &#x2F;原子提交，良好的描述等</p>\n</li>\n<li><p><a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">常规提交</a></p>\n</li>\n</ul>\n</li>\n<li><p>功能分支（短期）</p>\n</li>\n<li><p>基于主干的开发</p>\n</li>\n<li><p>依赖管理（包管理器的重要性，依赖地狱的风险等）</p>\n</li>\n</ul>\n<h4 id=\"技术合作\"><a href=\"#技术合作\" class=\"headerlink\" title=\"技术合作\"></a>技术合作</h4><ul>\n<li><p><a href=\"https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/\">代码 review 最佳实践</a></p>\n<ul>\n<li>一句话来说就是：在执行代码审查时关注相关部分。目的是学习，而不是指责。</li>\n</ul>\n</li>\n<li><p><a href=\"https://martinfowler.com/articles/on-pair-programming.html\">结对编程</a></p>\n<p>这篇文章主要讨论了结对编程（Pair Programming）的相关主题，包括其风格、时间管理、轮换策略、日常规划、物理环境设置、远程配对等方面。还探讨了结对编程的好处和挑战，以及如何说服管理者和同事采用这种方法。此外，文章还涉及了一些与配对编程相关的细节和常见问题</p>\n</li>\n</ul>\n<h4 id=\"DevOps-实践\"><a href=\"#DevOps-实践\" class=\"headerlink\" title=\"DevOps 实践\"></a>DevOps 实践</h4><ul>\n<li><p>自动化构建</p>\n</li>\n<li><p>构件仓库和镜像注册表</p>\n</li>\n<li><p>编写自动化测试</p>\n</li>\n<li><p>单元、集成和端到端（e2e）测试之间的区别</p>\n</li>\n<li><p>测试金字塔</p>\n</li>\n<li><p>持续集成</p>\n</li>\n<li><p>持续交付与持续部署</p>\n</li>\n<li><p>功能 Flag 和功能开关</p>\n</li>\n</ul>\n<h4 id=\"通用技术知识\"><a href=\"#通用技术知识\" class=\"headerlink\" title=\"通用技术知识\"></a>通用技术知识</h4><h5 id=\"语言理论知识\"><a href=\"#语言理论知识\" class=\"headerlink\" title=\"语言理论知识\"></a>语言理论知识</h5><ul>\n<li><p>正则表达式（regex）</p>\n</li>\n<li><p>编译型与解释型语言</p>\n</li>\n<li><p><a href=\"https://medium.com/@cpave3/understanding-types-static-vs-dynamic-strong-vs-weak-88a4e1f0ed5f\">动态与静态 &amp; 弱类型与强类型语言类型</a></p>\n</li>\n</ul>\n<h5 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h5><ul>\n<li><p>懒加载</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Profiling_(computer_programming)\">性能分析</a></p>\n</li>\n</ul>\n<h5 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h5><ul>\n<li><p>竞态条件</p>\n</li>\n<li><p>死锁</p>\n</li>\n<li><p>互斥</p>\n</li>\n</ul>\n<h3 id=\"特定领域技术知识\"><a href=\"#特定领域技术知识\" class=\"headerlink\" title=\"特定领域技术知识\"></a>特定领域技术知识</h3><p>在某些情况下，您可能希望工程师已经了解某些特定领域，例如前端、后端、架构、基础设施或安全方面。在这些情况下，还有一些跨框架的概念和原则，可用于推动针对每个领域的特定技术知识的内容。</p>\n<h4 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h4><ul>\n<li><p>API通信（不同的架构标准，数据如何传输…）</p>\n</li>\n<li><p>DOM（定义，理解，虚拟DOM…）</p>\n</li>\n<li><p>浏览器事件</p>\n</li>\n<li><p>响应式设计（目的，优点，渐进增强…）</p>\n</li>\n<li><p>客户端渲染（CSR）与服务器端渲染（SSR）</p>\n</li>\n<li><p>分页</p>\n</li>\n<li><p>状态管理（相关问题，无状态方法…）</p>\n</li>\n<li><p>MVC 和相关的衍生品</p>\n</li>\n<li><p>WebSockets 网络通信协议</p>\n</li>\n</ul>\n<h4 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h4><ul>\n<li><p>API设计（不同的架构标准，数据如何传输…）</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Message_broker\">消息代理</a></p>\n</li>\n<li><p>关系型数据库（它们是如何工作的，基本概念…）</p>\n</li>\n<li><p>非关系型数据库</p>\n</li>\n<li><p>数据库设计</p>\n</li>\n<li><p>ORM（对象关系映射）</p>\n</li>\n<li><p>批处理进程 &#x2F; 定时任务</p>\n</li>\n<li><p>会话处理</p>\n</li>\n<li><p><a href=\"https://lti.umuc.edu/contentadaptor/topics/byid/db0a8c4f-f738-4674-9f60-b75323cdb07f\">错误处理、审查、日志记录</a></p>\n</li>\n</ul>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><ul>\n<li><p>API</p>\n<ul>\n<li><p>标准协议：REST &#x2F; SOAP </p>\n</li>\n<li><p>安全性（例如拦截机器人，控制账户接管攻击等）</p>\n</li>\n<li><p>针对第三方服务故障的弹性橱窗（例如断路器）</p>\n</li>\n</ul>\n</li>\n<li><p>外部可配置化</p>\n</li>\n<li><p><a href=\"https://www.romenrg.com/blog/2019/12/31/everything-as-code/\">万物皆代码（即配置即代码，基础设施即代码，文档即代码…）</a></p>\n</li>\n<li><p>单体应用与微服务</p>\n</li>\n<li><p>领域驱动设计（DDD）</p>\n</li>\n<li><p>六边形架构</p>\n</li>\n<li><p>服务 Mesh</p>\n</li>\n<li><p>相关的互联网协议及其用法（如 HTTP, HTTPS, TCP, UDP, LDAP, SSH, SMTP…）</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Data_modeling\">数据建模</a></p>\n</li>\n</ul>\n<h4 id=\"基础设施\"><a href=\"#基础设施\" class=\"headerlink\" title=\"基础设施\"></a>基础设施</h4><ul>\n<li><p>虚拟机与容器</p>\n</li>\n<li><p>进程与线程</p>\n</li>\n<li><p>控制器-代理&#x2F;主副本模式</p>\n</li>\n<li><p>C&#x2F;S模式</p>\n</li>\n<li><p>IAAS, PAAS, SASS</p>\n</li>\n<li><p>Web服务器</p>\n</li>\n<li><p>反向代理</p>\n</li>\n<li><p>负载均衡</p>\n</li>\n<li><p>冗余</p>\n</li>\n<li><p>延迟</p>\n</li>\n<li><p>监控</p>\n</li>\n<li><p><a href=\"https://docs.honeycomb.io/learning-about-observability/intro-to-observability/\">可监控性</a></p>\n</li>\n</ul>\n<h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><ul>\n<li><p>身份和访问管理（IAM）</p>\n<ul>\n<li><p>认证（JWT, SSO）</p>\n</li>\n<li><p>授权（RBAC, ABAC）</p>\n</li>\n</ul>\n</li>\n<li><p>公钥密码系统（例如RSA）</p>\n</li>\n<li><p>加密协议（TLS, SSL）</p>\n</li>\n<li><p>最小权限原则</p>\n</li>\n<li><p>DoS &#x2F; DDoS</p>\n</li>\n<li><p>SQL 注入</p>\n</li>\n<li><p>中间人攻击</p>\n</li>\n<li><p>XSS（跨站脚本攻击） 和 CSRF（跨站请求伪造）</p>\n</li>\n</ul>\n","raw":"title: '[译]软件开发人员的常青技能'\nauthor: 落叶挽歌\ndate: 2024-07-09 07:27:19\ntags:\n---\n\n最近在 Github 看到这一篇将程序员一直需要使用的非技术核心能力进行了总结，深受里面内容的启发，语言、框架都是会过时的，但有些技能无论是什么语言或者框架都是通用的，如果要在这个行业持续深根，那么这些非技术能力是必备的且实用的。本文在原文上进行翻译，并对文中提到部分专业术语进行了解释，以及对指向外部链接的文档内容作了一些简单的概述，希望能帮助到查看此文档的人。\n\n原文地址：[evergreen-skills-developers](https://github.com/romenrg/evergreen-skills-developers.git)\n\n中英双文地址：[[译]evergreen-skills-developers](https://github.com/VomPom/evergreen-skills-developers/blob/master/README_en_cn.md)\n\n## 原文翻译：\n\n这个仓库包括了一份“常青技能”清单，这份清单应该可以作为对技术精湛的软件工程师/开发者客观评价。\n\n这份工作的是为了在招聘软件开发者/工程师时，提供一个替代的技术面试的方案。文档关注的是软开发最佳实践、跨框架原则和通用的技能；而不是我们在行业中经常看到的语言层面，或者特定技术框架的内容。\n\n编程语言不断进化，公司也不断改变他们的技术栈，框架很快就会过时，有经验的工程师使用搜索引擎能在几分钟就能解决语法相关的问题。因此，在面试候选人时关注这些方面是否有意义呢？\n\n另一方面，技术框架以外的原理和非技术的技能是在谷歌上查不到的，这些技能是“常青”的，并且对工程师的表现有巨大的影响。这些更能反映出软件开发者/工程师为团队带来的真正价值。\n\n这个仓库是基于以下文章的一个衍生作品：\"[是什么造就了一位伟大的软件工程师](https://www.romenrg.com/blog/2018/12/29/what-makes-a-great-software-engineer)\"。\n\n这是一个正在进行中的工作。重要的知识可能缺失，现有的条目可能可以改进，更好的分组策略也可能被发现。因此，任何贡献（即PR或问题）都是受欢迎的。请随时按照[贡献指南](https://gptx.woa.com/CONTRIBUTING.md)提出修改建议。\n\n## 目录\n- [非技术技能](#非技术技能)\n\n  - [核心技能](#核心技能（又称“软技能”）)\n    - [交流](#交流)\n    - [团队](#团队)\n  - [创新和自我管理技能](#创新和自我管理技能)\n    - [开发流程](#开发流程)\n    - [问题解决能力](#问题解决能力)\n    - [心态](#心态)\n\n- [技能能力](#技能能力)\n\n  - [通用技术能力](#通用技术能力)\n  - [编程准则](#编程准则)\n    - [数据结构](#数据结构) \n    - [代码整洁](#代码整洁)\n    - [源码管理](#源码管理)\n    - [技术合作](#技术合作)\n    - [DevOps实践](#DevOps实践)\n    - [通用技术知识](通用技术知识)\n      - [语言理论知识](#语言理论知识)\n      - [优化](#优化)\n      - [并发](#并发)   \n    \n- [特定领域技术知识](#特定领域技术知识)\n  \n  - [前端开发](#前端开发)\n  \n  - [后端开发](#后端开发)\n  \n  - [架构](#架构)\n  \n  - [基础建设](#基础建设)\n  \n  - [安全](#安全)\n\n## 非技术技能\n\n以下非技术能力可能是开发者最重要的能力。尽管一个人可能具备很强的技术能力，但在公司中没有良好的沟通、团队合作态度、开发流程、解决问题的能力和学习的心态的话，一切会变得非常糟糕。\n\n### 核心技能（又称“软技能”）\n\n#### 交流\n\n- 遵循邮件使用的最佳策略(例： [some e-mail etiquette rules](https://www.grammarly.com/blog/email-etiquette-rules-to-know/))\n\n* 遵循沟通的最佳策略 (e.g. [use threads to organize discussions](https://slack.com/intl/en-es/help/articles/115000769927-Use-threads-to-organize-discussions-) and [other best-practices from Slack](https://blog.rescuetime.com/slack-focus-guide/))\n\n  两份链接指向的 slack 的一则使用文档和一份 slack 使用技巧文档\n\n* [最小化干扰](https://jaxenter.com/aaaand-gone-true-cost-interruptions-128741.html)\n\n  链接指向的文章是一篇关于程序员在工作中，因被其他事项而中断程序开发的影响，一般人，在工作过程中断打扰后大约需要23分钟才能恢复到之前的状态，而程序员需要更久，文中强调了工作中断对程序员工作效率和心情的影响，并讨论了有计划和非计划性中断的不同影响。\n\n* 保持礼貌\n\n#### 团队\n\n* [练习同理心](https://simpleprogrammer.com/empathy-software-developers)\n\n* 保持谦逊和低调\n\n* 做一个积极倾听的人\n\n* 做一个好的导师\n\n* 知识分享\n\n* 得有见地\n\n### 创新和自我管理技能\n\n#### 开发流程\n\n* 了解[《敏捷开发原则》](https://agilemanifesto.org/principles.html)\n\n* 适应迭代和增量开发\n\n* 自组织的能力\n\n  指的是个体或系统能够自发地、无需外部强制指挥，根据内部规则和相互作用来组织自身结构和行为的能力。这种能力在多个层面都有体现，包括个人自我管理、团队协作以及更广泛的社会和生态系统\n\n* 避免产生错误的预估（比如：工时预估）\n\n* 关注优先级和业务价值\n\n#### 问题解决能力\n\n* 使用科学方法([Scientific Method](https://en.wikipedia.org/wiki/Scientific_method))\n\n  > 科学方法是一种有系统地寻求知识的程序，涉及了以下三个步骤：问题的认知与表述、实验数据的收集、假说的构成与测试。\n\n* 检索能力\n\n* 横向思维\n\n  > 横向思维，指使用间接的、具有创造力的、不是一望而知的推理方式来解决问题\n\n* 抽象化能力\n\n* 创造力\n\n* [五问法](http://en.wikipedia.org/wiki/5_Whys)\n\n  > 五问法关键所在就是，鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，从结果着手，沿着因果关系链条，顺藤摸瓜，穿越不同的抽象层面，直至找出原有问题的根本原因。简而言之，就是鼓励解决问题的人要有“打破砂锅问到底”的精神。\n\n* 风险管理\n\n#### 心态\n\n* 不要害怕变化\n\n* 敢于失败\n\n* 终生学习\n\n* [批判性思维](https://en.wikipedia.org/wiki/Critical_thinking) （保持理性，质疑决定，“让事实说话”）\n\n  \n\n\n## 技能能力\n\n### 通用技术能力\n\n有一些技术知识是永恒的，对任何软件工程师都有关，尽管他们将要从事的具体领域各不相同。为了深入了解他们的资历并了解他们的工程实践有多扎实，你可以和他们就编程原理、数据结构、清晰的代码、源代码管理、技术协作或者DevOps实践等主题进行交谈。如果这些基础扎实，他们可能能够毫无问题地学习你们特定领域的东西。\n\n#### 编程准则\n\n * 基本流程结构和逻辑代数\n\n * 面向对象编程\n\n * [SOLID](https://en.wikipedia.org/wiki/SOLID), [GRASP](https://en.wikipedia.org/wiki/GRASP_(object-oriented_design))面向对象设计\n\n   > **SOLID**（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）\n\n>|      |                                                            |                                                              |\n>| :--: | ---------------------------------------------------------- | ------------------------------------------------------------ |\n>|  S   | [单一功能原则](https://zh.wikipedia.org/wiki/单一功能原则) | 认为“对象应该仅具有一种单一功能”的概念。                     |\n>|  O   | [开闭原则](https://zh.wikipedia.org/wiki/开闭原则)         | 认为“软件应该是对于扩展开放的，但是对于修改封闭的”的概念。   |\n>|  L   | [里氏替换原则](https://zh.wikipedia.org/wiki/里氏替换原则) | 认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念。参考契约式设计。 |\n>|  I   | [接口隔离原则](https://zh.wikipedia.org/wiki/接口隔离原则) | 认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。     |\n>|  D   | [依赖反转原则](https://zh.wikipedia.org/wiki/依赖反转原则) | 认为一个方法应该遵从“依赖于抽象而不是一个实例”的概念。 依赖注入是该原则的一种实现方式。 |\n>\n>**GRASP**中提到的模式和原则包括有控制器（controller）、创建者（creator）、中介（indirection）、信息专家（information expert）、低耦合性（low coupling）、高内聚性（high cohesion）、多态（polymorphism）、保护变化（protected variations）和纯虚构（pure Fabrication）[2]\n\n * 函数式编程（纯函数、不变性、递归……）\n\n * [声明式与命令式编程](http://amzotti.github.io/programming%20paradigms/2015/02/13/what-is-the-difference-between-procedural-function-imperative-and-declarative-programming-paradigms/)\n\n   > 声明式和命令式编程范例只不过是描述在不同抽象层次上编码的流行词。声明式编程关注的是“做什么，而不是如何做”，而命令式编程则关注的是“如何做，而不是做什么”。声明式编程是在比命令式编程更高的抽象层次上进行编程。两者都有其适用的地方，例如在网页开发中使用框架时需要声明式编程，而在设计算法和其他底层需求时则需要命令式编程。\n\n#### 数据结构\n\n * 基本数据结构（基本类型、数组、矩阵、对象...）\n\n * 缓存和 memoization\n\n   memoization 没有一个很好的词能翻译，大概意思就是通过存储函数调用的结果，并在再次使用相同输入调用函数时直接返回已存储的结果，从而加速计算逻辑。斐波那契数列就是一个使用 memoization 的例子\n\n * Hash codes、 tokens、编码（比如 Base64）\n\n * [栈与堆内存](https://stackoverflow.com/a/80113/1213497) \n\n   链接指向一则在 [stackoverflow](https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113)  提出堆栈相关的诸多疑问，最高数回答解释了堆栈两种内存分配方式的基本概念、操作方式和性能差异，其中栈内存分配方式由于其后进先出的特性和近距离的存取模式，使得其在内存分配和回收上更加高效；而堆内存分配方式由于其动态和灵活的特性，对内存的管理相对复杂，但能够满足更多的内存需求\n\n#### 代码整洁\n\n\n * 懂得命名对代码的可读性的重要性\n\n * 避免过长的方法和类，确保职责被划分到各个方法或者类中\n\n * 遵循约定来管理项目结构\n\n * 将复杂的布尔条件提取到命名良好的函数中\n\n * 尽量编写尽可能自解释的代码（即通过阅读代码就能容易理解代码的功能）\n\n * 良好的命名和轻量的文档而不是行内注释\n\n   [代码注释通常可能会误导人](https://www.codeproject.com/Articles/872073/Code-Comments-are-Lies)，因为它们经常被用作一种捷径，用来解释一段混乱的代码块的功能，而不是投入时间去重构它以提高其可读性。\n\n   链接的文章主张编写清晰、自解释和可维护的代码，而不是过度依赖注释，同时也承认在某些特殊情况下，注释是有其必要性和价值的。\n\n * 将文档编写为代码，理想情况下与代码一起，以便于维护（例如，在仓库中的“docs”文件夹中的 markdown 文件）\n\n * 使用文档来描述“为什么”和“怎么做”（例如，目标、用例、组件、高级架构概述等）\n\n * 在面向对象编程中，组合优于继承\n\n * [Follow 语义化](https://semver.org/)\n\n * 了解TDD及其实践（例如，“红色，绿色，重构”）\n\n   > **TDD**(测试驱动开发)是戴两顶帽子思考的开发方式：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上测试驱动开发的帽子，在测试的保护下，通过去除冗余的代码，提高代码品质。测试驱动着整个开发过程：首先，驱动代码的设计和功能的实现；其后，驱动代码的再设计和重构。\n   >\n   > - 红色：首先编写一个针对新功能的测试用例，此时由于功能尚未实现，测试用例将无法通过（失败，显示红色）\n   >\n   > - 绿色：接下来编写功能代码，使得测试用例能够通过（成功，显示绿色）。在这个阶段，重点是让测试通过，而不是编写完美的代码。\n   >\n   > - 重构：在测试用例通过后，对功能代码进行优化和重构，提高代码质量，同时确保测试用例仍然能够通过。\n\n#### 源码管理能力\n\n * CVS（控制版本系统）/ SCM（源代码管理）基础知识：分支、标签、集中式与分散式等\n\n * SCM与仓库管理/托管的区别（即[Git与GitHub之间的区别](https://stackoverflow.com/a/13321586)）\n\n * 理解版本化的重要性\n\n * Commit 最佳实践\n   * [微提交](https://lucasr.org/2011/01/29/micro-commits/) /原子提交，良好的描述等\n\n   * [常规提交](https://www.conventionalcommits.org/en/v1.0.0/)\n\n * 功能分支（短期）\n\n * 基于主干的开发\n\n * 依赖管理（包管理器的重要性，依赖地狱的风险等）\n\n#### 技术合作\n\n\n* [代码 review 最佳实践](https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/)\n\n  * 一句话来说就是：在执行代码审查时关注相关部分。目的是学习，而不是指责。\n\n* [结对编程](https://martinfowler.com/articles/on-pair-programming.html)\n\n  这篇文章主要讨论了结对编程（Pair Programming）的相关主题，包括其风格、时间管理、轮换策略、日常规划、物理环境设置、远程配对等方面。还探讨了结对编程的好处和挑战，以及如何说服管理者和同事采用这种方法。此外，文章还涉及了一些与配对编程相关的细节和常见问题\n\n#### DevOps 实践\n\n * 自动化构建\n\n * 构件仓库和镜像注册表\n\n * 编写自动化测试\n\n * 单元、集成和端到端（e2e）测试之间的区别\n\n * 测试金字塔\n\n * 持续集成\n\n * 持续交付与持续部署\n\n * 功能 Flag 和功能开关\n\n#### 通用技术知识\n\n##### 语言理论知识\n\n\n * 正则表达式（regex）\n\n * 编译型与解释型语言\n\n * [动态与静态 & 弱类型与强类型语言类型](https://medium.com/@cpave3/understanding-types-static-vs-dynamic-strong-vs-weak-88a4e1f0ed5f) \n\n##### 优化\n\n\n * 懒加载\n\n * [性能分析](https://en.wikipedia.org/wiki/Profiling_(computer_programming))\n\n##### 并发\n\n * 竞态条件\n\n * 死锁\n\n * 互斥\n\n### 特定领域技术知识\n\n在某些情况下，您可能希望工程师已经了解某些特定领域，例如前端、后端、架构、基础设施或安全方面。在这些情况下，还有一些跨框架的概念和原则，可用于推动针对每个领域的特定技术知识的内容。\n\n#### 前端开发\n\n\n * API通信（不同的架构标准，数据如何传输...）\n\n * DOM（定义，理解，虚拟DOM...）\n\n * 浏览器事件\n\n * 响应式设计（目的，优点，渐进增强...）\n\n * 客户端渲染（CSR）与服务器端渲染（SSR）\n\n * 分页\n\n * 状态管理（相关问题，无状态方法...）\n\n * MVC 和相关的衍生品\n\n * WebSockets 网络通信协议\n\n#### 后端开发\n\n * API设计（不同的架构标准，数据如何传输...）\n\n * [消息代理](https://en.wikipedia.org/wiki/Message_broker)\n\n * 关系型数据库（它们是如何工作的，基本概念...）\n\n * 非关系型数据库\n\n * 数据库设计\n\n * ORM（对象关系映射）\n\n * 批处理进程 / 定时任务\n\n * 会话处理\n\n * [错误处理、审查、日志记录](https://lti.umuc.edu/contentadaptor/topics/byid/db0a8c4f-f738-4674-9f60-b75323cdb07f)\n\n#### 架构\n\n * API\n\n   * 标准协议：REST / SOAP \n\n   * 安全性（例如拦截机器人，控制账户接管攻击等）\n\n   * 针对第三方服务故障的弹性橱窗（例如断路器）\n\n * 外部可配置化\n\n * [万物皆代码（即配置即代码，基础设施即代码，文档即代码...）](https://www.romenrg.com/blog/2019/12/31/everything-as-code/)\n\n * 单体应用与微服务\n\n * 领域驱动设计（DDD）\n\n * 六边形架构\n\n * 服务 Mesh\n\n * 相关的互联网协议及其用法（如 HTTP, HTTPS, TCP, UDP, LDAP, SSH, SMTP...）\n\n * [数据建模](https://en.wikipedia.org/wiki/Data_modeling)\n\n   \n\n #### 基础设施\n\n\n * 虚拟机与容器\n\n * 进程与线程\n\n * 控制器-代理/主副本模式\n\n * C/S模式\n\n * IAAS, PAAS, SASS\n\n * Web服务器\n\n * 反向代理\n\n * 负载均衡\n\n * 冗余\n\n * 延迟\n\n * 监控\n\n * [可监控性](https://docs.honeycomb.io/learning-about-observability/intro-to-observability/)\n\n#### 安全\n\n  * 身份和访问管理（IAM）\n\n    * 认证（JWT, SSO）\n\n    * 授权（RBAC, ABAC）\n\n * 公钥密码系统（例如RSA）\n\n * 加密协议（TLS, SSL）\n\n * 最小权限原则\n\n * DoS / DDoS\n\n * SQL 注入\n\n * 中间人攻击\n\n * XSS（跨站脚本攻击） 和 CSRF（跨站请求伪造）","categories":[],"tags":[]},"api":"api/posts/2024/07/09/软件开发人员的常青技能.json"}