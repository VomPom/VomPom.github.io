{"data":{"title":"Android开发 LayoutInflater源码解析","slug":"LayoutInflater源码解析","description":"","date":"2019-03-03T06:40:00.000Z","updated":"2025-05-20T11:46:57.000Z","language":"zh-CN","comments":true,"url":"2019/03/03/LayoutInflater源码解析/","cover":null,"images":[],"content":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","raw":"title: Android开发 LayoutInflater源码解析\nauthor: 落叶挽歌\nthumbnail: >-\n  https://images.pexels.com/photos/360591/pexels-photo-360591.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\ntags:\n  - Java\ncategories:\n  - 技术文章\ndate: 2019-03-03 14:40:00\n---\n\n本文主要是自己对LayoutInflater 使用的相关总结\n\n\n我们经常实用的LayoutInflater这样用：\n\nView view = LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t\n\n\n进入inflate进行源码解析\n\n```java\n   \tpublic View inflate(int resource, ViewGroup root, boolean attachToRoot) {\n   \t    final Resources res = getContext().getResources();\n   \t    if (DEBUG) {\n   \t        Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n   \t                + Integer.toHexString(resource) + \")\");\n   \t    }\n   \t    final XmlResourceParser parser = res.getLayout(resource);\n   \t    try {\n   \t        return inflate(parser, root, attachToRoot);\n   \t    } finally {\n   \t        parser.close();\n   \t    }\n   \t}\n```\n主要做了一件事：\n**建立XmlResourceParser为后面解析xml文件做准备**\n[XmlResourceParser的解析原理可以去这里看看](https://www.jianshu.com/p/4cd15faaa01d \"XmlResourceParser的解析原理可以去这里看看\")\n\n继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)\n```java\n  \tpublic View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) {\n  \t    synchronized (mConstructorArgs) {\n  \t        final Context inflaterContext = mContext;\n  \t        final AttributeSet attrs = Xml.asAttributeSet(parser);\n  \t        Context lastContext = (Context) mConstructorArgs[0];\n  \t        mConstructorArgs[0] = inflaterContext;\n  \t        View result = root;\n  \t        try {\n  \t            if (TAG_MERGE.equals(name)) {\n  \t                if (root == null || !attachToRoot) {\n  \t                    throw new InflateException(\"<merge /> can be used only with a valid \"\n  \t                            + \"ViewGroup root and attachToRoot=true\");\n  \t                }\n  \t                rInflate(parser, root, inflaterContext, attrs, false);\n  \t            } else {\n  \t                // Temp is the root view that was found in the xml\n  \t                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n  \t                ViewGroup.LayoutParams params = null;\n  \t                if (root != null) {\n  \t                    // Create layout params that match root, if supplied\n  \t                    params = root.generateLayoutParams(attrs);\n  \t                    if (!attachToRoot) {\n  \t                        // Set the layout params for temp if we are not\n  \t                        // attaching. (If we are, we use addView, below)\n  \t                        temp.setLayoutParams(params);\n  \t                    }\n  \t                }\n  \t                rInflateChildren(parser, temp, attrs, true);\n  \t                // We are supposed to attach all the views we found (int temp)\n  \t                // to root. Do that now.\n  \t                if (root != null && attachToRoot) {\n  \t                    root.addView(temp, params);\n  \t                }\n  \t                // Decide whether to return the root that was passed in or the\n  \t                // top view found in xml.\n  \t                if (root == null || !attachToRoot) {\n  \t                    result = temp;\n  \t                }\n  \t            }\n  \t        } catch (XmlPullParserException e) {...}\n```\n\n这段源码中看出主要逻辑为：\n\n1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象\n\n2、进入非merge的逻辑里面，会创建根View，主要的过程在**createViewFromTag创建View**\n\n3、**rInflateChildren**创建子View\n\n3、接下来如果传入的root不为null,并且attachToRoot==false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。\n\n4、如果root不为null,attachToRoot==true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View\n\n\n继续进入**createViewFromTag**源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）\n```java\n\tView createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\n\t        boolean ignoreThemeAttr) {\n\t    if (name.equals(\"view\")) {\n\t        name = attrs.getAttributeValue(null, \"class\");\n\t    }\n\t    try {\n\t        View view;\n\t        if (mFactory2 != null) {\n\t            view = mFactory2.onCreateView(parent, name, context, attrs);\n\t        } else if (mFactory != null) {\n\t            view = mFactory.onCreateView(name, context, attrs);\n\t        } else {\n\t            view = null;\n\t        }\n\t        if (view == null && mPrivateFactory != null) {\n\t            view = mPrivateFactory.onCreateView(parent, name, context, attrs);\n\t        }\n\t        if (view == null) {\n\t            final Object lastContext = mConstructorArgs[0];\n\t            mConstructorArgs[0] = context;\n\t            try {\n\t                if (-1 == name.indexOf('.')) {\n\t                    view = onCreateView(parent, name, attrs);\n\t                } else {\n\t                    view = createView(name, null, attrs);\n\t                }\n\t            } finally {\n\t                mConstructorArgs[0] = lastContext;\n\t            }\n\t        }\n\t\t\t……\n```\n\n这段源码中看出主要逻辑为：\n\n1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)\n\n2、主要通过不同的Factory通过**createView() **去创建View\n\n3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。\n```java\n    protected View onCreateView(String name, AttributeSet attrs)\n            throws ClassNotFoundException {\n        return createView(name, \"android.view.\", attrs);\n    }\n```\n继续进入**onCreateView**源码\n```java\n  \tpublic final View createView(String name, String prefix, AttributeSet attrs)\n  \t        throws ClassNotFoundException, InflateException {\n  \t    Constructor<? extends View> constructor = sConstructorMap.get(name);\n  \t    if (constructor != null && !verifyClassLoader(constructor)) {\n  \t        constructor = null;\n  \t        sConstructorMap.remove(name);\n  \t    }\n  \t    Class<? extends View> clazz = null;\n  \t    try {\n  \t        if (constructor == null) {\n  \t            // Class not found in the cache, see if it's real, and try to add it\n  \t            clazz = mContext.getClassLoader().loadClass(\n  \t                    prefix != null ? (prefix + name) : name).asSubclass(View.class);\n  \t\n  \t            if (mFilter != null && clazz != null) {\n  \t                boolean allowed = mFilter.onLoadClass(clazz);\n  \t                if (!allowed) {\n  \t                    failNotAllowed(name, prefix, attrs);\n  \t                }\n  \t            }\n  \t            constructor = clazz.getConstructor(mConstructorSignature);\n  \t            constructor.setAccessible(true);\n  \t            sConstructorMap.put(name, constructor);\n  \t        } else {\n  \t            // If we have a filter, apply it to cached constructor\n  \t            if (mFilter != null) {\n  \t                // Have we seen this name before?\n  \t                Boolean allowedState = mFilterMap.get(name);\n  \t                if (allowedState == null) {\n  \t                    // New class -- remember whether it is allowed\n  \t                    clazz = mContext.getClassLoader().loadClass(\n  \t                            prefix != null ? (prefix + name) : name).asSubclass(View.class);\n  \t\n  \t                    boolean allowed = clazz != null && mFilter.onLoadClass(clazz);\n  \t                    mFilterMap.put(name, allowed);\n  \t                    if (!allowed) {\n  \t                        failNotAllowed(name, prefix, attrs);\n  \t                    }\n  \t                } else if (allowedState.equals(Boolean.FALSE)) {\n  \t                    failNotAllowed(name, prefix, attrs);\n  \t                }\n  \t            }\n  \t        }\n  \t        Object lastContext = mConstructorArgs[0];\n  \t        if (mConstructorArgs[0] == null) {\n  \t            // Fill in the context if not already within inflation.\n  \t            mConstructorArgs[0] = mContext;\n  \t        }\n  \t        Object[] args = mConstructorArgs;\n  \t        args[1] = attrs;\n  \t        final View view = constructor.newInstance(args);\n  \t        if (view instanceof ViewStub) {\n  \t            // Use the same context when inflating ViewStub later.\n  \t            final ViewStub viewStub = (ViewStub) view;\n  \t            viewStub.setLayoutInflater(cloneInContext((Context) args[0]));\n  \t        }\n  \t        mConstructorArgs[0] = lastContext;\n  \t        return view;\n  \t    } \n```\n\n​\t\t\n这段源码虽然很复杂，但主要做的事就是 **通过反射的方式去加载一个View类**\n\n这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；\n```java\t\t\n\tclazz = mContext.getClassLoader().loadClass(prefix != null ? (prefix + name) : name).asSubclass(View.class) \n```\n\n\n到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：\n\n**子View创建** 的逻辑在inflate中的rInflateChildren\n\n进入rInflateChildren，这里依然会进入到rInflate()\n```java\n  \t void rInflate(XmlPullParser parser, View parent, Context context,\n  \t        AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n  \t\n  \t    final int depth = parser.getDepth();\n  \t    int type;\n  \t    boolean pendingRequestFocus = false;\n  \t    while (((type = parser.next()) != XmlPullParser.END_TAG ||\n  \t            parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n  \t        if (type != XmlPullParser.START_TAG) {\n  \t            continue;\n  \t        }\n  \t        final String name = parser.getName();\n  \t        if (TAG_REQUEST_FOCUS.equals(name)) {\n  \t            pendingRequestFocus = true;\n  \t            consumeChildElements(parser);\n  \t        } else if (TAG_TAG.equals(name)) {\n  \t            parseViewTag(parser, parent, attrs);\n  \t        } else if (TAG_INCLUDE.equals(name)) {\n  \t            if (parser.getDepth() == 0) {\n  \t                throw new InflateException(\"<include /> cannot be the root element\");\n  \t            }\n  \t            parseInclude(parser, context, parent, attrs);\n  \t        } else if (TAG_MERGE.equals(name)) {\n  \t            throw new InflateException(\"<merge /> must be the root element\");\n  \t        } else {\n  \t            final View view = createViewFromTag(parent, name, context, attrs);\n  \t            final ViewGroup viewGroup = (ViewGroup) parent;\n  \t            final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n  \t            rInflateChildren(parser, view, attrs, true);\n  \t            viewGroup.addView(view, params);\n  \t        }\n  \t    }\n  \t    if (pendingRequestFocus) {\n  \t        parent.restoreDefaultFocus();\n  \t    }\n  \t    if (finishInflate) {\n  \t        parent.onFinishInflate();\n  \t    }\n  \t}\n```\n这段源码的大致可以总结为：\n\n1、总的逻辑为获取xml文档的层级数，解析每一层级的数据\n\n2、解析过程首先进行View的合理性校验，include、merge等标签；\n\n3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren\n\n\n到这里基本上所有的流程讲完了，这里总结一下加载流程：\n\n1、拿到Xml解析对象，为后续解析做准备\n\n2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制\n\n3、解析子View，通过createViewFromTag创建实例对象**","categories":[{"name":"技术文章","api":"api/categories/technology.json"}],"tags":[{"name":"Java","api":"api/tags/java.json"}]},"api":"api/posts/2019/03/03/LayoutInflater源码解析.json"}