{"data":{"index":7,"total":8,"posts":[{"title":"写在我即将毕业旅行前","slug":"写在毕业之际旅行前","date":"2019-06-04T11:24:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/06/04/写在毕业之际旅行前/","excerpt":"<p>忙碌的一天，又要到下班的时候了，一天好似很忙，其实回过头来仔细想想，一天好像并没有做太多的事情，然而确实是这样子度过一天了，就像我们的青春岁月，看样子并没有经历什么，但它就这样匆匆过去了，亦忧伤，亦憧憬。</p>\n<p>还有两周就要回校参加毕业典礼了，向公司请了十天假，算上端午以及周末，大概有半个多月属于自己的日子吧，也算是大学最后一点还是以学生身份存在的时间了。早在几个月前我都在筹划这次出去游玩了，因为我想出去走走，想出去看看。纵观整个大学生涯，自己也算是去了不少地方了，屋子里车票、机票已经收纳了一沓了。看着每一张车票的起点与终点以及行程时间，还能想起那时候发生过的事，或许有些事还在记忆里面，或许可能存在我的日记里面，或许我什么也记不得了。</p>\n<p>**2015年8月15日 绵阳-上海：**距离大学开学还有一个月了，父亲陪我度过了整个高三，待我拿到通知书后，我与父亲来到上海。父亲是一个节俭的人，买了绿皮车，将近两千多公里的路程，三十多个小时的行程，脚没有办法舒展开，时间长了别的难受。当看到那些没有座位的那些人要不停地给过路人让路的时候，我觉得自己也挺幸运的，至少我还有一个属于自己的位置，不需要为别人让路。在这煎熬的行程中，我并没有去抱怨，我只是一直在想，我以后一定要努力，一定不会让我和我父亲再受这样的遭遇。</p>\n<p><strong>2015年9月14日 上海-温州</strong>：马上就要大学开学了。离开了父母，将一个人去面对新的生活了，路过杭州的时候，车窗外一片开阔的平原，让我看到极具江南特色的景象：鳞次栉比的房屋伴着小河流，来来往往的车辆川流不息，很憧憬那样“小桥流水人家”的生活，这大概是对杭州的第一印象吧。</p>\n<p>**2016年1月22日 温州-成都：**大学寒假第一次回家，运气很好，我和同学抢到了卧铺票，有了一个较舒服的乘车环境。与我通行的还有很多大学川籍同学，因此一路上也变得并不孤独，时而和他们“摆龙门阵”，累了就回床铺上面去休息一下，我记得我当时带了一本《浪潮之巅》。</p>\n<p>**2017年7月18日 温州-太原：**第一次坐飞机，带着许多憧憬出发，但让人失望的是我错过了那一天的飞机，原本安排的好好的行程，一下子把我的计划打乱了。这时候我真的很迷茫，我不知道该去哪里，我也不知道该做什么，整个脑子是一片空白，在街上走走，最后回学校见到了精神支柱。然后去了太原平遥古城，喜欢太原老大爷那种街边悠然下着象棋的生活。</p>\n<p>**2017年7月10日 嘉兴-福州：**又是一次暑假，我去嘉兴看望我爸，然后我爸他们提议去福州找我的大姑爷家玩，这一次我和我的父亲快吵了一架，因为我想让他买一张动车票，可父亲执着的只买绿皮车票，他觉得能节约钱，可是我觉得时间才是最重要的，那时候我没有一点收入，我说服不了他，绿皮车从晚上八点开到第二天早上八点，整个一晚我没有怎么睡，感慨太多，我也告诉我自己要努力。当时也写过一篇随笔：<a href=\"http://julis.wang/2017/07/10/2018%E5%B9%B4710%E9%9A%8F%E7%AC%94-%E4%BA%8E%E5%98%89%E5%85%B4-%E7%A6%8F%E5%B7%9E%E5%88%97%E8%BD%A6/\" title=\"2017年710随笔 于嘉兴-福州列车\">2017年710随笔 于嘉兴-福州列车</a></p>\n<p>**2017年9月02日 温州-杭州：**这一次算是第一次以异地恋的身份去见了那时喜欢的人，一路忐忑。记得那时候带的是一本《小王子》，但是感觉没有看太懂，好像过了天真的年纪，已经看不太明白小王子的天真了。</p>\n<p><strong>2018年8月23日 杭州-太原：</strong> 或许真的是和太原有缘分，时隔一年再次去太原，这次我并没有错过，过了一年，变得成熟些了，这时候我已经在参加实习了。这次是代表整个学校唯一一只队伍进电子商务全国总决赛，压力与动力并存吧。</p>\n<p>**2019年2月14日 德阳-成都：**这是最近一次从家出发去杭州在成都中转，在德阳站中因为高铁晚点，我遇到了一个女孩子，或许这是读大学以后认识的第一个非本大学的四川女孩子吧，或许是缘分，我和她是同一辆车，在德阳到成都只有短短半个小时的行车时间，居然车晚点将近两个小时，于是和她就聊啊、聊啊，从小学说到初中高中，从高中说到大学，再从大学说到实习。原来她也和我一样是大四的学生，原来我和她大学同学是初中高中同学，真的是缘分吧。第一次是多么的希望列车晚点的时间能够再长一点。只可惜，我本将心照明月，奈何明月照沟渠。</p>\n<p>……</p>\n<p><strong>2019年6月10日 杭州-青岛、烟台、威海、大连？</strong>  或许是在被公司同事的鼓励下：现在有时间多出去玩玩吧，实习一天也没有多少钱，等以后正式工作了，有钱也没有时间了，趁现在，多出去走走吧。感谢芳姐姐对我的支助，让我有机会去计划这次旅行。</p>\n<p>这一次，我是第一次一个人的旅行，我想在这炎热的夏天里，走出屋子，踏上行程。去坐一次轮渡、我还想再使用学生证享受一次学生特权、然后去看看海、去吹吹风、去看看更多的天空、去认识的人并说：“很高兴认识你”。也算是对整个大学青春岁月画上一个句号吧。<br>那接下来的一路上又会发生什么故事呢？</p>\n<p>最后以王小波的《黄金时代》结尾吧：<strong>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</strong></p>\n<p>我还年轻，我还可以到处走走，我还有很多想要去憧憬的、盼望的……</p>\n<p>–于2019.06.04 7:24 即将下班回家</p>\n","cover":null,"images":[],"content":"<p>忙碌的一天，又要到下班的时候了，一天好似很忙，其实回过头来仔细想想，一天好像并没有做太多的事情，然而确实是这样子度过一天了，就像我们的青春岁月，看样子并没有经历什么，但它就这样匆匆过去了，亦忧伤，亦憧憬。</p>\n<p>还有两周就要回校参加毕业典礼了，向公司请了十天假，算上端午以及周末，大概有半个多月属于自己的日子吧，也算是大学最后一点还是以学生身份存在的时间了。早在几个月前我都在筹划这次出去游玩了，因为我想出去走走，想出去看看。纵观整个大学生涯，自己也算是去了不少地方了，屋子里车票、机票已经收纳了一沓了。看着每一张车票的起点与终点以及行程时间，还能想起那时候发生过的事，或许有些事还在记忆里面，或许可能存在我的日记里面，或许我什么也记不得了。</p>\n<p>**2015年8月15日 绵阳-上海：**距离大学开学还有一个月了，父亲陪我度过了整个高三，待我拿到通知书后，我与父亲来到上海。父亲是一个节俭的人，买了绿皮车，将近两千多公里的路程，三十多个小时的行程，脚没有办法舒展开，时间长了别的难受。当看到那些没有座位的那些人要不停地给过路人让路的时候，我觉得自己也挺幸运的，至少我还有一个属于自己的位置，不需要为别人让路。在这煎熬的行程中，我并没有去抱怨，我只是一直在想，我以后一定要努力，一定不会让我和我父亲再受这样的遭遇。</p>\n<p><strong>2015年9月14日 上海-温州</strong>：马上就要大学开学了。离开了父母，将一个人去面对新的生活了，路过杭州的时候，车窗外一片开阔的平原，让我看到极具江南特色的景象：鳞次栉比的房屋伴着小河流，来来往往的车辆川流不息，很憧憬那样“小桥流水人家”的生活，这大概是对杭州的第一印象吧。</p>\n<p>**2016年1月22日 温州-成都：**大学寒假第一次回家，运气很好，我和同学抢到了卧铺票，有了一个较舒服的乘车环境。与我通行的还有很多大学川籍同学，因此一路上也变得并不孤独，时而和他们“摆龙门阵”，累了就回床铺上面去休息一下，我记得我当时带了一本《浪潮之巅》。</p>\n<p>**2017年7月18日 温州-太原：**第一次坐飞机，带着许多憧憬出发，但让人失望的是我错过了那一天的飞机，原本安排的好好的行程，一下子把我的计划打乱了。这时候我真的很迷茫，我不知道该去哪里，我也不知道该做什么，整个脑子是一片空白，在街上走走，最后回学校见到了精神支柱。然后去了太原平遥古城，喜欢太原老大爷那种街边悠然下着象棋的生活。</p>\n<p>**2017年7月10日 嘉兴-福州：**又是一次暑假，我去嘉兴看望我爸，然后我爸他们提议去福州找我的大姑爷家玩，这一次我和我的父亲快吵了一架，因为我想让他买一张动车票，可父亲执着的只买绿皮车票，他觉得能节约钱，可是我觉得时间才是最重要的，那时候我没有一点收入，我说服不了他，绿皮车从晚上八点开到第二天早上八点，整个一晚我没有怎么睡，感慨太多，我也告诉我自己要努力。当时也写过一篇随笔：<a href=\"http://julis.wang/2017/07/10/2018%E5%B9%B4710%E9%9A%8F%E7%AC%94-%E4%BA%8E%E5%98%89%E5%85%B4-%E7%A6%8F%E5%B7%9E%E5%88%97%E8%BD%A6/\" title=\"2017年710随笔 于嘉兴-福州列车\">2017年710随笔 于嘉兴-福州列车</a></p>\n<p>**2017年9月02日 温州-杭州：**这一次算是第一次以异地恋的身份去见了那时喜欢的人，一路忐忑。记得那时候带的是一本《小王子》，但是感觉没有看太懂，好像过了天真的年纪，已经看不太明白小王子的天真了。</p>\n<p><strong>2018年8月23日 杭州-太原：</strong> 或许真的是和太原有缘分，时隔一年再次去太原，这次我并没有错过，过了一年，变得成熟些了，这时候我已经在参加实习了。这次是代表整个学校唯一一只队伍进电子商务全国总决赛，压力与动力并存吧。</p>\n<p>**2019年2月14日 德阳-成都：**这是最近一次从家出发去杭州在成都中转，在德阳站中因为高铁晚点，我遇到了一个女孩子，或许这是读大学以后认识的第一个非本大学的四川女孩子吧，或许是缘分，我和她是同一辆车，在德阳到成都只有短短半个小时的行车时间，居然车晚点将近两个小时，于是和她就聊啊、聊啊，从小学说到初中高中，从高中说到大学，再从大学说到实习。原来她也和我一样是大四的学生，原来我和她大学同学是初中高中同学，真的是缘分吧。第一次是多么的希望列车晚点的时间能够再长一点。只可惜，我本将心照明月，奈何明月照沟渠。</p>\n<p>……</p>\n<p><strong>2019年6月10日 杭州-青岛、烟台、威海、大连？</strong>  或许是在被公司同事的鼓励下：现在有时间多出去玩玩吧，实习一天也没有多少钱，等以后正式工作了，有钱也没有时间了，趁现在，多出去走走吧。感谢芳姐姐对我的支助，让我有机会去计划这次旅行。</p>\n<p>这一次，我是第一次一个人的旅行，我想在这炎热的夏天里，走出屋子，踏上行程。去坐一次轮渡、我还想再使用学生证享受一次学生特权、然后去看看海、去吹吹风、去看看更多的天空、去认识的人并说：“很高兴认识你”。也算是对整个大学青春岁月画上一个句号吧。<br>那接下来的一路上又会发生什么故事呢？</p>\n<p>最后以王小波的《黄金时代》结尾吧：<strong>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</strong></p>\n<p>我还年轻，我还可以到处走走，我还有很多想要去憧憬的、盼望的……</p>\n<p>–于2019.06.04 7:24 即将下班回家</p>\n","categories":[{"name":"生活感想","slug":"life","api":"api/categories/life.json"}],"tags":[{"name":"旅行","slug":"travel","api":"api/tags/travel.json"}],"api":"api/posts/2019/06/04/写在毕业之际旅行前.json"},{"title":"95后，毕业半年，你过得好吗？","slug":"95后的你们毕业半年过得还好么？","date":"2019-05-20T01:42:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/05/20/95后的你们毕业半年过得还好么？/","excerpt":"<p>原帖：<a href=\"https://www.zhihu.com/question/307640916/answer/686748493\">https://www.zhihu.com/question/307640916/answer/686748493</a><br>95后，毕业半年，你过得好吗？<br>亲爱的95后，毕业两年，你过得怎么样了？充实或是空虚，甜蜜还是苦涩，热爱生活还是生无可恋，期待写下你的故事。</p>\n<p>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧：<br>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧。</p>\n<p>在这里我好想讲讲近一年的实习生活，过得日子也算是充满酸甜苦辣吧。从刚开始从公司实习开始讲吧：当时的我好像什么都会，php也会、python、java、安卓啥都会一样，经过被阿里面试打击后，可以看此帖子：<a href=\"https://www.zhihu.com/question/268713348/answer/352195054\">https://www.zhihu.com/question/268713348/answer/352195054</a></p>\n<p>我稍微收敛了一点了吧，最后进入了杭州一家互联网公司，刚开始是干php的，干了一个多月一点，感觉并没有学到多少东西，做的业务比较多，因为我属于“实习”的状态吧，安排的任务也比较少，所以每天的日子过得也很“悠闲”，每天干完就回家了，大概下午六点多就走了……这前面的php实习期间算是伏笔吧。之后由于刚好公司内部有个安卓实习的位置，好像是没有招到合适的吧，最开始面试的时候说了我什么都会，所以有幸被调到了安卓组里面。我发现好像每天的需求做起来还是那么简单，所以每天依然走得特别早吧，还有点沾沾自喜的样子，然而回到家并没有继续学习相关知识，要不就和女朋友（ broken up.）漫步钱塘江边，要么就是回到家里写写字看看其他类型的书，反正过得很舒服吧。</p>\n<p>直到有一天我被“伤自尊”了，一度自我感觉良好的我被组内的同事叫去看一个问题，我看了很久也看不出来，因为很多Java基础我都有些快忘了吧，基础不太扎实，我对代码的深度理解也有问题，我只停留在用的阶段，我不懂其原理，我只会使用，我连他们的源码都没有看过。</p>\n<p>后来被他鞭策道：你现在确实很厉害，比我当时刚出大学的时候厉害多了，但是我觉得我一点比你做的好，那就是我一直坚持在学习。你每天回去那么早没有学习，你在做什么？你现在对你自己的定位有些问题，现在你虽然觉得这些需求能做，但是你知道这些需求都是最简单的，工作难度都是最低的，我们为什么不把那些高难的任务给你？是因为你现在能力还不够，现在给你简单任务就是想让你多一些时间去学习，让你尽早能够跟上团队的步伐。实话给你说：你很菜！你真的很菜……你师傅可能不太好给你讲所以我才给你讲这些，如果你现在的状态，你永远只能做那些最简单的任务，可能连之后的校招offer都拿不到，就算侥幸8月份能拿到校招offer，也许你之后能侥幸转正，但是你不坚持学习的话迟早会被行业淘汰……</p>\n<p>这位前辈的话一直在我脑海里面印象深刻，我是一个不服输的人，在被鞭策后，我真的不服气，我也不认输，当时他叫我周末会去看一看”EventBus”的源码，然后周一向他汇报一下看的结果。周末连续两天都在看其源码，说实话看起来真的很痛苦，因为自己以前都是直接用，不会去关心它内部的逻辑，但是依然坚持看了两天，做了很多笔记，把它内部实现逻辑也搞明白了。忐忑不安地等到了周一，我向他汇报，我给他讲述了内部原理以及源码解读，他给我提了几个问题，我答上了一半多一点，我正沾沾自喜时，他给我说：如果给你这次评价满分一百分的话，我最多给你打20分。</p>\n<p>**！！！！20分，我的天！**我当时一下子整个人就不好了，甚至都想去反驳他了，可是他之后给我讲得东西，让我打消了这个念头，我确实菜。我确实认识到了自己的不足，对源代码的解读真的还不够，Java基础也不太扎实，包括我的师傅也这样认为，我是一个不服输的人，不服气。我向我师傅请教了，大概给自己定了一个短期的学习计划：先把Java基础过一遍，再过一遍Android基础过一把，再开始去理解安卓深度的东西。从此开始，我感觉我开始暴走了。</p>\n<p>我每天都背一两本书回去学习，在地铁上有时候位置空我也会拿出来继续学习，偶尔还是会找女朋友去玩，但是当我11点钟回到家，我还是会拿出书来继续学习。然后第二天我会和我的师傅讲我昨天学了什么，然后讲出我的疑问。我的师傅真的是一个很耐心的人，他会给我仔细地讲解，包括平时的问题，如果我向组内请教问：1+1等于几？ 他们会告诉我等于2。然而我的师傅会告诉我 加法口诀表，甚至是乘法口诀表。那时候我每天都不曾忘记学习，每天都会去研究，那一段时间我真的压力很大，经常性的失眠，心跳特别快，后面也去看过一次医生说是“心悸”。当然那也是在压力下人做出的一些极端反应，所幸的是我坚持了过来。八月中，HR把我叫了过去，我还以为她又要批判我了，因为最开始被团队的人给鞭策了之后，她也找过我谈话了：你如果还继续现在的状态，可能之后的校招offer都不会发给你。这一次不一样了，她给我讲了我转正后的待遇，什么期权还要公积金啥啥啥的，然后讲了工资多少多少，其实工资是有点超乎我预期的。她讲完之后，我真的笑了，真的开心了，我忍不住笑了起来。她问：开心吗？我一直点头。或许这是对努力之后最好的回报吧！那一刻真的，心里有太多说不出来，打心地的开心。</p>\n<p>拿到校招offer我还是坚持学习吧，只是强度没有之前那样强了，但是依然坚持每天要学习。现在我觉得每天每周过得生活都特别的充实吧，我们不是996。公司9点上班，弹性打卡9个小时，也就是说早上9点钟打卡，下午6点钟就可以走了，但是大部分人并不是6点钟走。现在自己每天早上都会比较期盼去公司，因为每次做需求，我都并不把他当做我的“工作”在做，而我认为那是我的兴趣爱好。我喜欢敲代码的感觉，我喜欢那种自己去设计思路想法，最后打磨出来产品的过程。而我们做出的成果会是被几百万用户所使用，肩上也有一种责任感吧。然后也带来了成就感，比如公司的宣传片或者展示公告大牌上面印着app的应用界面图，会看到里面有一部分是我做得，我是多么的开心呀。一次室友的朋友过来了，我们聊着天，后来聊到它妈妈也在用我们做得app，它给我说它妈妈怎么怎么这个App，我说啊，这里就是我做的呀。哇！厉害咯。我对工作保持乐观态度，因为我可以向厉害的前辈们请教问题，向他们学习，我每天都感觉自己有收获，所以在公司让我感觉过得很开心，没有太大的压力，每天都在进步。</p>\n<p>当然回到家了，我也有该做的事，我也有我的兴趣，大概每天7.30左右下班回家，回到家快8.30了。我也有自己追求，我在学日语，打算能在明年去一趟日本，感受一下不同的文化。日语学累了，我会继续学习相关专业的书籍，或者写写字，我比较喜欢写字，虽然没有很飘逸炫酷，但是我觉得写完之后看起来特别的舒服，这也算是一种成就感把，大概学到10.30收拾洗漱，大概11点左右上床了，我会继续看一些相关的书籍，比如最近在看《红楼梦》，厚厚的一本，渐渐地书签也跑到了中间的位置吧。</p>\n<p>至于周末，我可能比较放松吧，周末我会学着去做做菜，不再想吃外卖了，真的难吃且贵。</p>\n<p>有时候也会去绿城主场看看绿城踢球吧，虽然心里支持的四川队，但是远在他乡没有办法了。</p>\n<p>最后附上自己毕业答辩后拍的照片，算是对自己充实的大学生活的怀念吧。</p>\n<p>总之，我觉得自己每天都过得很充实吧，很热爱自己的生活。</p>\n<h2 id=\"愿每一个你们的生活都过得幸福。\"><a href=\"#愿每一个你们的生活都过得幸福。\" class=\"headerlink\" title=\"愿每一个你们的生活都过得幸福。\"></a>愿每一个你们的生活都过得幸福。</h2>","cover":null,"images":[],"content":"<p>原帖：<a href=\"https://www.zhihu.com/question/307640916/answer/686748493\">https://www.zhihu.com/question/307640916/answer/686748493</a><br>95后，毕业半年，你过得好吗？<br>亲爱的95后，毕业两年，你过得怎么样了？充实或是空虚，甜蜜还是苦涩，热爱生活还是生无可恋，期待写下你的故事。</p>\n<p>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧：<br>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧。</p>\n<p>在这里我好想讲讲近一年的实习生活，过得日子也算是充满酸甜苦辣吧。从刚开始从公司实习开始讲吧：当时的我好像什么都会，php也会、python、java、安卓啥都会一样，经过被阿里面试打击后，可以看此帖子：<a href=\"https://www.zhihu.com/question/268713348/answer/352195054\">https://www.zhihu.com/question/268713348/answer/352195054</a></p>\n<p>我稍微收敛了一点了吧，最后进入了杭州一家互联网公司，刚开始是干php的，干了一个多月一点，感觉并没有学到多少东西，做的业务比较多，因为我属于“实习”的状态吧，安排的任务也比较少，所以每天的日子过得也很“悠闲”，每天干完就回家了，大概下午六点多就走了……这前面的php实习期间算是伏笔吧。之后由于刚好公司内部有个安卓实习的位置，好像是没有招到合适的吧，最开始面试的时候说了我什么都会，所以有幸被调到了安卓组里面。我发现好像每天的需求做起来还是那么简单，所以每天依然走得特别早吧，还有点沾沾自喜的样子，然而回到家并没有继续学习相关知识，要不就和女朋友（ broken up.）漫步钱塘江边，要么就是回到家里写写字看看其他类型的书，反正过得很舒服吧。</p>\n<p>直到有一天我被“伤自尊”了，一度自我感觉良好的我被组内的同事叫去看一个问题，我看了很久也看不出来，因为很多Java基础我都有些快忘了吧，基础不太扎实，我对代码的深度理解也有问题，我只停留在用的阶段，我不懂其原理，我只会使用，我连他们的源码都没有看过。</p>\n<p>后来被他鞭策道：你现在确实很厉害，比我当时刚出大学的时候厉害多了，但是我觉得我一点比你做的好，那就是我一直坚持在学习。你每天回去那么早没有学习，你在做什么？你现在对你自己的定位有些问题，现在你虽然觉得这些需求能做，但是你知道这些需求都是最简单的，工作难度都是最低的，我们为什么不把那些高难的任务给你？是因为你现在能力还不够，现在给你简单任务就是想让你多一些时间去学习，让你尽早能够跟上团队的步伐。实话给你说：你很菜！你真的很菜……你师傅可能不太好给你讲所以我才给你讲这些，如果你现在的状态，你永远只能做那些最简单的任务，可能连之后的校招offer都拿不到，就算侥幸8月份能拿到校招offer，也许你之后能侥幸转正，但是你不坚持学习的话迟早会被行业淘汰……</p>\n<p>这位前辈的话一直在我脑海里面印象深刻，我是一个不服输的人，在被鞭策后，我真的不服气，我也不认输，当时他叫我周末会去看一看”EventBus”的源码，然后周一向他汇报一下看的结果。周末连续两天都在看其源码，说实话看起来真的很痛苦，因为自己以前都是直接用，不会去关心它内部的逻辑，但是依然坚持看了两天，做了很多笔记，把它内部实现逻辑也搞明白了。忐忑不安地等到了周一，我向他汇报，我给他讲述了内部原理以及源码解读，他给我提了几个问题，我答上了一半多一点，我正沾沾自喜时，他给我说：如果给你这次评价满分一百分的话，我最多给你打20分。</p>\n<p>**！！！！20分，我的天！**我当时一下子整个人就不好了，甚至都想去反驳他了，可是他之后给我讲得东西，让我打消了这个念头，我确实菜。我确实认识到了自己的不足，对源代码的解读真的还不够，Java基础也不太扎实，包括我的师傅也这样认为，我是一个不服输的人，不服气。我向我师傅请教了，大概给自己定了一个短期的学习计划：先把Java基础过一遍，再过一遍Android基础过一把，再开始去理解安卓深度的东西。从此开始，我感觉我开始暴走了。</p>\n<p>我每天都背一两本书回去学习，在地铁上有时候位置空我也会拿出来继续学习，偶尔还是会找女朋友去玩，但是当我11点钟回到家，我还是会拿出书来继续学习。然后第二天我会和我的师傅讲我昨天学了什么，然后讲出我的疑问。我的师傅真的是一个很耐心的人，他会给我仔细地讲解，包括平时的问题，如果我向组内请教问：1+1等于几？ 他们会告诉我等于2。然而我的师傅会告诉我 加法口诀表，甚至是乘法口诀表。那时候我每天都不曾忘记学习，每天都会去研究，那一段时间我真的压力很大，经常性的失眠，心跳特别快，后面也去看过一次医生说是“心悸”。当然那也是在压力下人做出的一些极端反应，所幸的是我坚持了过来。八月中，HR把我叫了过去，我还以为她又要批判我了，因为最开始被团队的人给鞭策了之后，她也找过我谈话了：你如果还继续现在的状态，可能之后的校招offer都不会发给你。这一次不一样了，她给我讲了我转正后的待遇，什么期权还要公积金啥啥啥的，然后讲了工资多少多少，其实工资是有点超乎我预期的。她讲完之后，我真的笑了，真的开心了，我忍不住笑了起来。她问：开心吗？我一直点头。或许这是对努力之后最好的回报吧！那一刻真的，心里有太多说不出来，打心地的开心。</p>\n<p>拿到校招offer我还是坚持学习吧，只是强度没有之前那样强了，但是依然坚持每天要学习。现在我觉得每天每周过得生活都特别的充实吧，我们不是996。公司9点上班，弹性打卡9个小时，也就是说早上9点钟打卡，下午6点钟就可以走了，但是大部分人并不是6点钟走。现在自己每天早上都会比较期盼去公司，因为每次做需求，我都并不把他当做我的“工作”在做，而我认为那是我的兴趣爱好。我喜欢敲代码的感觉，我喜欢那种自己去设计思路想法，最后打磨出来产品的过程。而我们做出的成果会是被几百万用户所使用，肩上也有一种责任感吧。然后也带来了成就感，比如公司的宣传片或者展示公告大牌上面印着app的应用界面图，会看到里面有一部分是我做得，我是多么的开心呀。一次室友的朋友过来了，我们聊着天，后来聊到它妈妈也在用我们做得app，它给我说它妈妈怎么怎么这个App，我说啊，这里就是我做的呀。哇！厉害咯。我对工作保持乐观态度，因为我可以向厉害的前辈们请教问题，向他们学习，我每天都感觉自己有收获，所以在公司让我感觉过得很开心，没有太大的压力，每天都在进步。</p>\n<p>当然回到家了，我也有该做的事，我也有我的兴趣，大概每天7.30左右下班回家，回到家快8.30了。我也有自己追求，我在学日语，打算能在明年去一趟日本，感受一下不同的文化。日语学累了，我会继续学习相关专业的书籍，或者写写字，我比较喜欢写字，虽然没有很飘逸炫酷，但是我觉得写完之后看起来特别的舒服，这也算是一种成就感把，大概学到10.30收拾洗漱，大概11点左右上床了，我会继续看一些相关的书籍，比如最近在看《红楼梦》，厚厚的一本，渐渐地书签也跑到了中间的位置吧。</p>\n<p>至于周末，我可能比较放松吧，周末我会学着去做做菜，不再想吃外卖了，真的难吃且贵。</p>\n<p>有时候也会去绿城主场看看绿城踢球吧，虽然心里支持的四川队，但是远在他乡没有办法了。</p>\n<p>最后附上自己毕业答辩后拍的照片，算是对自己充实的大学生活的怀念吧。</p>\n<p>总之，我觉得自己每天都过得很充实吧，很热爱自己的生活。</p>\n<h2 id=\"愿每一个你们的生活都过得幸福。\"><a href=\"#愿每一个你们的生活都过得幸福。\" class=\"headerlink\" title=\"愿每一个你们的生活都过得幸福。\"></a>愿每一个你们的生活都过得幸福。</h2>","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"知乎","slug":"zhihu","api":"api/tags/zhihu.json"}],"api":"api/posts/2019/05/20/95后的你们毕业半年过得还好么？.json"},{"title":"基于Volley框架的返回数据的范型处理","slug":"基于Volley框架的返回数据的范型处理","date":"2019-05-13T06:56:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/05/13/基于Volley框架的返回数据的范型处理/","excerpt":"<p>在平时最普通的Volley的网络请求中，我们StringRequest是这样请求网络数据的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringRequest</span> <span class=\"variable\">stringRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRequest</span>(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(String response)</span> &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;TAG&quot;</span>, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>.ErrorListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, error.getMessage(), error);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>注意在onResponse的时候是拿到的string类型，拿到string后对其再进行相关的解析，我们是否是可以对其直接封装然后拿到具体想要类型的model数据结构呢？所以对其网络请求架构进行一次封装，到达如下效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GetGoodDetailByGidRequest</span> <span class=\"variable\">getGoodDetailByGidRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span>(mCouponId,</span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">RequestListener</span>&lt;List&lt;CouponModel&gt;&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">(List&lt;CouponModel&gt; result)</span> &#123;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">                      e.printStackTrace();</span><br><span class=\"line\">                      stopLoadingDialog();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里我们在构造Request的时候指定了返回数据的类型，这样的话就方便了我们在写业务的时候直接使用解析好的数据结构，具体如何做到的呢？</p>\n<p><strong>一、让每个Request基于一个带有范型请求类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseApiRequest</span>&lt;T&gt;  </span><br></pre></td></tr></table></figure>\n<p>这里的T就是目标请求期望的model类<br>在具体实现的时候继承基类，并指定返回类型，下面是一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseApiRequest</span>&lt;List&lt;CouponModel&gt;&gt; &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> CURL.GoodDetailURL;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"title function_\">GetGoodDetailByGidRequest</span><span class=\"params\">(String goodId, RequestListener&lt;List&lt;CouponModel&gt;&gt; requestListener)</span> &#123;</span><br><span class=\"line\">       \t\t<span class=\"built_in\">super</span>(requestListener);</span><br><span class=\"line\">       \t\t<span class=\"built_in\">this</span>.mUrlParams.put(<span class=\"string\">&quot;id&quot;</span>, goodId);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> String <span class=\"title function_\">getBaseUrl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       \t\t<span class=\"keyword\">return</span> url;</span><br><span class=\"line\">  \t\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二、在基类中构造网络请求</strong>\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> StringRequest <span class=\"title function_\">getStringRequest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRequest</span>(requestMethod, getRequestUrl(),</span><br><span class=\"line\">             response -&gt; parseJson(response),</span><br><span class=\"line\">             error -&gt; requestListener.onError(error)) &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title function_\">getParams</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> mEntityParams;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在此处实现可以看到Request在基类中进行，然后分别处理返回结果</p>\n<p><strong>三、对返回结果进行解析</strong>\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseJson</span><span class=\"params\">(String response)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">responseCode</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">errorCode</span> <span class=\"operator\">=</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(response);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"type\">String</span> <span class=\"variable\">resultString</span> <span class=\"operator\">=</span> jsonObject.getString(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (jsonObject.has(<span class=\"string\">&quot;code&quot;</span>)) &#123;</span><br><span class=\"line\">              responseCode = jsonObject.getInt(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (jsonObject.has(<span class=\"string\">&quot;error&quot;</span>)) &#123;</span><br><span class=\"line\">              errorCode = jsonObject.getInt(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (responseCode == <span class=\"number\">200</span> || errorCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!TextUtils.isEmpty(response)) &#123;</span><br><span class=\"line\">                  <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">                  <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">                  <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">                  requestListener.onSuccess(t);</span><br><span class=\"line\">                  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              ToastUtils.showToast(<span class=\"string\">&quot;Data is empty!&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ToastUtils.showToast(<span class=\"string\">&quot;Response code is error.&quot;</span>);</span><br><span class=\"line\">          requestListener.onError(<span class=\"keyword\">new</span> <span class=\"title class_\">ParseError</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">          ToastUtils.showToast(e.toString());</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里是最关键的一步，由于和后端约定好相关返回字段，那么只需要解析字段中目标model的数据，其中比较重要的是这段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">    <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">     <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">     requestListener.onSuccess(t);</span><br><span class=\"line\">```\t </span><br><span class=\"line\">通过封装好的 JsonUtils将String转化为对应的model类型，我们知道json转实体对象的时候，需要指明其类type，那这里的type是如何获取到的呢？</span><br><span class=\"line\"></span><br><span class=\"line\">其中getTType ()的具体实现为：</span><br><span class=\"line\"> ```java</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type <span class=\"title function_\">getTType</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以Type的形式返回本类直接实现的接口.</span></span><br><span class=\"line\">        Type[] types = clazz.getGenericInterfaces();</span><br><span class=\"line\">        clazz.getInterfaces();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//返回表示此类型实际类型参数的 Type 对象的数组</span></span><br><span class=\"line\">            Type[] interfacesTypes = ((ParameterizedType) types[<span class=\"number\">0</span>]).getActualTypeArguments();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> interfacesTypes[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过次方法能够获取到请求实现中所指明的请求类型，其中getGenericInterfaces等相关原理可以阅读：<a href=\"https://my.oschina.net/617669559/blog/3012228\">https://my.oschina.net/617669559/blog/3012228</a></p>\n<p>所以对于\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseApiRequest</span>&lt;List&lt;CouponModel&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>那么获取到的就是List<CouponModel>类型</p>\n<p><strong>四、通过Listener回调相关解析结果</strong>\t</p>\n<p>拿到解析好的result并回调给构造Request方法中的listener使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">requestListener.onSuccess(t);</span><br></pre></td></tr></table></figure>\n<p>这样对整个网络请求后的返回数据直接进行解析方便多了。</p>\n<p><strong>总结：</strong></p>\n<p>1、本文最主要是对基本Request类进行改造，以达到不需要每次重复写解析返回的String数据</p>\n<p>2、在获取目标的类的类型的时候，主要是去获取基类中的“T”类型</p>\n<p>3、设计不仅适用用Volley同样适用于其他类似的网络请求框架</p>\n","cover":null,"images":[],"content":"<p>在平时最普通的Volley的网络请求中，我们StringRequest是这样请求网络数据的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringRequest</span> <span class=\"variable\">stringRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRequest</span>(<span class=\"string\">&quot;http://www.baidu.com&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(String response)</span> &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">&quot;TAG&quot;</span>, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>.ErrorListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onErrorResponse</span><span class=\"params\">(VolleyError error)</span> &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, error.getMessage(), error);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>注意在onResponse的时候是拿到的string类型，拿到string后对其再进行相关的解析，我们是否是可以对其直接封装然后拿到具体想要类型的model数据结构呢？所以对其网络请求架构进行一次封装，到达如下效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GetGoodDetailByGidRequest</span> <span class=\"variable\">getGoodDetailByGidRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span>(mCouponId,</span><br><span class=\"line\">              <span class=\"keyword\">new</span> <span class=\"title class_\">RequestListener</span>&lt;List&lt;CouponModel&gt;&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">(List&lt;CouponModel&gt; result)</span> &#123;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">                      e.printStackTrace();</span><br><span class=\"line\">                      stopLoadingDialog();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里我们在构造Request的时候指定了返回数据的类型，这样的话就方便了我们在写业务的时候直接使用解析好的数据结构，具体如何做到的呢？</p>\n<p><strong>一、让每个Request基于一个带有范型请求类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseApiRequest</span>&lt;T&gt;  </span><br></pre></td></tr></table></figure>\n<p>这里的T就是目标请求期望的model类<br>在具体实现的时候继承基类，并指定返回类型，下面是一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseApiRequest</span>&lt;List&lt;CouponModel&gt;&gt; &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> CURL.GoodDetailURL;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"title function_\">GetGoodDetailByGidRequest</span><span class=\"params\">(String goodId, RequestListener&lt;List&lt;CouponModel&gt;&gt; requestListener)</span> &#123;</span><br><span class=\"line\">       \t\t<span class=\"built_in\">super</span>(requestListener);</span><br><span class=\"line\">       \t\t<span class=\"built_in\">this</span>.mUrlParams.put(<span class=\"string\">&quot;id&quot;</span>, goodId);</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> String <span class=\"title function_\">getBaseUrl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       \t\t<span class=\"keyword\">return</span> url;</span><br><span class=\"line\">  \t\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>二、在基类中构造网络请求</strong>\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> StringRequest <span class=\"title function_\">getStringRequest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRequest</span>(requestMethod, getRequestUrl(),</span><br><span class=\"line\">             response -&gt; parseJson(response),</span><br><span class=\"line\">             error -&gt; requestListener.onError(error)) &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title function_\">getParams</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> mEntityParams;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在此处实现可以看到Request在基类中进行，然后分别处理返回结果</p>\n<p><strong>三、对返回结果进行解析</strong>\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseJson</span><span class=\"params\">(String response)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">responseCode</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">errorCode</span> <span class=\"operator\">=</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(response);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"type\">String</span> <span class=\"variable\">resultString</span> <span class=\"operator\">=</span> jsonObject.getString(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (jsonObject.has(<span class=\"string\">&quot;code&quot;</span>)) &#123;</span><br><span class=\"line\">              responseCode = jsonObject.getInt(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (jsonObject.has(<span class=\"string\">&quot;error&quot;</span>)) &#123;</span><br><span class=\"line\">              errorCode = jsonObject.getInt(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (responseCode == <span class=\"number\">200</span> || errorCode == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!TextUtils.isEmpty(response)) &#123;</span><br><span class=\"line\">                  <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">                  <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">                  <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">                  requestListener.onSuccess(t);</span><br><span class=\"line\">                  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              ToastUtils.showToast(<span class=\"string\">&quot;Data is empty!&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ToastUtils.showToast(<span class=\"string\">&quot;Response code is error.&quot;</span>);</span><br><span class=\"line\">          requestListener.onError(<span class=\"keyword\">new</span> <span class=\"title class_\">ParseError</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">          ToastUtils.showToast(e.toString());</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这里是最关键的一步，由于和后端约定好相关返回字段，那么只需要解析字段中目标model的数据，其中比较重要的是这段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">    <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">     <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">     requestListener.onSuccess(t);</span><br><span class=\"line\">```\t </span><br><span class=\"line\">通过封装好的 JsonUtils将String转化为对应的model类型，我们知道json转实体对象的时候，需要指明其类type，那这里的type是如何获取到的呢？</span><br><span class=\"line\"></span><br><span class=\"line\">其中getTType ()的具体实现为：</span><br><span class=\"line\"> ```java</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type <span class=\"title function_\">getTType</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//以Type的形式返回本类直接实现的接口.</span></span><br><span class=\"line\">        Type[] types = clazz.getGenericInterfaces();</span><br><span class=\"line\">        clazz.getInterfaces();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//返回表示此类型实际类型参数的 Type 对象的数组</span></span><br><span class=\"line\">            Type[] interfacesTypes = ((ParameterizedType) types[<span class=\"number\">0</span>]).getActualTypeArguments();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> interfacesTypes[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过次方法能够获取到请求实现中所指明的请求类型，其中getGenericInterfaces等相关原理可以阅读：<a href=\"https://my.oschina.net/617669559/blog/3012228\">https://my.oschina.net/617669559/blog/3012228</a></p>\n<p>所以对于\t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetGoodDetailByGidRequest</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseApiRequest</span>&lt;List&lt;CouponModel&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>那么获取到的就是List<CouponModel>类型</p>\n<p><strong>四、通过Listener回调相关解析结果</strong>\t</p>\n<p>拿到解析好的result并回调给构造Request方法中的listener使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">requestListener.onSuccess(t);</span><br></pre></td></tr></table></figure>\n<p>这样对整个网络请求后的返回数据直接进行解析方便多了。</p>\n<p><strong>总结：</strong></p>\n<p>1、本文最主要是对基本Request类进行改造，以达到不需要每次重复写解析返回的String数据</p>\n<p>2、在获取目标的类的类型的时候，主要是去获取基类中的“T”类型</p>\n<p>3、设计不仅适用用Volley同样适用于其他类似的网络请求框架</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"安卓","slug":"Android","api":"api/tags/Android.json"}],"api":"api/posts/2019/05/13/基于Volley框架的返回数据的范型处理.json"},{"title":"Java反射中getGenericInterfaces和getInterfaces的解读","slug":"My-Java反射中getGenericInterfaces和getInterfaces的解读","date":"2019-05-05T11:12:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/05/05/My-Java反射中getGenericInterfaces和getInterfaces的解读/","excerpt":"<p>今天在做解析网络请求后得到的数据的转化的时候用到了：getGenericInterfaces这个方法。<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取回调接口中 T 的具体类型</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> clazz</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type <span class=\"title function_\">getTType</span><span class=\"params\">(Class clazz)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//以Type的形式返回本类直接实现的接口.</span></span><br><span class=\"line\">    Type[] types = clazz.getGenericInterfaces();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回表示此类型实际类型参数的 Type 对象的数组</span></span><br><span class=\"line\">        Type[] interfacesTypes = ((ParameterizedType) types[<span class=\"number\">0</span>]).getActualTypeArguments();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interfacesTypes[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\t\n\t\n\t</p>\n<p>其中回调接口为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RequestListener</span> &lt;&gt; () &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span> <span class=\"params\">(List result)</span>&#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//在解析数据的时候这样操作，目的是为了对所有返回的数据进行数据转化为所指定的类型：</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">     <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">     <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">     requestListener.onSuccess(t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类RequestListener为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RequestListener</span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">(T result)</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Exception e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Gson进行json的解析，T fromJson(String json, Type typeOfT);那么怎么才能获取到RequestListener中的的类型呢？<br>于是我们从接口获取参数化类型处理。</p>\n<p>官方文档解释</p>\n<p>getGenericInterfaces：</p>\n<blockquote>\n<p>Returns the {@code Type}s representing the interfaces directly implemented by the class or interface represented by this object.释意：返回表示由此对象表示的类或接口直接实现的接口的{@code Type}。</p>\n</blockquote>\n<p>getInterfaces：</p>\n<blockquote>\n<p>Determines the interfaces implemented by the class or interface represented by this object.<br> 释意：返回由此对象表示的类或接口实现的接口。</p>\n</blockquote>\n<p>从解释上面来看出来了，差异在于“接口实现的接口的Type”，接下来用具体示例来解释区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Food</span>&#123;</span><br><span class=\"line\">    String foodName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String things)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Run</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Eat</span>,Run&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String things)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Dog.class;</span><br><span class=\"line\">    Type[] genericInterfaces = clazz.getGenericInterfaces();</span><br><span class=\"line\">    Class[] interfaces = clazz.getInterfaces();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>运行结果\n&#123;% qnimg 245442107557694aef0f07c25be0740187c.jpg %&#125;\n</code></pre>\n<p>我们可以看到，clazz.getGenericInterfaces()与clazz.getInterfaces()并没有任何差异。因为 并没有：“实现的接口的Type”</p>\n<p>接下来看另一段代码,我们对Eat接口改造一下，增加一个参数化类型</p>\n<pre class=\" language-language-java\"><code class=\"language-language-java\">    private class Food&#123;\n        String foodName;\n    &#125;\n    private interface Eat&#123;\n        void eat(T things);\n    &#125;\n    private interface Run&#123;\n        void run();\n    &#125;\n\n    private class Dog implements Eat,Run&#123;\n        @Override\n        public void run() &#123; &#125;\n        @Override\n        public void eat(Food things) &#123; &#125;\n    &#125;\n    private void main() &#123;\n        Class clazz = Dog.class;\n        Type[] genericInterfaces = clazz.getGenericInterfaces();\n        Class[] interfaces = clazz.getInterfaces();\n    &#125;\n</code></pre>\n<pre><code>运行结果：\n</code></pre>\n<img src=\"https://cdn.julis.wang/blog/img/1e8dd5258232de0b459be594f9793283c0a.jpg\">","cover":null,"images":["https://cdn.julis.wang/blog/img/1e8dd5258232de0b459be594f9793283c0a.jpg"],"content":"<p>今天在做解析网络请求后得到的数据的转化的时候用到了：getGenericInterfaces这个方法。<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 获取回调接口中 T 的具体类型</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> clazz</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type <span class=\"title function_\">getTType</span><span class=\"params\">(Class clazz)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//以Type的形式返回本类直接实现的接口.</span></span><br><span class=\"line\">    Type[] types = clazz.getGenericInterfaces();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//返回表示此类型实际类型参数的 Type 对象的数组</span></span><br><span class=\"line\">        Type[] interfacesTypes = ((ParameterizedType) types[<span class=\"number\">0</span>]).getActualTypeArguments();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interfacesTypes[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\t\n\t\n\t</p>\n<p>其中回调接口为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RequestListener</span> &lt;&gt; () &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span> <span class=\"params\">(List result)</span>&#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//在解析数据的时候这样操作，目的是为了对所有返回的数据进行数据转化为所指定的类型：</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Type</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> getTType(requestListener.getClass());</span><br><span class=\"line\">     <span class=\"comment\">//泛型是实体或者List等类型</span></span><br><span class=\"line\">     <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> JsonUtils.fromJson(resultString, type);</span><br><span class=\"line\">     requestListener.onSuccess(t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类RequestListener为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RequestListener</span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span><span class=\"params\">(T result)</span>;</span><br><span class=\"line\">   \t<span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Exception e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用Gson进行json的解析，T fromJson(String json, Type typeOfT);那么怎么才能获取到RequestListener中的的类型呢？<br>于是我们从接口获取参数化类型处理。</p>\n<p>官方文档解释</p>\n<p>getGenericInterfaces：</p>\n<blockquote>\n<p>Returns the {@code Type}s representing the interfaces directly implemented by the class or interface represented by this object.释意：返回表示由此对象表示的类或接口直接实现的接口的{@code Type}。</p>\n</blockquote>\n<p>getInterfaces：</p>\n<blockquote>\n<p>Determines the interfaces implemented by the class or interface represented by this object.<br> 释意：返回由此对象表示的类或接口实现的接口。</p>\n</blockquote>\n<p>从解释上面来看出来了，差异在于“接口实现的接口的Type”，接下来用具体示例来解释区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Food</span>&#123;</span><br><span class=\"line\">    String foodName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String things)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Run</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Eat</span>,Run&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String things)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Dog.class;</span><br><span class=\"line\">    Type[] genericInterfaces = clazz.getGenericInterfaces();</span><br><span class=\"line\">    Class[] interfaces = clazz.getInterfaces();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>运行结果\n&#123;% qnimg 245442107557694aef0f07c25be0740187c.jpg %&#125;\n</code></pre>\n<p>我们可以看到，clazz.getGenericInterfaces()与clazz.getInterfaces()并没有任何差异。因为 并没有：“实现的接口的Type”</p>\n<p>接下来看另一段代码,我们对Eat接口改造一下，增加一个参数化类型</p>\n<pre class=\" language-language-java\"><code class=\"language-language-java\">    private class Food&#123;\n        String foodName;\n    &#125;\n    private interface Eat&#123;\n        void eat(T things);\n    &#125;\n    private interface Run&#123;\n        void run();\n    &#125;\n\n    private class Dog implements Eat,Run&#123;\n        @Override\n        public void run() &#123; &#125;\n        @Override\n        public void eat(Food things) &#123; &#125;\n    &#125;\n    private void main() &#123;\n        Class clazz = Dog.class;\n        Type[] genericInterfaces = clazz.getGenericInterfaces();\n        Class[] interfaces = clazz.getInterfaces();\n    &#125;\n</code></pre>\n<pre><code>运行结果：\n</code></pre>\n<img src=\"https://cdn.julis.wang/blog/img/1e8dd5258232de0b459be594f9793283c0a.jpg\">","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"网络","slug":"网络","api":"api/tags/网络.json"}],"api":"api/posts/2019/05/05/My-Java反射中getGenericInterfaces和getInterfaces的解读.json"},{"title":"关于大学生活总结","slug":"关于大学生活总结","date":"2019-04-30T02:23:05.000Z","updated":"2025-08-25T14:08:00.224Z","comments":true,"url":"2019/04/30/关于大学生活总结/","excerpt":"<p>这篇文章原发布于知乎，原问题为：<a href=\"https://www.zhihu.com/question/317346252/answer/655840980\">如何看待 B 站用户「–刃舞–」大学退学在家自学编程？</a>,当时毕业刚不久，有感而发，写了很多关于大学生活的事。主要是想告诉大家，大学并不是只有学习这一件事，还可以做很多很多有意思的事。</p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>看到 @刃舞 了经历，彷佛看到了自己当初的自己。以一个 学长的身份来回答这个问题吧，也算是对自己大学四年生活的一个总结吧。<br>曾几何时，我也向像他一样，满腔热情，不可一世，感觉自己很牛逼了，好像学校教的东西太少了，不能满足自己对编程技术的追求，我想学东西，我想搞出个牛逼的东西出来。于是大一开始接触Linux+php+Mysql来,这篇文章讲了自己的一些相关真实经历。<br>感觉真的成就感爆棚，做一个论坛什么之类的，数据库的增删改查用得6得不得了。<br>自己做了各种各样花里胡哨的东西，把什么Thinkphp、Bootstrap、Jquery、Foundation……之类的名字听起来很高端的框架都用了起来。我也不满足于这些东西，于是啥都学，学了C\\C++\\C#、php、又Java、后来听说爬虫这玩意儿，又接触了python,反正就是花里胡哨的东西就是一顿学！、我当时也认为大学所教授课程效率低下而且没有实际用处，但是我并没有选择退学课呀什么的，老师讲得都是啥啊，于是就逃课咯，我也给一些老师说了（比如在上Java课，而那时候我已经开始接触安卓相关了，我说这门课我能不能不用去，老师说：学校有免修，你牛逼，你去提前考试了通过了就可以不用修了。当然老师不是这么说的，大概就是这种意思吧，可是傻傻的我并没有去走免修这条路，因为我感觉自己能拿到60分，但是拿不到80分才通过的分。）但我还是没有去上课，老师也知道我不去上课也都知道我在干嘛，虽然早上没有课，但我也会保证每天是最早到学院的人，都会去工作室待在电脑面前，基本上都很晚才会回去。<br>这样一直持续了两三年，直到大三下，我才开始慌了起来，我感觉自己好像什么都懂，但是又懂得不是特别深，在大三下的时候投了简历，在下面回答有讲过相关经历:<br>经历过种种面试，大三下暑假终于进入了一家公司开始实习，以PHP开发岗位进去的，在这里有很多牛逼的人，也有各个方面的专家。我的工位就在安卓开发团队旁边，因为之前有花很多心思去做了一个安卓App,于是在闲暇时间向其中一个大哥请教：你觉得我这App怎么样？ 他稍微滑了几滑说道：这不就是大学里面期末课程设计的么？ 我瞬间就懵逼了，也被打击了，我连续搞了大半年的App，多少个日夜搞出来的，就被他这样一句话给怼了…… 之后我才渐渐知道 闭门造车，出门而不能合辙。 自己虽造了很多车，但是车拿出去之后压根就跑步太起来。在公司实习后，在导师的指导下，我知道了该学习的东西和方向，每天下班回家后也都会坚持学习，我发现我收获到的东西是在学校里面的很多倍，可能这些东西更加的实用了，因为都在面向平时所会接触到的问题靠近。我有动力，一方面是来自于实力与前辈们的差距，另一方面也是来源于内心，我想过更好的生活。<br>难道 我的大学的价值就没有太大用了么？<br>当然不是。反而充实的大学生活让我收获到了更多，也让我在那里留下了一段美好的青葱岁月。收获到的并不是金钱那么简单，大学对我的心智得到了锻炼，养成了各种良好的品行，以及各种经历让我生活更加的有趣。<br>生活在这个地球上，工作与学习只是其中的一小小部分。我们可以结交很多志同道合的朋友，我们可以在仅有的青春岁月里做一些年轻时大胆去尝试的事，我们可以做的还有很多很多……</p>\n<p>在大学里<br>曾经和这些小伙伴们一起踢过足球<br><img src=\"https://pic3.zhimg.com/80/v2-a0d4cb5f97bbac56501ad42c0ee6eb9d_1440w.jpg\" alt=\"那年莱斯特城英超冠军\"></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-8cd73363031f575f79007877c7ac8002_1440w.jpg\" alt=\"那年多特蒙德德甲冠军\"></p>\n<p>在大学里<br>曾经和这些小伙伴们代表学院参加排球赛<br>![]<a href=\"https://pic1.zhimg.com/80/v2-96a34d0bd4d1c42d52b13fc0ed7367b2_1440w.jpg\">https://pic1.zhimg.com/80/v2-96a34d0bd4d1c42d52b13fc0ed7367b2_1440w.jpg</a></p>\n<p>在大学里<br>曾在学生会“浪里白条”，从干事到部长<br><img src=\"https://pic1.zhimg.com/80/v2-74a4684a4d7a25de124a90f70efa66a4_1440w.jpg\"><br><img src=\"https://pic2.zhimg.com/80/v2-8501116a0851253846bacf280e9be84f_1440w.jpg\"></p>\n<p>在大学里<br>曾带着“五元”到城中“生存挑战”一天<br><img src=\"https://pic4.zhimg.com/80/v2-18d0e4b154b7a7659e11facb02ee6552_1440w.jpg\"></p>\n<p>在大学里<br>曾与小伙伴们游西湖并与互联网企业CEO谈话<br><img src=\"https://pic2.zhimg.com/80/v2-29480a8f92602e90681f56956403abb8_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-7b5ef03b0f4ceb0f4e6d4faad5411f2c_1440w.jpg\"></p>\n<p>在大学里<br>曾意气风发<br><img src=\"https://pic4.zhimg.com/80/v2-644f7664f01204de27133bb4fca4e65b_1440w.jpg\"></p>\n<p>在大学里<br>曾组织拍摄了一部微电影<br><img src=\"https://pic3.zhimg.com/80/v2-bc65d00bc60fbc653c97b5e8d2f8af90_1440w.jpg\"></p>\n<p>在大学里<br>曾与室友“醉生梦死”<br><img src=\"https://pic4.zhimg.com/80/v2-f0a2637f8107628a3b0b23a8078d9124_1440w.jpg\"></p>\n<p>在大学里<br>曾给大一的学弟妹们上课，教C与网页编程相关<br><img src=\"https://pic3.zhimg.com/80/v2-918fdcd42c73cb48b46192985369297e_1440w.jpg\"></p>\n<p>在大学里<br>曾上台表演小品，一口“川普”的效果引得大家哈哈大笑<br><img src=\"https://pic3.zhimg.com/80/v2-972c28867f964e1a87ec4c121410f750_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-9c34e008f37ce17a896765e58ea1dd00_1440w.jpg\"></p>\n<p>在大学里<br>也曾与大学的川籍老乡畅叙幽情<br><img src=\"https://pic1.zhimg.com/80/v2-cdb0f5459c52a12c66606ef29c4c346c_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-691923471213264b8fd61aa50717aacf_1440w.jpg\"><br>在大学里<br>也曾和我的班级同学们团结向上<br><img src=\"https://pic3.zhimg.com/80/v2-f1789a51241abb0e642dbc75e5441ced_1440w.jpg\"></p>\n<p>在大学里<br>曾与本地企业管理层一起学习<br><img src=\"https://pic4.zhimg.com/80/v2-d97d238747e2f1229f9728f178debcb8_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-5013f2bdfc163dfa72aa65e3c9d7c269_1440w.jpg\"></p>\n<p>在大学里<br>曾与那群“黑哥们儿” Did something interesting<br><img src=\"https://pic1.zhimg.com/80/v2-d1d29b2d2a6ff24dfe21dc3e91e330b8_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-7e7b869bed9954e104c25304a86671aa_1440w.jpg\"></p>\n<p>在大学里<br>也曾和我的“战友”一起战斗<br><img src=\"https://pic2.zhimg.com/80/v2-a7538607dc1e4bdc28e81bcf7d8b4b41_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-8c6543eefb3046ffe05f18109bdf56fa_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-f3678242091c39a78c86972eac336df1_1440w.jpg\"><br><img src=\"https://pic2.zhimg.com/80/v2-4e93b5299cbb5b1da5e696ebab39ad64_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-25062350c962b976ab1312a16c5fe761_1440w.jpg\"></p>\n<p>在大学里<br>也曾在创业尝试<br>xxx</p>\n<p>在大学里<br>也曾“到处奔波”<br><img src=\"https://pic4.zhimg.com/80/v2-566607d0578e8f5ee74d37079a1e11db_1440w.jpg\"></p>\n<p>添加图片注释，不超过 140 字（可选）<br>在大学里<br>也曾…</p>\n<p>在大学里<br>我见到了各式各样的人，我也去了各种各样的地方，也结交了各种各样的朋友，做了各式各样的事，真的没有什么遗憾的了。</p>\n<p>感谢大学，不仅教授了知识，也让我四年的青春没有虚度，把这些美好都永远留在了我得青春岁月里了吧。</p>\n<p>加油吧！相信自己的选择，每个人都有每个人的努力方向，只要自己不会后悔。</p>\n<p>祝成功。</p>\n<p>当时的评论存档</p>\n<blockquote>\n<p>坠入苦海销尘垢<br>认出了好多一起踢过球的同学，好像是野球社？我记得我也在的😂</p>\n</blockquote>\n<blockquote>\n<p>坠入苦海销尘垢<br>关注我的人<br>看傻了，这不是我学校吗😂题主是19届的么<br>2020-04-07</p>\n</blockquote>\n<blockquote>\n<p>刃舞<br>…… 并没有不可一世，也没觉得自己牛 x，我只想说题主描述有虚假煽动成分，自己分辨吧<br>2019-04-23<br>落叶挽歌&gt;<br>这里或许是我表达错误吧，觉得自己牛X啥啥的，但是你这样表现出来的确实是这样的。也不清楚为什么知乎这里开始议论你了，如果你真心想做些东西或者研究什么，那就自己悄悄摸摸地做吧，不需要让所有人知道，也不用去反驳别人，当你真正“出山”了，再告诉我们吧，不需要把你一阶段一阶段的东西告诉我们。我没有针对你的意思，也不认为有什么虚假煽动信息。<br>2019-04-23<br>刃舞&gt;落叶挽歌<br>我说的是题主 ……<br>哈皮做游戏&gt;落叶挽歌<br>单纯享受快乐多好。除非家里很穷，穷得交不起学费。<br>落叶挽歌&gt;哈皮做游戏<br>享受就有点过了吧，还是要正能量积极一点哈[调皮]<br>哈皮做游戏&gt;落叶挽歌<br>以前也想学知识，学东西，出去好找工作。<br>以后工作大把学习东西的时间，就缺谈恋爱的时间。<br>落叶挽歌&gt;哈皮做游戏<br>那你工作很忙哈，我还好的。</p>\n</blockquote>\n<blockquote>\n<p>知乎用户IZr076<br>真的是良心回答。答主的大学，没有遗憾了。</p>\n</blockquote>\n","cover":null,"images":["https://pic3.zhimg.com/80/v2-a0d4cb5f97bbac56501ad42c0ee6eb9d_1440w.jpg","https://pic3.zhimg.com/80/v2-8cd73363031f575f79007877c7ac8002_1440w.jpg","https://pic1.zhimg.com/80/v2-74a4684a4d7a25de124a90f70efa66a4_1440w.jpg","https://pic4.zhimg.com/80/v2-18d0e4b154b7a7659e11facb02ee6552_1440w.jpg","https://pic2.zhimg.com/80/v2-29480a8f92602e90681f56956403abb8_1440w.jpg","https://pic4.zhimg.com/80/v2-644f7664f01204de27133bb4fca4e65b_1440w.jpg","https://pic3.zhimg.com/80/v2-bc65d00bc60fbc653c97b5e8d2f8af90_1440w.jpg","https://pic4.zhimg.com/80/v2-f0a2637f8107628a3b0b23a8078d9124_1440w.jpg","https://pic3.zhimg.com/80/v2-918fdcd42c73cb48b46192985369297e_1440w.jpg","https://pic3.zhimg.com/80/v2-972c28867f964e1a87ec4c121410f750_1440w.jpg","https://pic1.zhimg.com/80/v2-cdb0f5459c52a12c66606ef29c4c346c_1440w.jpg","https://pic4.zhimg.com/80/v2-d97d238747e2f1229f9728f178debcb8_1440w.jpg","https://pic1.zhimg.com/80/v2-d1d29b2d2a6ff24dfe21dc3e91e330b8_1440w.jpg","https://pic2.zhimg.com/80/v2-a7538607dc1e4bdc28e81bcf7d8b4b41_1440w.jpg","https://pic4.zhimg.com/80/v2-566607d0578e8f5ee74d37079a1e11db_1440w.jpg"],"content":"<p>这篇文章原发布于知乎，原问题为：<a href=\"https://www.zhihu.com/question/317346252/answer/655840980\">如何看待 B 站用户「–刃舞–」大学退学在家自学编程？</a>,当时毕业刚不久，有感而发，写了很多关于大学生活的事。主要是想告诉大家，大学并不是只有学习这一件事，还可以做很多很多有意思的事。</p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>看到 @刃舞 了经历，彷佛看到了自己当初的自己。以一个 学长的身份来回答这个问题吧，也算是对自己大学四年生活的一个总结吧。<br>曾几何时，我也向像他一样，满腔热情，不可一世，感觉自己很牛逼了，好像学校教的东西太少了，不能满足自己对编程技术的追求，我想学东西，我想搞出个牛逼的东西出来。于是大一开始接触Linux+php+Mysql来,这篇文章讲了自己的一些相关真实经历。<br>感觉真的成就感爆棚，做一个论坛什么之类的，数据库的增删改查用得6得不得了。<br>自己做了各种各样花里胡哨的东西，把什么Thinkphp、Bootstrap、Jquery、Foundation……之类的名字听起来很高端的框架都用了起来。我也不满足于这些东西，于是啥都学，学了C\\C++\\C#、php、又Java、后来听说爬虫这玩意儿，又接触了python,反正就是花里胡哨的东西就是一顿学！、我当时也认为大学所教授课程效率低下而且没有实际用处，但是我并没有选择退学课呀什么的，老师讲得都是啥啊，于是就逃课咯，我也给一些老师说了（比如在上Java课，而那时候我已经开始接触安卓相关了，我说这门课我能不能不用去，老师说：学校有免修，你牛逼，你去提前考试了通过了就可以不用修了。当然老师不是这么说的，大概就是这种意思吧，可是傻傻的我并没有去走免修这条路，因为我感觉自己能拿到60分，但是拿不到80分才通过的分。）但我还是没有去上课，老师也知道我不去上课也都知道我在干嘛，虽然早上没有课，但我也会保证每天是最早到学院的人，都会去工作室待在电脑面前，基本上都很晚才会回去。<br>这样一直持续了两三年，直到大三下，我才开始慌了起来，我感觉自己好像什么都懂，但是又懂得不是特别深，在大三下的时候投了简历，在下面回答有讲过相关经历:<br>经历过种种面试，大三下暑假终于进入了一家公司开始实习，以PHP开发岗位进去的，在这里有很多牛逼的人，也有各个方面的专家。我的工位就在安卓开发团队旁边，因为之前有花很多心思去做了一个安卓App,于是在闲暇时间向其中一个大哥请教：你觉得我这App怎么样？ 他稍微滑了几滑说道：这不就是大学里面期末课程设计的么？ 我瞬间就懵逼了，也被打击了，我连续搞了大半年的App，多少个日夜搞出来的，就被他这样一句话给怼了…… 之后我才渐渐知道 闭门造车，出门而不能合辙。 自己虽造了很多车，但是车拿出去之后压根就跑步太起来。在公司实习后，在导师的指导下，我知道了该学习的东西和方向，每天下班回家后也都会坚持学习，我发现我收获到的东西是在学校里面的很多倍，可能这些东西更加的实用了，因为都在面向平时所会接触到的问题靠近。我有动力，一方面是来自于实力与前辈们的差距，另一方面也是来源于内心，我想过更好的生活。<br>难道 我的大学的价值就没有太大用了么？<br>当然不是。反而充实的大学生活让我收获到了更多，也让我在那里留下了一段美好的青葱岁月。收获到的并不是金钱那么简单，大学对我的心智得到了锻炼，养成了各种良好的品行，以及各种经历让我生活更加的有趣。<br>生活在这个地球上，工作与学习只是其中的一小小部分。我们可以结交很多志同道合的朋友，我们可以在仅有的青春岁月里做一些年轻时大胆去尝试的事，我们可以做的还有很多很多……</p>\n<p>在大学里<br>曾经和这些小伙伴们一起踢过足球<br><img src=\"https://pic3.zhimg.com/80/v2-a0d4cb5f97bbac56501ad42c0ee6eb9d_1440w.jpg\" alt=\"那年莱斯特城英超冠军\"></p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-8cd73363031f575f79007877c7ac8002_1440w.jpg\" alt=\"那年多特蒙德德甲冠军\"></p>\n<p>在大学里<br>曾经和这些小伙伴们代表学院参加排球赛<br>![]<a href=\"https://pic1.zhimg.com/80/v2-96a34d0bd4d1c42d52b13fc0ed7367b2_1440w.jpg\">https://pic1.zhimg.com/80/v2-96a34d0bd4d1c42d52b13fc0ed7367b2_1440w.jpg</a></p>\n<p>在大学里<br>曾在学生会“浪里白条”，从干事到部长<br><img src=\"https://pic1.zhimg.com/80/v2-74a4684a4d7a25de124a90f70efa66a4_1440w.jpg\"><br><img src=\"https://pic2.zhimg.com/80/v2-8501116a0851253846bacf280e9be84f_1440w.jpg\"></p>\n<p>在大学里<br>曾带着“五元”到城中“生存挑战”一天<br><img src=\"https://pic4.zhimg.com/80/v2-18d0e4b154b7a7659e11facb02ee6552_1440w.jpg\"></p>\n<p>在大学里<br>曾与小伙伴们游西湖并与互联网企业CEO谈话<br><img src=\"https://pic2.zhimg.com/80/v2-29480a8f92602e90681f56956403abb8_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-7b5ef03b0f4ceb0f4e6d4faad5411f2c_1440w.jpg\"></p>\n<p>在大学里<br>曾意气风发<br><img src=\"https://pic4.zhimg.com/80/v2-644f7664f01204de27133bb4fca4e65b_1440w.jpg\"></p>\n<p>在大学里<br>曾组织拍摄了一部微电影<br><img src=\"https://pic3.zhimg.com/80/v2-bc65d00bc60fbc653c97b5e8d2f8af90_1440w.jpg\"></p>\n<p>在大学里<br>曾与室友“醉生梦死”<br><img src=\"https://pic4.zhimg.com/80/v2-f0a2637f8107628a3b0b23a8078d9124_1440w.jpg\"></p>\n<p>在大学里<br>曾给大一的学弟妹们上课，教C与网页编程相关<br><img src=\"https://pic3.zhimg.com/80/v2-918fdcd42c73cb48b46192985369297e_1440w.jpg\"></p>\n<p>在大学里<br>曾上台表演小品，一口“川普”的效果引得大家哈哈大笑<br><img src=\"https://pic3.zhimg.com/80/v2-972c28867f964e1a87ec4c121410f750_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-9c34e008f37ce17a896765e58ea1dd00_1440w.jpg\"></p>\n<p>在大学里<br>也曾与大学的川籍老乡畅叙幽情<br><img src=\"https://pic1.zhimg.com/80/v2-cdb0f5459c52a12c66606ef29c4c346c_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-691923471213264b8fd61aa50717aacf_1440w.jpg\"><br>在大学里<br>也曾和我的班级同学们团结向上<br><img src=\"https://pic3.zhimg.com/80/v2-f1789a51241abb0e642dbc75e5441ced_1440w.jpg\"></p>\n<p>在大学里<br>曾与本地企业管理层一起学习<br><img src=\"https://pic4.zhimg.com/80/v2-d97d238747e2f1229f9728f178debcb8_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-5013f2bdfc163dfa72aa65e3c9d7c269_1440w.jpg\"></p>\n<p>在大学里<br>曾与那群“黑哥们儿” Did something interesting<br><img src=\"https://pic1.zhimg.com/80/v2-d1d29b2d2a6ff24dfe21dc3e91e330b8_1440w.jpg\"><br><img src=\"https://pic1.zhimg.com/80/v2-7e7b869bed9954e104c25304a86671aa_1440w.jpg\"></p>\n<p>在大学里<br>也曾和我的“战友”一起战斗<br><img src=\"https://pic2.zhimg.com/80/v2-a7538607dc1e4bdc28e81bcf7d8b4b41_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-8c6543eefb3046ffe05f18109bdf56fa_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-f3678242091c39a78c86972eac336df1_1440w.jpg\"><br><img src=\"https://pic2.zhimg.com/80/v2-4e93b5299cbb5b1da5e696ebab39ad64_1440w.jpg\"><br><img src=\"https://pic4.zhimg.com/80/v2-25062350c962b976ab1312a16c5fe761_1440w.jpg\"></p>\n<p>在大学里<br>也曾在创业尝试<br>xxx</p>\n<p>在大学里<br>也曾“到处奔波”<br><img src=\"https://pic4.zhimg.com/80/v2-566607d0578e8f5ee74d37079a1e11db_1440w.jpg\"></p>\n<p>添加图片注释，不超过 140 字（可选）<br>在大学里<br>也曾…</p>\n<p>在大学里<br>我见到了各式各样的人，我也去了各种各样的地方，也结交了各种各样的朋友，做了各式各样的事，真的没有什么遗憾的了。</p>\n<p>感谢大学，不仅教授了知识，也让我四年的青春没有虚度，把这些美好都永远留在了我得青春岁月里了吧。</p>\n<p>加油吧！相信自己的选择，每个人都有每个人的努力方向，只要自己不会后悔。</p>\n<p>祝成功。</p>\n<p>当时的评论存档</p>\n<blockquote>\n<p>坠入苦海销尘垢<br>认出了好多一起踢过球的同学，好像是野球社？我记得我也在的😂</p>\n</blockquote>\n<blockquote>\n<p>坠入苦海销尘垢<br>关注我的人<br>看傻了，这不是我学校吗😂题主是19届的么<br>2020-04-07</p>\n</blockquote>\n<blockquote>\n<p>刃舞<br>…… 并没有不可一世，也没觉得自己牛 x，我只想说题主描述有虚假煽动成分，自己分辨吧<br>2019-04-23<br>落叶挽歌&gt;<br>这里或许是我表达错误吧，觉得自己牛X啥啥的，但是你这样表现出来的确实是这样的。也不清楚为什么知乎这里开始议论你了，如果你真心想做些东西或者研究什么，那就自己悄悄摸摸地做吧，不需要让所有人知道，也不用去反驳别人，当你真正“出山”了，再告诉我们吧，不需要把你一阶段一阶段的东西告诉我们。我没有针对你的意思，也不认为有什么虚假煽动信息。<br>2019-04-23<br>刃舞&gt;落叶挽歌<br>我说的是题主 ……<br>哈皮做游戏&gt;落叶挽歌<br>单纯享受快乐多好。除非家里很穷，穷得交不起学费。<br>落叶挽歌&gt;哈皮做游戏<br>享受就有点过了吧，还是要正能量积极一点哈[调皮]<br>哈皮做游戏&gt;落叶挽歌<br>以前也想学知识，学东西，出去好找工作。<br>以后工作大把学习东西的时间，就缺谈恋爱的时间。<br>落叶挽歌&gt;哈皮做游戏<br>那你工作很忙哈，我还好的。</p>\n</blockquote>\n<blockquote>\n<p>知乎用户IZr076<br>真的是良心回答。答主的大学，没有遗憾了。</p>\n</blockquote>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"大学","slug":"大学","api":"api/tags/大学.json"}],"api":"api/posts/2019/04/30/关于大学生活总结.json"},{"title":"关于位运算和HashMap中一个求最小2次幂的算法","slug":"关于位运算和HashMap中一个求最小2次幂的算法","date":"2019-04-13T01:36:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/04/13/关于位运算和HashMap中一个求最小2次幂的算法/","excerpt":"<p>今天在HashMap的内部源码的时候，看到这样一个算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a power of two size for the given target capacity.</span></span><br><span class=\"line\"><span class=\"comment\">* 返回大于或等于 cap 的最小2次幂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">tableSizeFor</span><span class=\"params\">(<span class=\"type\">int</span> cap)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>第一眼看起来确实是一脸懵逼，通过只知道这是一个获取该数的<strong>大于或等于 cap 的最小2次幂</strong>，这么厉害，咋实现的呀？</p>\n<p><strong>1、数据在内存中如何存储？</strong></p>\n<p>我们知道”&lt;&lt;” 和 “&gt;&gt;” 分别代表 左移和右移位运算符号，表示 乘以2 和除以2（大多数时候适用），”&gt;&gt;&gt;”还是第一次见，这是代表什么意思呢？说到这里我们不得不去了解一下数据是如何存储在内存中的：</p>\n<p>在32位的计算机系统中，int型数据占几个字节？ 4字节。其中每个字节有8个比特位，表示二进制位，位是计算机内部数据储存的最小单位。这是所有编程语言学习者都知道的。也就是说 int类型在内存中有4*8 &#x3D;&#x3D; 32个比特为 所以如果以整形数10为例，那么它在内存中完整存储的形式为：</p>\n<blockquote>\n<p>00000000 00000000 00000000 00001010 -&gt;对应 1x2^3+0x2^2+1x2^1+0x2^0 &#x3D;10</p>\n</blockquote>\n<p>那么int类型表示最大的数是不是就是:</p>\n<blockquote>\n<p>11111111 11111111 11111111 11111111 -&gt;对应 1x2^31+1x2^30…1x2^1+1x2^0</p>\n</blockquote>\n<p>但为我们知道int类型的最大值为：2^31-1,显然上面的答案不是正确的。</p>\n<p>这是因为在所有被int类型占用的比特位中，左起第一个位（即最高位）就是符号位。int类型的符号位上，0表示正数，1表示负数。在32位操作系统下，其余后面31位是数值位。也就是说：</p>\n<blockquote>\n<p>11111111 11111111 11111111 11111111 所代表的数字为：1x2^<strong>30</strong>+1x2^29…1x2^1+1x2^0 的相反数为：-(2^31-1)</p>\n</blockquote>\n<p>这里需要注意的是，按原先的逻辑去理解的话</p>\n<blockquote>\n<p>00000000 00000000 00000000 00000000 为+0 </p>\n</blockquote>\n<blockquote>\n<p>10000000 00000000 00000000 00000000 为-0</p>\n</blockquote>\n<p>那他们表示的意义是一样的么？<br>实际上，在32位系统下int类型中，我们计算机已经强行规定了这种情况，数字0采用“+0”的表示方法，即 00000000 00000000 00000000 00000000；而“-0”这个特殊的数字被定义为了-2^31。</p>\n<p>因此我们看到32位系统下int类型的取值范围中，负数部分比正数部分多了一个数字，正数的最大取值是2^31-1，而负数的最小取值是-2^31。正数部分之所以要减去1，是因为被数字0占用了“+0”，而负数部分不需要用来表示0，因此原本的“-0”就用来表示-2^31这个数字。</p>\n<p><strong>2、位运算如何进行？</strong></p>\n<p>至此我们明白了数据在计算机中的存储形式，那位运算具体怎么运行的呢？<br>以10和-10为例，其二进制完整表示为：00000000 00000000 00000000 00001010 和 10000000 00000000 00000000 00001010 为了便于观察，我们取后面8位：00001010</p>\n<ul>\n<li>对于符号位移</li>\n</ul>\n<p>例如将10的二进制向左移1位：那么变成 0001010 0 &#x3D;&#x3D; 20 原先二进制数的第一位被移除，而最后一位被舍弃。将10的二进制向右移1位 原先二进制数最后一位被移除，第一位补0，则变成 000101 &#x3D;&#x3D;5</p>\n<p>如将-10的二进制向左移1位， 10000000 00000000 00000000 00001010则变成：</p>\n<blockquote>\n<p> 10000000 00000000 00000000 0010100 为-20</p>\n</blockquote>\n<p>如将-10的二进制向右移1位， 10000000 00000000 00000000 00001010则变成  ：</p>\n<blockquote>\n<p>注意这里多了一个0-&gt; 1 00000000 00000000 00000000 0000101 &lt;-注意这里少了位</p>\n</blockquote>\n<p><strong>也就是说符号移动，会保留原来的符号位，不会因为右移左移而带走符号位。</strong></p>\n<ul>\n<li>对于无符号位移</li>\n</ul>\n<p><strong>相反无符号位移会不关注符号位。</strong><br>例如将-10向右无符号右移就会变成：</p>\n<blockquote>\n<p>010000000 00000000 00000000 0000101  变成了一个很大的正数了！！</p>\n</blockquote>\n<p>如果将-10无符号左移，则变成：</p>\n<blockquote>\n<p>00000000 00000000 00000000 00001010 &#x3D; 20</p>\n</blockquote>\n<p>但是！！并没有无符号左移动这样一件事情！<br>跟右移运算不同的是，无符号左移和左移是一样的。因此java没有无符号左移运算。(&lt;&lt;&lt;和&lt;&lt;&lt;&#x3D;将报错)</p>\n<p>因为无符号右移运算需要考虑符号位的右移，而符号位只存在于二进制表示的最左边，最右边没有。所以不用区分无符号左移和左移运算。</p>\n<p><strong>3、关于返回大于或等于 cap 的最小2次幂的算法</strong></p>\n<p>我们以传入10为例子</p>\n<img src=\"https://cdn.julis.wang/blog/img/a9a6035a8d949d27c7fdba39c694d9840c6.jpg\">\n\n<p>由这张图看起来，算法很容易懂了，其实最主要的是为了去让各个位从高到低 从0变成1或者维持1不变，这样就能找到该数最小的2次幂</p>\n<blockquote>\n<p>另外，需要注意一下的是，第一步  int n &#x3D; cap - 1; 这个操作，执行这个操作的主要原因是为了防止在cap已经是2的n次幂的情况下，经过运算后得到的结果是cap的二倍的结果，例如如果n为l6，经过一系列运算之后，得到的结果是0001 1111，此时最后一步n+1 执行之后，就会返回32，有兴趣的可以自己进行尝试；</p>\n</blockquote>\n<p>参考来源：</p>\n<p><a href=\"https://blog.csdn.net/c10WTiybQ1Ye3/article/details/89411471\">https://blog.csdn.net/c10WTiybQ1Ye3/article/details/89411471</a><br><a href=\"https://www.jianshu.com/p/927009730809\">https://www.jianshu.com/p/927009730809</a></p>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/a9a6035a8d949d27c7fdba39c694d9840c6.jpg"],"content":"<p>今天在HashMap的内部源码的时候，看到这样一个算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a power of two size for the given target capacity.</span></span><br><span class=\"line\"><span class=\"comment\">* 返回大于或等于 cap 的最小2次幂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">tableSizeFor</span><span class=\"params\">(<span class=\"type\">int</span> cap)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">     n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>第一眼看起来确实是一脸懵逼，通过只知道这是一个获取该数的<strong>大于或等于 cap 的最小2次幂</strong>，这么厉害，咋实现的呀？</p>\n<p><strong>1、数据在内存中如何存储？</strong></p>\n<p>我们知道”&lt;&lt;” 和 “&gt;&gt;” 分别代表 左移和右移位运算符号，表示 乘以2 和除以2（大多数时候适用），”&gt;&gt;&gt;”还是第一次见，这是代表什么意思呢？说到这里我们不得不去了解一下数据是如何存储在内存中的：</p>\n<p>在32位的计算机系统中，int型数据占几个字节？ 4字节。其中每个字节有8个比特位，表示二进制位，位是计算机内部数据储存的最小单位。这是所有编程语言学习者都知道的。也就是说 int类型在内存中有4*8 &#x3D;&#x3D; 32个比特为 所以如果以整形数10为例，那么它在内存中完整存储的形式为：</p>\n<blockquote>\n<p>00000000 00000000 00000000 00001010 -&gt;对应 1x2^3+0x2^2+1x2^1+0x2^0 &#x3D;10</p>\n</blockquote>\n<p>那么int类型表示最大的数是不是就是:</p>\n<blockquote>\n<p>11111111 11111111 11111111 11111111 -&gt;对应 1x2^31+1x2^30…1x2^1+1x2^0</p>\n</blockquote>\n<p>但为我们知道int类型的最大值为：2^31-1,显然上面的答案不是正确的。</p>\n<p>这是因为在所有被int类型占用的比特位中，左起第一个位（即最高位）就是符号位。int类型的符号位上，0表示正数，1表示负数。在32位操作系统下，其余后面31位是数值位。也就是说：</p>\n<blockquote>\n<p>11111111 11111111 11111111 11111111 所代表的数字为：1x2^<strong>30</strong>+1x2^29…1x2^1+1x2^0 的相反数为：-(2^31-1)</p>\n</blockquote>\n<p>这里需要注意的是，按原先的逻辑去理解的话</p>\n<blockquote>\n<p>00000000 00000000 00000000 00000000 为+0 </p>\n</blockquote>\n<blockquote>\n<p>10000000 00000000 00000000 00000000 为-0</p>\n</blockquote>\n<p>那他们表示的意义是一样的么？<br>实际上，在32位系统下int类型中，我们计算机已经强行规定了这种情况，数字0采用“+0”的表示方法，即 00000000 00000000 00000000 00000000；而“-0”这个特殊的数字被定义为了-2^31。</p>\n<p>因此我们看到32位系统下int类型的取值范围中，负数部分比正数部分多了一个数字，正数的最大取值是2^31-1，而负数的最小取值是-2^31。正数部分之所以要减去1，是因为被数字0占用了“+0”，而负数部分不需要用来表示0，因此原本的“-0”就用来表示-2^31这个数字。</p>\n<p><strong>2、位运算如何进行？</strong></p>\n<p>至此我们明白了数据在计算机中的存储形式，那位运算具体怎么运行的呢？<br>以10和-10为例，其二进制完整表示为：00000000 00000000 00000000 00001010 和 10000000 00000000 00000000 00001010 为了便于观察，我们取后面8位：00001010</p>\n<ul>\n<li>对于符号位移</li>\n</ul>\n<p>例如将10的二进制向左移1位：那么变成 0001010 0 &#x3D;&#x3D; 20 原先二进制数的第一位被移除，而最后一位被舍弃。将10的二进制向右移1位 原先二进制数最后一位被移除，第一位补0，则变成 000101 &#x3D;&#x3D;5</p>\n<p>如将-10的二进制向左移1位， 10000000 00000000 00000000 00001010则变成：</p>\n<blockquote>\n<p> 10000000 00000000 00000000 0010100 为-20</p>\n</blockquote>\n<p>如将-10的二进制向右移1位， 10000000 00000000 00000000 00001010则变成  ：</p>\n<blockquote>\n<p>注意这里多了一个0-&gt; 1 00000000 00000000 00000000 0000101 &lt;-注意这里少了位</p>\n</blockquote>\n<p><strong>也就是说符号移动，会保留原来的符号位，不会因为右移左移而带走符号位。</strong></p>\n<ul>\n<li>对于无符号位移</li>\n</ul>\n<p><strong>相反无符号位移会不关注符号位。</strong><br>例如将-10向右无符号右移就会变成：</p>\n<blockquote>\n<p>010000000 00000000 00000000 0000101  变成了一个很大的正数了！！</p>\n</blockquote>\n<p>如果将-10无符号左移，则变成：</p>\n<blockquote>\n<p>00000000 00000000 00000000 00001010 &#x3D; 20</p>\n</blockquote>\n<p>但是！！并没有无符号左移动这样一件事情！<br>跟右移运算不同的是，无符号左移和左移是一样的。因此java没有无符号左移运算。(&lt;&lt;&lt;和&lt;&lt;&lt;&#x3D;将报错)</p>\n<p>因为无符号右移运算需要考虑符号位的右移，而符号位只存在于二进制表示的最左边，最右边没有。所以不用区分无符号左移和左移运算。</p>\n<p><strong>3、关于返回大于或等于 cap 的最小2次幂的算法</strong></p>\n<p>我们以传入10为例子</p>\n<img src=\"https://cdn.julis.wang/blog/img/a9a6035a8d949d27c7fdba39c694d9840c6.jpg\">\n\n<p>由这张图看起来，算法很容易懂了，其实最主要的是为了去让各个位从高到低 从0变成1或者维持1不变，这样就能找到该数最小的2次幂</p>\n<blockquote>\n<p>另外，需要注意一下的是，第一步  int n &#x3D; cap - 1; 这个操作，执行这个操作的主要原因是为了防止在cap已经是2的n次幂的情况下，经过运算后得到的结果是cap的二倍的结果，例如如果n为l6，经过一系列运算之后，得到的结果是0001 1111，此时最后一步n+1 执行之后，就会返回32，有兴趣的可以自己进行尝试；</p>\n</blockquote>\n<p>参考来源：</p>\n<p><a href=\"https://blog.csdn.net/c10WTiybQ1Ye3/article/details/89411471\">https://blog.csdn.net/c10WTiybQ1Ye3/article/details/89411471</a><br><a href=\"https://www.jianshu.com/p/927009730809\">https://www.jianshu.com/p/927009730809</a></p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"算法","slug":"algorithm","api":"api/tags/algorithm.json"}],"api":"api/posts/2019/04/13/关于位运算和HashMap中一个求最小2次幂的算法.json"},{"title":"Java虚拟机类的加载机制","slug":"Java虚拟机类的加载机制","date":"2019-03-21T01:35:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/21/Java虚拟机类的加载机制/","excerpt":"<p><strong>什么是虚拟机类的加载机制？</strong></p>\n<blockquote>\n<p>虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验，转换，解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>\n</blockquote>\n<p>类从加载到虚拟机的内存中开始，直到卸载出内存为止，整个生命周期为：</p>\n<ul>\n<li><p>加载（loading）</p>\n</li>\n<li><p>验证（verification）</p>\n</li>\n<li><p>准备(preparation)</p>\n</li>\n<li><p>解析(resolution)</p>\n</li>\n<li><p>初始化(initialization)</p>\n</li>\n<li><p>使用(using)</p>\n</li>\n<li><p>卸载（unloading）</p>\n</li>\n</ul>\n<p>其中 验证、准备、解析部分统称为连接</p>\n<img src=\"https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg\">\n<p>接下来依次讲解，各个步骤所做的事</p>\n<h2 id=\"第一部分-加载\"><a href=\"#第一部分-加载\" class=\"headerlink\" title=\"第一部分 加载\"></a><strong>第一部分 加载</strong></h2><hr>\n<p>“加载”是“类加载”的一个阶段，注意区分概念。类的加载由<strong>类加载器</strong>（后面介绍）加载主要完成三件事情：</p>\n<p><strong>1、通过一个类的全限定名来获取其定义的二进制字节流。</strong></p>\n<p><strong>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</strong></p>\n<p><strong>3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</strong></p>\n<blockquote>\n<p>加载阶段完成后，虚拟机外部的二进制字节流将按照虚拟机所需的格式存储在方法区中，同时在内存中实例化一个java.lang.Class的实例对象。相对于HotSpot，这个实例对象比较特殊，虽然是一个对象，但并没有放置在堆中，而是放置在方法区中。这个对象将作为程序访问方法区中这些类数据的外部接口。</p>\n</blockquote>\n<h2 id=\"第二部分-验证\"><a href=\"#第二部分-验证\" class=\"headerlink\" title=\"第二部分 验证\"></a><strong>第二部分 验证</strong></h2><hr>\n<p>这一步主要是确保Class文件的字节流符合虚拟机的规范</p>\n<p>主要验证以下几个部分：</p>\n<p><strong>1、文件格式验证</strong><br>验证是否以魔数开头、主次版本号是否在当前虚拟机处理范围内…</p>\n<p>这一验证阶段主要是保证输入的字节流能正确地解析并存储与方法区内，格式上符合Java类型信息的要求。只有通过这个阶段，字节流才会进入内存的方法区中存储，后面的三个验证方式也都是给予方法区中的数据验证，不再会操作字节流。</p>\n<p><strong>2、元数据验证</strong>  验证这个类是否有父类、这个类是否继承了不允许继承的类…</p>\n<p>该阶段主要对类的元数据进行语义校验，保证符合java语言规范的元数据信息。</p>\n<p><strong>3、字节码验证</strong></p>\n<p>最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是否合法、符合逻辑。</p>\n<p><strong>4、符号引用验证</strong> </p>\n<p>这个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作发生在连接的解析阶段。目的是确保解析动作正常执行，如果无法通过验证，将抛出 IllegalAccessError、NoSuchFieldError、NoSuchMethodError等异常。</p>\n<h2 id=\"第三部分-准备\"><a href=\"#第三部分-准备\" class=\"headerlink\" title=\"第三部分 准备\"></a><strong>第三部分 准备</strong></h2><hr>\n<p>准备阶段是正式为类变量分配内存并设置<strong>类变量初始值</strong>的阶段，这些变量所实用的内存将在<strong>方法区</strong>中进行分配。</p>\n<p><strong>这时候的分配仅仅是类变量(staic修饰的变量)，而实例变量将会在对象实例化时随对象一起分配在Java对中。</strong></p>\n<p>假设一个类变量为：public static int count &#x3D; 10;这时候会分配0，而不是10，分配10是在程序编译后。</p>\n<h2 id=\"第四部分-解析\"><a href=\"#第四部分-解析\" class=\"headerlink\" title=\"第四部分 解析\"></a><strong>第四部分 解析</strong></h2><hr>\n<p>解析阶段是虚拟机将常量池的符号引用替换为直接引用的阶段</p>\n<p><strong>1、类或者接口的的解析</strong></p>\n<p><strong>2、字段解析</strong></p>\n<p><strong>3、类方法解析</strong></p>\n<p><strong>4、接口方法解析</strong></p>\n<blockquote>\n<p><strong>符号引用</strong>与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p>\n</blockquote>\n<blockquote>\n<p><strong>直接引用</strong>可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n</blockquote>\n<h2 id=\"第五部分-初始化\"><a href=\"#第五部分-初始化\" class=\"headerlink\" title=\"第五部分 初始化\"></a><strong>第五部分 初始化</strong></h2><hr>\n<p>在准备阶段，变量已经被分配赋值过初始值，在初始化阶段根据代码的逻辑初始化真实的变量和其他资源。</p>\n<h2 id=\"关于类加载器\"><a href=\"#关于类加载器\" class=\"headerlink\" title=\"关于类加载器\"></a><strong>关于类加载器</strong></h2><hr>\n<p><strong>什么是类加载器？</strong></p>\n<p>在“加载”阶段中，通过一个类的全限定名来获取其定义的二进制字节流。这一动作是放到了Java虚拟机外部去实现的，是为了方便让应用自己去决定如何获取所需要的类，实现这个动作的功能是常说的“类加载器（ClassLoader）”</p>\n<p>类加载器主要有三种：</p>\n<p><strong>1.启动类加载器(Bootstrap ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\n</code></pre>\n<p><strong>2.扩展类加载器(Exension ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\\ext\n</code></pre>\n<p><strong>3.应用程序类加载器(Applicaion ClassLoader)</strong></p>\n<pre><code>负责加载ClassPath上指定的类库\n</code></pre>\n<p><strong>类加载器工作原理</strong></p>\n<p>介绍类加载器原理之前，必须得了解<strong>双亲委派模型</strong>(Parents Delegation Model)</p>\n<blockquote>\n<p>双亲委派模式的工作原理的是：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\n</blockquote>\n<img src=\"https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg\">\n\n<p>如图所示，这种层次结构关系被称为<strong>双亲委派模型</strong><br>以下为其实现代码，集中在java.lang.ClassLoader中的loadClass()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\"><span class=\"comment\">//首先检查类是否被加载</span></span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有父加载器，则先委托父加载，否则由启动类加载器加载，如果启动类加载器没有找到，则返回null</span></span><br><span class=\"line\">                      c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                  <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">\t<span class=\"comment\">//这里的ClassNotFoundException来自父加载器</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                  <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">\t<span class=\"comment\">//在父类Classloader还没办法加载的时候</span></span><br><span class=\"line\">\t<span class=\"comment\">//再调用本身的findclass方法来加载类</span></span><br><span class=\"line\">                  <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码的逻辑很清楚：</p>\n<blockquote>\n<p><strong>先加载类是否已经被加载过，若没有则调用父的loadClass()方法，如果父 类加载器为空，则使用启动类加载器作为父加载器，如果父 类加载器加载失败，再调用自己的findClass()方法进行加载</strong></p>\n</blockquote>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg","https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg"],"content":"<p><strong>什么是虚拟机类的加载机制？</strong></p>\n<blockquote>\n<p>虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验，转换，解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>\n</blockquote>\n<p>类从加载到虚拟机的内存中开始，直到卸载出内存为止，整个生命周期为：</p>\n<ul>\n<li><p>加载（loading）</p>\n</li>\n<li><p>验证（verification）</p>\n</li>\n<li><p>准备(preparation)</p>\n</li>\n<li><p>解析(resolution)</p>\n</li>\n<li><p>初始化(initialization)</p>\n</li>\n<li><p>使用(using)</p>\n</li>\n<li><p>卸载（unloading）</p>\n</li>\n</ul>\n<p>其中 验证、准备、解析部分统称为连接</p>\n<img src=\"https://cdn.julis.wang/blog/img/6870166cdec78b95356d73621e32757829b.jpg\">\n<p>接下来依次讲解，各个步骤所做的事</p>\n<h2 id=\"第一部分-加载\"><a href=\"#第一部分-加载\" class=\"headerlink\" title=\"第一部分 加载\"></a><strong>第一部分 加载</strong></h2><hr>\n<p>“加载”是“类加载”的一个阶段，注意区分概念。类的加载由<strong>类加载器</strong>（后面介绍）加载主要完成三件事情：</p>\n<p><strong>1、通过一个类的全限定名来获取其定义的二进制字节流。</strong></p>\n<p><strong>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</strong></p>\n<p><strong>3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</strong></p>\n<blockquote>\n<p>加载阶段完成后，虚拟机外部的二进制字节流将按照虚拟机所需的格式存储在方法区中，同时在内存中实例化一个java.lang.Class的实例对象。相对于HotSpot，这个实例对象比较特殊，虽然是一个对象，但并没有放置在堆中，而是放置在方法区中。这个对象将作为程序访问方法区中这些类数据的外部接口。</p>\n</blockquote>\n<h2 id=\"第二部分-验证\"><a href=\"#第二部分-验证\" class=\"headerlink\" title=\"第二部分 验证\"></a><strong>第二部分 验证</strong></h2><hr>\n<p>这一步主要是确保Class文件的字节流符合虚拟机的规范</p>\n<p>主要验证以下几个部分：</p>\n<p><strong>1、文件格式验证</strong><br>验证是否以魔数开头、主次版本号是否在当前虚拟机处理范围内…</p>\n<p>这一验证阶段主要是保证输入的字节流能正确地解析并存储与方法区内，格式上符合Java类型信息的要求。只有通过这个阶段，字节流才会进入内存的方法区中存储，后面的三个验证方式也都是给予方法区中的数据验证，不再会操作字节流。</p>\n<p><strong>2、元数据验证</strong>  验证这个类是否有父类、这个类是否继承了不允许继承的类…</p>\n<p>该阶段主要对类的元数据进行语义校验，保证符合java语言规范的元数据信息。</p>\n<p><strong>3、字节码验证</strong></p>\n<p>最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是否合法、符合逻辑。</p>\n<p><strong>4、符号引用验证</strong> </p>\n<p>这个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作发生在连接的解析阶段。目的是确保解析动作正常执行，如果无法通过验证，将抛出 IllegalAccessError、NoSuchFieldError、NoSuchMethodError等异常。</p>\n<h2 id=\"第三部分-准备\"><a href=\"#第三部分-准备\" class=\"headerlink\" title=\"第三部分 准备\"></a><strong>第三部分 准备</strong></h2><hr>\n<p>准备阶段是正式为类变量分配内存并设置<strong>类变量初始值</strong>的阶段，这些变量所实用的内存将在<strong>方法区</strong>中进行分配。</p>\n<p><strong>这时候的分配仅仅是类变量(staic修饰的变量)，而实例变量将会在对象实例化时随对象一起分配在Java对中。</strong></p>\n<p>假设一个类变量为：public static int count &#x3D; 10;这时候会分配0，而不是10，分配10是在程序编译后。</p>\n<h2 id=\"第四部分-解析\"><a href=\"#第四部分-解析\" class=\"headerlink\" title=\"第四部分 解析\"></a><strong>第四部分 解析</strong></h2><hr>\n<p>解析阶段是虚拟机将常量池的符号引用替换为直接引用的阶段</p>\n<p><strong>1、类或者接口的的解析</strong></p>\n<p><strong>2、字段解析</strong></p>\n<p><strong>3、类方法解析</strong></p>\n<p><strong>4、接口方法解析</strong></p>\n<blockquote>\n<p><strong>符号引用</strong>与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p>\n</blockquote>\n<blockquote>\n<p><strong>直接引用</strong>可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n</blockquote>\n<h2 id=\"第五部分-初始化\"><a href=\"#第五部分-初始化\" class=\"headerlink\" title=\"第五部分 初始化\"></a><strong>第五部分 初始化</strong></h2><hr>\n<p>在准备阶段，变量已经被分配赋值过初始值，在初始化阶段根据代码的逻辑初始化真实的变量和其他资源。</p>\n<h2 id=\"关于类加载器\"><a href=\"#关于类加载器\" class=\"headerlink\" title=\"关于类加载器\"></a><strong>关于类加载器</strong></h2><hr>\n<p><strong>什么是类加载器？</strong></p>\n<p>在“加载”阶段中，通过一个类的全限定名来获取其定义的二进制字节流。这一动作是放到了Java虚拟机外部去实现的，是为了方便让应用自己去决定如何获取所需要的类，实现这个动作的功能是常说的“类加载器（ClassLoader）”</p>\n<p>类加载器主要有三种：</p>\n<p><strong>1.启动类加载器(Bootstrap ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\n</code></pre>\n<p><strong>2.扩展类加载器(Exension ClassLoader)</strong></p>\n<pre><code>负责加载&lt;JAVA_HOME&gt;\\lib\\ext\n</code></pre>\n<p><strong>3.应用程序类加载器(Applicaion ClassLoader)</strong></p>\n<pre><code>负责加载ClassPath上指定的类库\n</code></pre>\n<p><strong>类加载器工作原理</strong></p>\n<p>介绍类加载器原理之前，必须得了解<strong>双亲委派模型</strong>(Parents Delegation Model)</p>\n<blockquote>\n<p>双亲委派模式的工作原理的是：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</p>\n</blockquote>\n<img src=\"https://cdn.julis.wang/blog/img/853820dea41988382e4e0872063ec33315e.jpg\">\n\n<p>如图所示，这种层次结构关系被称为<strong>双亲委派模型</strong><br>以下为其实现代码，集中在java.lang.ClassLoader中的loadClass()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">      <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\"><span class=\"comment\">//首先检查类是否被加载</span></span><br><span class=\"line\">          Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有父加载器，则先委托父加载，否则由启动类加载器加载，如果启动类加载器没有找到，则返回null</span></span><br><span class=\"line\">                      c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                  <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">\t<span class=\"comment\">//这里的ClassNotFoundException来自父加载器</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                  <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">\t<span class=\"comment\">//在父类Classloader还没办法加载的时候</span></span><br><span class=\"line\">\t<span class=\"comment\">//再调用本身的findclass方法来加载类</span></span><br><span class=\"line\">                  <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                  c = findClass(name);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">              resolveClass(c);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>代码的逻辑很清楚：</p>\n<blockquote>\n<p><strong>先加载类是否已经被加载过，若没有则调用父的loadClass()方法，如果父 类加载器为空，则使用启动类加载器作为父加载器，如果父 类加载器加载失败，再调用自己的findClass()方法进行加载</strong></p>\n</blockquote>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/03/21/Java虚拟机类的加载机制.json"},{"title":" Android中Handler使用导致的内存泄漏","slug":"Android中Handler使用导致的内存泄漏","date":"2019-03-18T01:37:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/18/Android中Handler使用导致的内存泄漏/","excerpt":"<p><strong>1.什么是内存泄漏</strong></p>\n<p>用动态存储分配函数动态开辟的空间，在使用完毕后未被得到释放，结果一直占据该用内存单元，直到程序结束，即所谓的内存泄漏。</p>\n<p><strong>2.是内存泄漏与内存溢出的区别</strong></p>\n<p>内存溢出 Out of Memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p>\n<p>内存泄露 Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p>\n<p>用一个很形象的例子来说明：一个仓库，被无用的物资所占据，而得不到管理员的清理，这里的无用货物占用仓库空间的行为被叫做”内存泄漏“，而某一天仓库由于所存储的物品太多，而无法继续存放物资，这个时候就被叫做“内存溢出”。</p>\n<p><strong>3.内存泄漏导致的问题</strong></p>\n<p>相关内存无法被系统给回收，随着程序运行可以用的内存会越来越少，机子越来越卡，直到内存溢出。（这也是为什么手机电脑很卡之后重启一下后会好很多，主要是相关未被系统回收的内存被回收）</p>\n<p><strong>4、安卓中的内存泄漏</strong></p>\n<p>典型的可能产生内存泄漏的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemoryLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MyActivity</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//可能会导致内存泄漏的代码</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>() &#123;</span><br><span class=\"line\">       [<span class=\"meta\">@Override</span>](https:<span class=\"comment\">//my.oschina.net/u/1162528)</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;&#125;</span><br></pre></td></tr></table></figure>\n<p>产生内存泄漏可能的原因：Handler的工作机制中Handler与Looper以及MessageQueue一起工作的，App启动之后，系统会默认创建一个为主线程服务的Looper对象，负责处理主线程中所有的Message对象，它的生命周期则为整个应用的生命周期。在主线程使用Handler都会默认绑定到这个Looper上面，主线程创建Handler对象，会立即关联Looper对象的MessageQueue，这时发送MessageQueue重的Message会持有Handler的引用， 这样在Looper处理Message时候才会回调到Handler的handleMessage方法。因此，如果Message没有被处理完成，那么Handler对象就不会被垃圾回收。</p>\n<img src=\"https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg\">\n<p>上面的代码，将Handler的实例声明为MemoryLeakActivity类的内部类，在Java中：<strong>非静态内部匿名类会持有外部类的一个隐式引用，这样就可能导致外部类无法被垃圾回收。</strong></p>\n<p>最终由于MessageQueue中的Message 没有处理完成，就会持有Handler对象的引用，而非静态的Handler对象会持有外部类Activity的引用，这个activity无法被回收，从而导致内存泄漏。</p>\n<p><strong>5、解决方案</strong></p>\n<p>1、将Handler声明为静态内部类，这样就不会持有对外部类的引用。</p>\n<p>2、创建一个Looper与一般Java对象一样的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> InnerHandler <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;       </span><br><span class=\"line\"> \t\t<span class=\"comment\">// 声明一个静态Handler类，并持有外部类引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MemoryLeakActivity&gt; mActivity;</span><br><span class=\"line\">       \t<span class=\"keyword\">public</span> <span class=\"title function_\">InnerHandler</span><span class=\"params\">(MemoryLeakActivity activity)</span>&#123;</span><br><span class=\"line\">          \t\t <span class=\"built_in\">this</span>.mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;MemoryLeakActivity&gt;(activity);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","cover":null,"images":["https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg"],"content":"<p><strong>1.什么是内存泄漏</strong></p>\n<p>用动态存储分配函数动态开辟的空间，在使用完毕后未被得到释放，结果一直占据该用内存单元，直到程序结束，即所谓的内存泄漏。</p>\n<p><strong>2.是内存泄漏与内存溢出的区别</strong></p>\n<p>内存溢出 Out of Memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p>\n<p>内存泄露 Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p>\n<p>用一个很形象的例子来说明：一个仓库，被无用的物资所占据，而得不到管理员的清理，这里的无用货物占用仓库空间的行为被叫做”内存泄漏“，而某一天仓库由于所存储的物品太多，而无法继续存放物资，这个时候就被叫做“内存溢出”。</p>\n<p><strong>3.内存泄漏导致的问题</strong></p>\n<p>相关内存无法被系统给回收，随着程序运行可以用的内存会越来越少，机子越来越卡，直到内存溢出。（这也是为什么手机电脑很卡之后重启一下后会好很多，主要是相关未被系统回收的内存被回收）</p>\n<p><strong>4、安卓中的内存泄漏</strong></p>\n<p>典型的可能产生内存泄漏的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemoryLeakActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MyActivity</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//可能会导致内存泄漏的代码</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">Handler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Handler</span>() &#123;</span><br><span class=\"line\">       [<span class=\"meta\">@Override</span>](https:<span class=\"comment\">//my.oschina.net/u/1162528)</span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleMessage</span><span class=\"params\">(Message msg)</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">super</span>.handleMessage(msg);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;&#125;</span><br></pre></td></tr></table></figure>\n<p>产生内存泄漏可能的原因：Handler的工作机制中Handler与Looper以及MessageQueue一起工作的，App启动之后，系统会默认创建一个为主线程服务的Looper对象，负责处理主线程中所有的Message对象，它的生命周期则为整个应用的生命周期。在主线程使用Handler都会默认绑定到这个Looper上面，主线程创建Handler对象，会立即关联Looper对象的MessageQueue，这时发送MessageQueue重的Message会持有Handler的引用， 这样在Looper处理Message时候才会回调到Handler的handleMessage方法。因此，如果Message没有被处理完成，那么Handler对象就不会被垃圾回收。</p>\n<img src=\"https://cdn.julis.wang/blog/img/6e154da75042608bc2e6e970e2452f7a857.jpg\">\n<p>上面的代码，将Handler的实例声明为MemoryLeakActivity类的内部类，在Java中：<strong>非静态内部匿名类会持有外部类的一个隐式引用，这样就可能导致外部类无法被垃圾回收。</strong></p>\n<p>最终由于MessageQueue中的Message 没有处理完成，就会持有Handler对象的引用，而非静态的Handler对象会持有外部类Activity的引用，这个activity无法被回收，从而导致内存泄漏。</p>\n<p><strong>5、解决方案</strong></p>\n<p>1、将Handler声明为静态内部类，这样就不会持有对外部类的引用。</p>\n<p>2、创建一个Looper与一般Java对象一样的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> InnerHandler <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span>&#123;       </span><br><span class=\"line\"> \t\t<span class=\"comment\">// 声明一个静态Handler类，并持有外部类引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MemoryLeakActivity&gt; mActivity;</span><br><span class=\"line\">       \t<span class=\"keyword\">public</span> <span class=\"title function_\">InnerHandler</span><span class=\"params\">(MemoryLeakActivity activity)</span>&#123;</span><br><span class=\"line\">          \t\t <span class=\"built_in\">this</span>.mActivity = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;MemoryLeakActivity&gt;(activity);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"安卓","slug":"Android","api":"api/tags/Android.json"}],"api":"api/posts/2019/03/18/Android中Handler使用导致的内存泄漏.json"},{"title":"Android开发 LayoutInflater源码解析","slug":"LayoutInflater源码解析","date":"2019-03-03T06:40:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/03/03/LayoutInflater源码解析/","excerpt":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","cover":null,"images":[],"content":"<p>本文主要是自己对LayoutInflater 使用的相关总结</p>\n<p>我们经常实用的LayoutInflater这样用：</p>\n<p>View view &#x3D; LayoutInflater.from(context).inflate(R.layout.resource,root,flase);\t</p>\n<p>进入inflate进行源码解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(<span class=\"type\">int</span> resource, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Resources</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">XmlResourceParser</span> <span class=\"variable\">parser</span> <span class=\"operator\">=</span> res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要做了一件事：<br><strong>建立XmlResourceParser为后面解析xml文件做准备</strong><br><a href=\"https://www.jianshu.com/p/4cd15faaa01d\" title=\"XmlResourceParser的解析原理可以去这里看看\">XmlResourceParser的解析原理可以去这里看看</a></p>\n<p>继续进入inflate(为方便阅读删除一些调试代码和异常捕获代码，只保留了核心代码)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">inflate</span><span class=\"params\">(XmlPullParser parser, ViewGroup root, <span class=\"type\">boolean</span> attachToRoot)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Context</span> <span class=\"variable\">inflaterContext</span> <span class=\"operator\">=</span> mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">AttributeSet</span> <span class=\"variable\">attrs</span> <span class=\"operator\">=</span> Xml.asAttributeSet(parser);</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\">                ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"literal\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、判断xml局中标签是否为merge,如果是则走rInflate直接去遍历创建xml所有的View对象</p>\n<p>2、进入非merge的逻辑里面，会创建根View，主要的过程在<strong>createViewFromTag创建View</strong></p>\n<p>3、<strong>rInflateChildren</strong>创建子View</p>\n<p>3、接下来如果传入的root不为null,并且attachToRoot&#x3D;&#x3D;false，则对创建好的View的ViewGroup.LayoutParams是通过generateLayoutParams生成的。</p>\n<p>4、如果root不为null,attachToRoot&#x3D;&#x3D;true，那么则将整个View作为一个子View加入到父布局中，否则直接返回这个View</p>\n<p>继续进入<strong>createViewFromTag</strong>源码（为方便理解去除异常彩蛋和ignoreThemeAttr属性的代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">View <span class=\"title function_\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">boolean</span> ignoreThemeAttr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"literal\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span> &amp;&amp; mPrivateFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"literal\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t……</span><br></pre></td></tr></table></figure>\n\n<p>这段源码中看出主要逻辑为：</p>\n<p>1、标签为view时获取view的class属性作为要创建的View的name(注意View和view的区别)</p>\n<p>2、主要通过不同的Factory通过**createView() **去创建View</p>\n<p>3、其中有个逻辑需要在onCreateView执行之前判断是否存在“.”，存在点则表示不是系统的View,需要单独处理，在后面createView的代码可以看到有这样一段加入了“android.view.”，后面会讲这句的用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(String name, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createView(name, <span class=\"string\">&quot;android.view.&quot;</span>, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续进入<strong>onCreateView</strong>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> View <span class=\"title function_\">createView</span><span class=\"params\">(String name, String prefix, AttributeSet attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException &#123;</span><br><span class=\"line\">    Constructor&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor != <span class=\"literal\">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class=\"line\">        constructor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        sConstructorMap.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">View</span>&gt; clazz = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (constructor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Class not found in the cache, see if it&#x27;s real, and try to add it</span></span><br><span class=\"line\">            clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                    prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span> &amp;&amp; clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class=\"line\">            constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            sConstructorMap.put(name, constructor);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If we have a filter, apply it to cached constructor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFilter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Have we seen this name before?</span></span><br><span class=\"line\">                <span class=\"type\">Boolean</span> <span class=\"variable\">allowedState</span> <span class=\"operator\">=</span> mFilterMap.get(name);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allowedState == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// New class -- remember whether it is allowed</span></span><br><span class=\"line\">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class=\"line\">                            prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">allowed</span> <span class=\"operator\">=</span> clazz != <span class=\"literal\">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class=\"line\">                    mFilterMap.put(name, allowed);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!allowed) &#123;</span><br><span class=\"line\">                        failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class=\"line\">                    failNotAllowed(name, prefix, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">lastContext</span> <span class=\"operator\">=</span> mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mConstructorArgs[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fill in the context if not already within inflation.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = mContext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object[] args = mConstructorArgs;</span><br><span class=\"line\">        args[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> constructor.newInstance(args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewStub) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Use the same context when inflating ViewStub later.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewStub</span> <span class=\"variable\">viewStub</span> <span class=\"operator\">=</span> (ViewStub) view;</span><br><span class=\"line\">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>​\t\t<br>这段源码虽然很复杂，但主要做的事就是 <strong>通过反射的方式去加载一个View类</strong></p>\n<p>这段代码就能解释上面为什么要加“android.view.”，这段代码会将系统的View的路径拼起来，把类加载进来；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">clazz = mContext.getClassLoader().loadClass(prefix != <span class=\"literal\">null</span> ? (prefix + name) : name).asSubclass(View.class) </span><br></pre></td></tr></table></figure>\n\n\n<p>到现在，我们讲完了对于xml根view的创建逻辑，还有个很重要的流程没有讲：</p>\n<p><strong>子View创建</strong> 的逻辑在inflate中的rInflateChildren</p>\n<p>进入rInflateChildren，这里依然会进入到rInflate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">void</span> <span class=\"title function_\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span><br><span class=\"line\"><span class=\"params\">        AttributeSet attrs, <span class=\"type\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> parser.getDepth();</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">pendingRequestFocus</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> parser.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            pendingRequestFocus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            consumeChildElements(parser);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InflateException</span>(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ViewGroup</span> <span class=\"variable\">viewGroup</span> <span class=\"operator\">=</span> (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.<span class=\"type\">LayoutParams</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pendingRequestFocus) &#123;</span><br><span class=\"line\">        parent.restoreDefaultFocus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段源码的大致可以总结为：</p>\n<p>1、总的逻辑为获取xml文档的层级数，解析每一层级的数据</p>\n<p>2、解析过程首先进行View的合理性校验，include、merge等标签；</p>\n<p>3、最后还是会走到createViewFromTag 创建出 View 对象，如果是 ViewGroup则递归调用rInflateChildren</p>\n<p>到这里基本上所有的流程讲完了，这里总结一下加载流程：</p>\n<p>1、拿到Xml解析对象，为后续解析做准备</p>\n<p>2、对整个Xml中的布局控制处理由 root、attachToRoot这两个参数控制</p>\n<p>3、解析子View，通过createViewFromTag创建实例对象**</p>\n","categories":[{"name":"技术文章","slug":"technology","api":"api/categories/technology.json"}],"tags":[{"name":"Java","slug":"java","api":"api/tags/java.json"}],"api":"api/posts/2019/03/03/LayoutInflater源码解析.json"},{"title":"从一则知乎看到的一段视频说起","slug":"从一则知乎看到的一段视频说起","date":"2018-08-25T17:35:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2018/08/26/从一则知乎看到的一段视频说起/","excerpt":"<p>这篇文章来自于自己写的知乎</p>\n<p>今晚躺在床上，刷刷知乎，看到一则知乎：<a href=\"https://www.zhihu.com/question/278030511/answer/453342056\">该回答已被删除</a>,很可惜这篇已经找不到了。里面主要是一个视频：一位大叔在饭局里面饱含深情地唱了一首《假行僧》，最后把自己给唱哭了……</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>让我陷入一些深思<br>回答中中有这样一段视频，自己反复看了几遍，每一遍好像都有不同的感触。第一遍，感受到大叔打着的节拍是多么的有节奏感，让人听了之后恨不得跟着他一起拍起来。第二遍，我发现大叔后面的节奏相比于紧促了起来，大叔内心有了更多的投入，而且貌似最后还有不好听的字眼，貌似在发泄了。第三遍，大叔一定是一个有故事的人，大叔右手旁边的朋友都已经湿了眼角。。。</p>\n<p>《假行僧》一首能把人唱得热泪盈眶的歌曲，我在想大叔是不是想起了他自己的过去，亦或是有太多的不满此刻想要发泄出来。我想前者会更多一点的吧。</p>\n<p>是呀，生活在这样一个忙忙碌碌的人心浮躁社会里，人的压力自然而然就增加了，再也没有儿时那样的无牵无挂。今天和好朋友去了一趟西塘古镇，主要还是因为周末了，最近在一些地方也遇到了小挫折，周末了没有任何人来打扰自己，比起待在家里更想的还是出去走走比较好。</p>\n<p>今天的西塘下着雨，没有了燥热的天气，人心还是挺平静的，或许是因为雨的缘故，景区并不是人满为患，自然也有了更多的空间去慢慢欣赏“江南水乡”。<br><img src=\"https://cdn.pixabay.com/photo/2017/05/18/06/31/wuzhen-2322680_960_720.jpg\"></p>\n<p>因为最近刚看完《边城》，脑子里总是将其场景带入西塘，可是看着被商业气息冲刺着的古镇，自然也带入不了了。<br><img src=\"https://cdn.pixabay.com/photo/2017/09/30/08/50/wuzhen-2801488_960_720.jpg\"></p>\n<p>走在河边的烟雨长廊上，朋友说道 十年后再来这里。啊！到现在这个年龄，自己真的对于时间太敏感了，真的有点害怕了！消逝的是那时间，留下的却是那一串串回忆。</p>\n<p>那时间 永远不再回来。自己上个月刚过了二十二周岁的生日，还记得以前Taylor有一首歌叫做《22》，有一句：But i am feeling 22,evething will be alright（我感觉我回到了22岁,所有事都如此美好），所以我现在就处在这样一个霉霉很想回到的一个年龄？可是她回不到了，我自然也回不到了我的18了。</p>\n<p>那回忆 有美好的不美好的。回忆里面有对酒当歌，有秉烛夜游，也有蒲苇磐石，也有来日方长，当然还有曲终人散。还记得那本《挪威的森林》，或许现在它还在某处静静的躺着吧，因为它回忆里也多了好多的故事。也还记得那一回因为一些压力，在酒吧里和朋友唱了首《挪威的森林》。</p>\n<p>一切都已经过去了，也许明天就回来了，也许不会再回来。</p>\n<p>就这样吧，晚安。<br>2018&#x2F;08&#x2F;26 01:35</p>\n","cover":null,"images":["https://cdn.pixabay.com/photo/2017/05/18/06/31/wuzhen-2322680_960_720.jpg","https://cdn.pixabay.com/photo/2017/09/30/08/50/wuzhen-2801488_960_720.jpg"],"content":"<p>这篇文章来自于自己写的知乎</p>\n<p>今晚躺在床上，刷刷知乎，看到一则知乎：<a href=\"https://www.zhihu.com/question/278030511/answer/453342056\">该回答已被删除</a>,很可惜这篇已经找不到了。里面主要是一个视频：一位大叔在饭局里面饱含深情地唱了一首《假行僧》，最后把自己给唱哭了……</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>让我陷入一些深思<br>回答中中有这样一段视频，自己反复看了几遍，每一遍好像都有不同的感触。第一遍，感受到大叔打着的节拍是多么的有节奏感，让人听了之后恨不得跟着他一起拍起来。第二遍，我发现大叔后面的节奏相比于紧促了起来，大叔内心有了更多的投入，而且貌似最后还有不好听的字眼，貌似在发泄了。第三遍，大叔一定是一个有故事的人，大叔右手旁边的朋友都已经湿了眼角。。。</p>\n<p>《假行僧》一首能把人唱得热泪盈眶的歌曲，我在想大叔是不是想起了他自己的过去，亦或是有太多的不满此刻想要发泄出来。我想前者会更多一点的吧。</p>\n<p>是呀，生活在这样一个忙忙碌碌的人心浮躁社会里，人的压力自然而然就增加了，再也没有儿时那样的无牵无挂。今天和好朋友去了一趟西塘古镇，主要还是因为周末了，最近在一些地方也遇到了小挫折，周末了没有任何人来打扰自己，比起待在家里更想的还是出去走走比较好。</p>\n<p>今天的西塘下着雨，没有了燥热的天气，人心还是挺平静的，或许是因为雨的缘故，景区并不是人满为患，自然也有了更多的空间去慢慢欣赏“江南水乡”。<br><img src=\"https://cdn.pixabay.com/photo/2017/05/18/06/31/wuzhen-2322680_960_720.jpg\"></p>\n<p>因为最近刚看完《边城》，脑子里总是将其场景带入西塘，可是看着被商业气息冲刺着的古镇，自然也带入不了了。<br><img src=\"https://cdn.pixabay.com/photo/2017/09/30/08/50/wuzhen-2801488_960_720.jpg\"></p>\n<p>走在河边的烟雨长廊上，朋友说道 十年后再来这里。啊！到现在这个年龄，自己真的对于时间太敏感了，真的有点害怕了！消逝的是那时间，留下的却是那一串串回忆。</p>\n<p>那时间 永远不再回来。自己上个月刚过了二十二周岁的生日，还记得以前Taylor有一首歌叫做《22》，有一句：But i am feeling 22,evething will be alright（我感觉我回到了22岁,所有事都如此美好），所以我现在就处在这样一个霉霉很想回到的一个年龄？可是她回不到了，我自然也回不到了我的18了。</p>\n<p>那回忆 有美好的不美好的。回忆里面有对酒当歌，有秉烛夜游，也有蒲苇磐石，也有来日方长，当然还有曲终人散。还记得那本《挪威的森林》，或许现在它还在某处静静的躺着吧，因为它回忆里也多了好多的故事。也还记得那一回因为一些压力，在酒吧里和朋友唱了首《挪威的森林》。</p>\n<p>一切都已经过去了，也许明天就回来了，也许不会再回来。</p>\n<p>就这样吧，晚安。<br>2018&#x2F;08&#x2F;26 01:35</p>\n","categories":[{"name":"生活感想","slug":"life","api":"api/categories/life.json"}],"tags":[{"name":"省","slug":"thinking","api":"api/tags/thinking.json"}],"api":"api/posts/2018/08/26/从一则知乎看到的一段视频说起.json"}],"info":{"type":"index"}},"api":"api/posts/page.7.json"}