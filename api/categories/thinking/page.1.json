{"data":{"index":1,"total":1,"posts":[{"title":"[Compose Multiplatform]跨平台博客应用实践","slug":"Compose-Multiplatform-跨平台博客应用实践","date":"2025-07-28T12:28:00.000Z","updated":"2025-07-28T14:51:23.535Z","comments":true,"url":"2025/07/28/Compose-Multiplatform-跨平台博客应用实践/","excerpt":"<h2 id=\"用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践\"><a href=\"#用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践\" class=\"headerlink\" title=\"用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践\"></a>用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践</h2><p>在追求高效开发的时代，跨平台技术已成为移动应用开发的主流选择，此前基于鸿蒙的开发平台开发 <a href=\"https://julis.wang/2025/05/16/%E9%B8%BF%E8%92%99-%E5%86%99%E4%BA%86%E4%B8%AA%E5%9F%BA%E4%BA%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%B8%BF%E8%92%99App/\">blog_harmony</a>，将自己博客文章进行展示。本文将介绍基于 <strong>CMP(Compose Multiplatform)</strong> 构建的开源博客应用 <a href=\"https://github.com/VomPom/blog_kmp\">blog_kmp</a>，展示如何用 Kotlin 实现跨平台的应用开发。</p>\n<h3 id=\"Compose-Multiplatform\"><a href=\"#Compose-Multiplatform\" class=\"headerlink\" title=\"Compose Multiplatform\"></a>Compose Multiplatform</h3><p>Compose Multiplatform 是 JetBrains 推出的声明式 UI 框架，基于 Jetpack Compose 扩展而来：</p>\n<ul>\n<li><strong>核心优势</strong>：用同一套 Kotlin 代码构建 Android、iOS、Desktop 和 Web 应用</li>\n<li><strong>开发效率</strong>：实时预览、热重载加速开发迭代</li>\n<li><strong>原生性能</strong>：通过 Skia 渲染引擎实现接近原生体验</li>\n<li><strong>共享逻辑</strong>：业务逻辑、网络请求、状态管理可 100% 复用</li>\n</ul>\n<h3 id=\"项目架构与技术栈\"><a href=\"#项目架构与技术栈\" class=\"headerlink\" title=\"项目架构与技术栈\"></a>项目架构与技术栈</h3><p>blog_kmp 采用分层架构设计，核心模块包括：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">shared/</span><br><span class=\"line\">├── src/commonMain/kotlin/  # 共享业务逻辑</span><br><span class=\"line\">│   ├── <span class=\"keyword\">data</span>/               # 数据层</span><br><span class=\"line\">│   ├── domain/             # 领域模型</span><br><span class=\"line\">│   └── presentation/       # UI状态管理</span><br><span class=\"line\">├── src/androidMain/        # Android 平台代码</span><br><span class=\"line\">└── src/iosMain/            # iOS 平台适配</span><br><span class=\"line\">├── composeApp</span><br><span class=\"line\">│   ├── build.gradle.kts</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">│       ├── androidMain     # Android 平台代码</span><br><span class=\"line\">│       ├── commonMain      # 共享业务逻辑</span><br><span class=\"line\">│            ├── App.kt     # 界面展示入口</span><br><span class=\"line\">│            ├── <span class=\"keyword\">data</span>       # 数据层</span><br><span class=\"line\">│            │   ├── api        # 网络请求</span><br><span class=\"line\">│            │   ├── di         # koin 依赖注入</span><br><span class=\"line\">│            │   ├── model      # model 数据</span><br><span class=\"line\">│            │   └── repository # 数据缓存管理</span><br><span class=\"line\">│            │</span><br><span class=\"line\">│            ├── navigation  # 页面间导航管理</span><br><span class=\"line\">│            ├── platform    # 通过对各个平台抽象的接口 </span><br><span class=\"line\">│            └── ui          # 通用 UI 逻辑</span><br><span class=\"line\">│</span><br><span class=\"line\">│       ├── desktopMain     # Desktop 平台适配</span><br><span class=\"line\">│       └── iosMain         # iOS 平台适配</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能预览\"><a href=\"#功能预览\" class=\"headerlink\" title=\"功能预览\"></a>功能预览</h2><h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/android.png\"></p>\n<h4 id=\"深色模式\"><a href=\"#深色模式\" class=\"headerlink\" title=\"深色模式\"></a>深色模式</h4><p><img src=\"https://cdn.julis.wang/github/blog_cmp/dark.png\"></p>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/ios.png\"></p>\n<h3 id=\"Desktop\"><a href=\"#Desktop\" class=\"headerlink\" title=\"Desktop\"></a>Desktop</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/desktop.png\"></p>\n<h4 id=\"主要技术栈\"><a href=\"#主要技术栈\" class=\"headerlink\" title=\"主要技术栈\"></a>主要技术栈</h4><ol>\n<li><strong>Ktor 客户端</strong> - 网络请求</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> httpClient = HttpClient &#123;</span><br><span class=\"line\">    install(ContentNegotiation) &#123;</span><br><span class=\"line\">        json(Json &#123; ignoreUnknownKeys = <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadPosts</span><span class=\"params\">()</span></span>: List&lt;Post&gt; = </span><br><span class=\"line\">    httpClient.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;https://cdn.julis/api/posts&quot;</span>).body()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>DataStore</strong> - 跨平台数据库</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> dataKey = stringPreferencesKey(key)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = dataStore.<span class=\"keyword\">data</span></span><br><span class=\"line\">    .<span class=\"keyword\">catch</span> &#123; exception -&gt;</span><br><span class=\"line\">        <span class=\"comment\">// dataStore.data throws an IOException when an error is encountered when reading data</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception <span class=\"keyword\">is</span> IOException) &#123;</span><br><span class=\"line\">            emit(emptyPreferences())</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> exception</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .map &#123; preferences -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: String? = preferences[dataKey]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">data</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isJson) Json.decodeFromString&lt;T&gt;(<span class=\"keyword\">data</span>) <span class=\"keyword\">else</span> (<span class=\"keyword\">data</span> <span class=\"keyword\">as</span> T)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>Koin</strong> - 依赖注入</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedModule = module &#123;</span><br><span class=\"line\">    single&lt;PostRepository&gt; &#123; PostRepositoryImpl(<span class=\"keyword\">get</span>()) &#125;</span><br><span class=\"line\">    viewModel &#123; PostViewModel(<span class=\"keyword\">get</span>()) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Kotlinx.Serialization</strong> - JSON 解析</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Serializable</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Post</span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> content: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>compose-webview-multiplatform</strong> - WebView 浏览器<br>使用的第三方开发<a href=\"https://github.com/KevinnZou/compose-webview-multiplatform\">compose-webview-multiplatform</a>基于 <a href=\"https://github.com/chromiumembedded/java-cef\">java-cef</a>开发，不过这个library 在 desktop 平台表现不是太好，待完善。</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> state = rememberWebViewState(postUrl)</span><br><span class=\"line\"> WebView(state = state,modifier = Modifier.fillMaxSize())            </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"平台特定实现\"><a href=\"#平台特定实现\" class=\"headerlink\" title=\"平台特定实现\"></a>平台特定实现</h3><p>UI 层面三端能够使用同一份代码，但为了体验，可能需要针对不同的设计，在桌面端可以设计更好地体验UI。这里避免不了 if-else 的UI逻辑，以及一些依赖各种系统的 api 需要单独实现，比如：深色模式监听、资源存储路径、系统信息、状态栏颜色等。</p>\n<p><strong>Android 端</strong><br>Android 特定的功能结合使用起来非常的简单，毕竟都是有血缘关系的。可以使用 AndroidView 直接渲染原生的 UI 页面。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">AndroidView(</span><br><span class=\"line\">      modifier = Modifier.fillMaxSize(),</span><br><span class=\"line\">      factory = &#123; context -&gt;</span><br><span class=\"line\">          MyView(context) &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      update = &#123; view -&gt;&#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p><strong>iOS 端</strong><br>iOS端主要需要 XCode 进行配合，还需要关注开发者账号相关的信息等，其他与 Android 端实现没有太大的差异。</p>\n<p><strong>桌面端</strong><br>利用 Compose Desktop 的窗口管理，可以实现窗口多开。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = application &#123;</span><br><span class=\"line\">    Window(onCloseRequest = ::exitApplication) &#123;</span><br><span class=\"line\">        DesktopAppTheme &#123; AppContent() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"🚀-性能优化实践\"><a href=\"#🚀-性能优化实践\" class=\"headerlink\" title=\"🚀 性能优化实践\"></a>🚀 性能优化实践</h3><ol>\n<li><strong>分页加载</strong>：实现懒加载防止长列表卡顿</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">LazyColumn &#123;</span><br><span class=\"line\">    itemsIndexed(posts) &#123; _, post -&gt;</span><br><span class=\"line\">        PostItem(post)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    item &#123; <span class=\"keyword\">if</span> (loading) LoadingIndicator() &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>本地缓存</strong>：DataStore 离线存储 + Ktor 缓存策略</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">HttpClient &#123;</span><br><span class=\"line\">    install(HttpCache) <span class=\"comment\">// 启用 HTTP 缓存</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>图像处理</strong>：搭配 Coil 实现高效图片加载</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">AsyncImage(</span><br><span class=\"line\">    modifier = Modifier.size(<span class=\"number\">80.</span>dp)</span><br><span class=\"line\">        .shadow(</span><br><span class=\"line\">            elevation = <span class=\"number\">5.</span>dp,</span><br><span class=\"line\">            shape = CircleShape,</span><br><span class=\"line\">            spotColor = Color.Black</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .clip(CircleShape)</span><br><span class=\"line\">        .clickable &#123; &#125;,</span><br><span class=\"line\">    model = AppConfig.AVATAR,</span><br><span class=\"line\">    contentDescription = AppConfig.AVATAR,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发经验总结\"><a href=\"#开发经验总结\" class=\"headerlink\" title=\"开发经验总结\"></a>开发经验总结</h3><ol>\n<li><p><strong>UI界面</strong><br>  使用 <a href=\"https://developer.android.com/compose\">Compose</a> 进行界面布局开发，声明性编程范式相比于传统的 xml 布局开发，高效很多，使用也很方便。使用了这种方式，传统的 UI 开发方式再也回不去了。</p>\n</li>\n<li><p><strong>状态管理</strong><br>使用 <code>mutableStateOf</code> 实现响应式更新，或者使用 <code>derivedStateOf</code> 实现派生状态的处理。</p>\n</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pagIndex <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> errorState <span class=\"keyword\">by</span> remember &#123; mutableStateOf&lt;String?&gt;(<span class=\"literal\">null</span>) &#125;   </span><br><span class=\"line\"><span class=\"keyword\">val</span> themeState <span class=\"keyword\">by</span> mineViewModel.appTheme.collectAsState()</span><br><span class=\"line\"><span class=\"keyword\">val</span> uiChecked <span class=\"keyword\">by</span> remember(themeState) &#123; derivedStateOf &#123; themeState == ThemeConstants.DARK &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><strong>导航</strong></li>\n</ol>\n<p>实现 <code>Compose Navigator</code> 统一路由管理</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> gotoDebug: () -&gt; <span class=\"built_in\">Unit</span> = &#123;</span><br><span class=\"line\">    navController.navigate(Routes.Debug())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> goToPostDetail: (Post) -&gt; <span class=\"built_in\">Unit</span> = &#123; it -&gt;</span><br><span class=\"line\">    navController.navigate(Routes.PostDetail(title = it.title, it.url))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Kotlin Flow</strong><br>简化异步编程，让网络请求的代码看起来更直观</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAllPost</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;PostV2&gt;&gt; = load(<span class=\"string\">&quot;allPosts&quot;</span>) &#123;</span><br><span class=\"line\">    postApi.getAllPost()?.<span class=\"keyword\">data</span> ?: emptyList()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAllPost</span><span class=\"params\">()</span></span>: SearchResponse? = request&lt;SearchResponse&gt;(getUrl(<span class=\"string\">&quot;api/search.json&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">request</span><span class=\"params\">(url: <span class=\"type\">String</span>)</span></span>: T? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        client.<span class=\"keyword\">get</span>(url).body()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> CancellationException) <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">        <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>经过一番各种折腾，将很多在工作上无法使用的能力（Koin、Flow、DataStore……）都体验使用了一下，在业余的时间完成了基于博客文章构建的 App 在三个平台上的开发，实际上最初我也想搭建 WebJs 的平台的，后面删除掉了，因为涉及到 web 平台开发的各种库相比客户端少很多，兼容起来也比较费劲。KMP&#x2F;CMP 这块技术确实是能很大地节省开发人力，多端使用同一份UI逻辑代码，部分逻辑也可以用 kotlin 统一进行封装，后续维护也会方便很多。但这里有个缺点就是涉及到的库所需要的 kotlin&#x2F;Java 版本要求比较高，除非开发一些独立的 App，否则公司里的项目想基于这些技术去实现不太大可能。以及如果所需要的能力比较依赖与原生，比如音视频领域就有一定的局限性，总体来讲更适合偏交互业务的开发。</p>\n<p><strong>项目源码</strong>: <a href=\"https://github.com/VomPom/blog_kmp\">https://github.com/VomPom/blog_kmp</a>  </p>\n","cover":null,"images":["https://cdn.julis.wang/github/blog_cmp/android.png","https://cdn.julis.wang/github/blog_cmp/dark.png","https://cdn.julis.wang/github/blog_cmp/ios.png","https://cdn.julis.wang/github/blog_cmp/desktop.png"],"content":"<h2 id=\"用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践\"><a href=\"#用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践\" class=\"headerlink\" title=\"用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践\"></a>用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践</h2><p>在追求高效开发的时代，跨平台技术已成为移动应用开发的主流选择，此前基于鸿蒙的开发平台开发 <a href=\"https://julis.wang/2025/05/16/%E9%B8%BF%E8%92%99-%E5%86%99%E4%BA%86%E4%B8%AA%E5%9F%BA%E4%BA%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%B8%BF%E8%92%99App/\">blog_harmony</a>，将自己博客文章进行展示。本文将介绍基于 <strong>CMP(Compose Multiplatform)</strong> 构建的开源博客应用 <a href=\"https://github.com/VomPom/blog_kmp\">blog_kmp</a>，展示如何用 Kotlin 实现跨平台的应用开发。</p>\n<h3 id=\"Compose-Multiplatform\"><a href=\"#Compose-Multiplatform\" class=\"headerlink\" title=\"Compose Multiplatform\"></a>Compose Multiplatform</h3><p>Compose Multiplatform 是 JetBrains 推出的声明式 UI 框架，基于 Jetpack Compose 扩展而来：</p>\n<ul>\n<li><strong>核心优势</strong>：用同一套 Kotlin 代码构建 Android、iOS、Desktop 和 Web 应用</li>\n<li><strong>开发效率</strong>：实时预览、热重载加速开发迭代</li>\n<li><strong>原生性能</strong>：通过 Skia 渲染引擎实现接近原生体验</li>\n<li><strong>共享逻辑</strong>：业务逻辑、网络请求、状态管理可 100% 复用</li>\n</ul>\n<h3 id=\"项目架构与技术栈\"><a href=\"#项目架构与技术栈\" class=\"headerlink\" title=\"项目架构与技术栈\"></a>项目架构与技术栈</h3><p>blog_kmp 采用分层架构设计，核心模块包括：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">shared/</span><br><span class=\"line\">├── src/commonMain/kotlin/  # 共享业务逻辑</span><br><span class=\"line\">│   ├── <span class=\"keyword\">data</span>/               # 数据层</span><br><span class=\"line\">│   ├── domain/             # 领域模型</span><br><span class=\"line\">│   └── presentation/       # UI状态管理</span><br><span class=\"line\">├── src/androidMain/        # Android 平台代码</span><br><span class=\"line\">└── src/iosMain/            # iOS 平台适配</span><br><span class=\"line\">├── composeApp</span><br><span class=\"line\">│   ├── build.gradle.kts</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">│       ├── androidMain     # Android 平台代码</span><br><span class=\"line\">│       ├── commonMain      # 共享业务逻辑</span><br><span class=\"line\">│            ├── App.kt     # 界面展示入口</span><br><span class=\"line\">│            ├── <span class=\"keyword\">data</span>       # 数据层</span><br><span class=\"line\">│            │   ├── api        # 网络请求</span><br><span class=\"line\">│            │   ├── di         # koin 依赖注入</span><br><span class=\"line\">│            │   ├── model      # model 数据</span><br><span class=\"line\">│            │   └── repository # 数据缓存管理</span><br><span class=\"line\">│            │</span><br><span class=\"line\">│            ├── navigation  # 页面间导航管理</span><br><span class=\"line\">│            ├── platform    # 通过对各个平台抽象的接口 </span><br><span class=\"line\">│            └── ui          # 通用 UI 逻辑</span><br><span class=\"line\">│</span><br><span class=\"line\">│       ├── desktopMain     # Desktop 平台适配</span><br><span class=\"line\">│       └── iosMain         # iOS 平台适配</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能预览\"><a href=\"#功能预览\" class=\"headerlink\" title=\"功能预览\"></a>功能预览</h2><h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/android.png\"></p>\n<h4 id=\"深色模式\"><a href=\"#深色模式\" class=\"headerlink\" title=\"深色模式\"></a>深色模式</h4><p><img src=\"https://cdn.julis.wang/github/blog_cmp/dark.png\"></p>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/ios.png\"></p>\n<h3 id=\"Desktop\"><a href=\"#Desktop\" class=\"headerlink\" title=\"Desktop\"></a>Desktop</h3><p><img src=\"https://cdn.julis.wang/github/blog_cmp/desktop.png\"></p>\n<h4 id=\"主要技术栈\"><a href=\"#主要技术栈\" class=\"headerlink\" title=\"主要技术栈\"></a>主要技术栈</h4><ol>\n<li><strong>Ktor 客户端</strong> - 网络请求</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> httpClient = HttpClient &#123;</span><br><span class=\"line\">    install(ContentNegotiation) &#123;</span><br><span class=\"line\">        json(Json &#123; ignoreUnknownKeys = <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadPosts</span><span class=\"params\">()</span></span>: List&lt;Post&gt; = </span><br><span class=\"line\">    httpClient.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;https://cdn.julis/api/posts&quot;</span>).body()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>DataStore</strong> - 跨平台数据库</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> dataKey = stringPreferencesKey(key)</span><br><span class=\"line\"><span class=\"keyword\">val</span> result = dataStore.<span class=\"keyword\">data</span></span><br><span class=\"line\">    .<span class=\"keyword\">catch</span> &#123; exception -&gt;</span><br><span class=\"line\">        <span class=\"comment\">// dataStore.data throws an IOException when an error is encountered when reading data</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception <span class=\"keyword\">is</span> IOException) &#123;</span><br><span class=\"line\">            emit(emptyPreferences())</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> exception</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .map &#123; preferences -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: String? = preferences[dataKey]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">data</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isJson) Json.decodeFromString&lt;T&gt;(<span class=\"keyword\">data</span>) <span class=\"keyword\">else</span> (<span class=\"keyword\">data</span> <span class=\"keyword\">as</span> T)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>Koin</strong> - 依赖注入</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedModule = module &#123;</span><br><span class=\"line\">    single&lt;PostRepository&gt; &#123; PostRepositoryImpl(<span class=\"keyword\">get</span>()) &#125;</span><br><span class=\"line\">    viewModel &#123; PostViewModel(<span class=\"keyword\">get</span>()) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Kotlinx.Serialization</strong> - JSON 解析</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Serializable</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Post</span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> content: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>compose-webview-multiplatform</strong> - WebView 浏览器<br>使用的第三方开发<a href=\"https://github.com/KevinnZou/compose-webview-multiplatform\">compose-webview-multiplatform</a>基于 <a href=\"https://github.com/chromiumembedded/java-cef\">java-cef</a>开发，不过这个library 在 desktop 平台表现不是太好，待完善。</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> state = rememberWebViewState(postUrl)</span><br><span class=\"line\"> WebView(state = state,modifier = Modifier.fillMaxSize())            </span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"平台特定实现\"><a href=\"#平台特定实现\" class=\"headerlink\" title=\"平台特定实现\"></a>平台特定实现</h3><p>UI 层面三端能够使用同一份代码，但为了体验，可能需要针对不同的设计，在桌面端可以设计更好地体验UI。这里避免不了 if-else 的UI逻辑，以及一些依赖各种系统的 api 需要单独实现，比如：深色模式监听、资源存储路径、系统信息、状态栏颜色等。</p>\n<p><strong>Android 端</strong><br>Android 特定的功能结合使用起来非常的简单，毕竟都是有血缘关系的。可以使用 AndroidView 直接渲染原生的 UI 页面。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">AndroidView(</span><br><span class=\"line\">      modifier = Modifier.fillMaxSize(),</span><br><span class=\"line\">      factory = &#123; context -&gt;</span><br><span class=\"line\">          MyView(context) &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      update = &#123; view -&gt;&#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p><strong>iOS 端</strong><br>iOS端主要需要 XCode 进行配合，还需要关注开发者账号相关的信息等，其他与 Android 端实现没有太大的差异。</p>\n<p><strong>桌面端</strong><br>利用 Compose Desktop 的窗口管理，可以实现窗口多开。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = application &#123;</span><br><span class=\"line\">    Window(onCloseRequest = ::exitApplication) &#123;</span><br><span class=\"line\">        DesktopAppTheme &#123; AppContent() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"🚀-性能优化实践\"><a href=\"#🚀-性能优化实践\" class=\"headerlink\" title=\"🚀 性能优化实践\"></a>🚀 性能优化实践</h3><ol>\n<li><strong>分页加载</strong>：实现懒加载防止长列表卡顿</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">LazyColumn &#123;</span><br><span class=\"line\">    itemsIndexed(posts) &#123; _, post -&gt;</span><br><span class=\"line\">        PostItem(post)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    item &#123; <span class=\"keyword\">if</span> (loading) LoadingIndicator() &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>本地缓存</strong>：DataStore 离线存储 + Ktor 缓存策略</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">HttpClient &#123;</span><br><span class=\"line\">    install(HttpCache) <span class=\"comment\">// 启用 HTTP 缓存</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>图像处理</strong>：搭配 Coil 实现高效图片加载</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">AsyncImage(</span><br><span class=\"line\">    modifier = Modifier.size(<span class=\"number\">80.</span>dp)</span><br><span class=\"line\">        .shadow(</span><br><span class=\"line\">            elevation = <span class=\"number\">5.</span>dp,</span><br><span class=\"line\">            shape = CircleShape,</span><br><span class=\"line\">            spotColor = Color.Black</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .clip(CircleShape)</span><br><span class=\"line\">        .clickable &#123; &#125;,</span><br><span class=\"line\">    model = AppConfig.AVATAR,</span><br><span class=\"line\">    contentDescription = AppConfig.AVATAR,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发经验总结\"><a href=\"#开发经验总结\" class=\"headerlink\" title=\"开发经验总结\"></a>开发经验总结</h3><ol>\n<li><p><strong>UI界面</strong><br>  使用 <a href=\"https://developer.android.com/compose\">Compose</a> 进行界面布局开发，声明性编程范式相比于传统的 xml 布局开发，高效很多，使用也很方便。使用了这种方式，传统的 UI 开发方式再也回不去了。</p>\n</li>\n<li><p><strong>状态管理</strong><br>使用 <code>mutableStateOf</code> 实现响应式更新，或者使用 <code>derivedStateOf</code> 实现派生状态的处理。</p>\n</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pagIndex <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> errorState <span class=\"keyword\">by</span> remember &#123; mutableStateOf&lt;String?&gt;(<span class=\"literal\">null</span>) &#125;   </span><br><span class=\"line\"><span class=\"keyword\">val</span> themeState <span class=\"keyword\">by</span> mineViewModel.appTheme.collectAsState()</span><br><span class=\"line\"><span class=\"keyword\">val</span> uiChecked <span class=\"keyword\">by</span> remember(themeState) &#123; derivedStateOf &#123; themeState == ThemeConstants.DARK &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><strong>导航</strong></li>\n</ol>\n<p>实现 <code>Compose Navigator</code> 统一路由管理</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> gotoDebug: () -&gt; <span class=\"built_in\">Unit</span> = &#123;</span><br><span class=\"line\">    navController.navigate(Routes.Debug())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> goToPostDetail: (Post) -&gt; <span class=\"built_in\">Unit</span> = &#123; it -&gt;</span><br><span class=\"line\">    navController.navigate(Routes.PostDetail(title = it.title, it.url))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Kotlin Flow</strong><br>简化异步编程，让网络请求的代码看起来更直观</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAllPost</span><span class=\"params\">()</span></span>: Flow&lt;List&lt;PostV2&gt;&gt; = load(<span class=\"string\">&quot;allPosts&quot;</span>) &#123;</span><br><span class=\"line\">    postApi.getAllPost()?.<span class=\"keyword\">data</span> ?: emptyList()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAllPost</span><span class=\"params\">()</span></span>: SearchResponse? = request&lt;SearchResponse&gt;(getUrl(<span class=\"string\">&quot;api/search.json&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">request</span><span class=\"params\">(url: <span class=\"type\">String</span>)</span></span>: T? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        client.<span class=\"keyword\">get</span>(url).body()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e <span class=\"keyword\">is</span> CancellationException) <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">        <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>经过一番各种折腾，将很多在工作上无法使用的能力（Koin、Flow、DataStore……）都体验使用了一下，在业余的时间完成了基于博客文章构建的 App 在三个平台上的开发，实际上最初我也想搭建 WebJs 的平台的，后面删除掉了，因为涉及到 web 平台开发的各种库相比客户端少很多，兼容起来也比较费劲。KMP&#x2F;CMP 这块技术确实是能很大地节省开发人力，多端使用同一份UI逻辑代码，部分逻辑也可以用 kotlin 统一进行封装，后续维护也会方便很多。但这里有个缺点就是涉及到的库所需要的 kotlin&#x2F;Java 版本要求比较高，除非开发一些独立的 App，否则公司里的项目想基于这些技术去实现不太大可能。以及如果所需要的能力比较依赖与原生，比如音视频领域就有一定的局限性，总体来讲更适合偏交互业务的开发。</p>\n<p><strong>项目源码</strong>: <a href=\"https://github.com/VomPom/blog_kmp\">https://github.com/VomPom/blog_kmp</a>  </p>\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"KMP","slug":"KMP","api":"api/tags/KMP.json"}],"api":"api/posts/2025/07/28/Compose-Multiplatform-跨平台博客应用实践.json"},{"title":"[鸿蒙]写了个基于Hexo博客的鸿蒙App","slug":"鸿蒙-写了个基于Hexo博客的鸿蒙App","date":"2025-05-16T12:10:00.000Z","updated":"2025-07-28T14:52:28.959Z","comments":true,"url":"2025/05/16/鸿蒙-写了个基于Hexo博客的鸿蒙App/","excerpt":"<p>最近部门也在跟进<a href=\"https://www.harmonyos.com/\">鸿蒙</a>平台的业务开发，自己主要是做 Android 开发，主要使用 Kotlin&#x2F;Java 语言。，需要对新的开发平台和开发模式进行学习，在业余时间开了个项目练手，做了个基于 Hexo 博客内容开发的App。鸿蒙主要使用<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts\">ArkTS语言</a>和<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui\">ArkUI框架</a>进行开发，有使用 <a href=\"https://developer.android.com/compose\">Jetpack Compose</a> 和 JavaScript&#x2F;TypeScript 的开发经验的话，上手会比较的轻松。本文主要介绍做的App功能以及对鸿蒙开发的一个总结。</p>\n<h2 id=\"App-简介\"><a href=\"#App-简介\" class=\"headerlink\" title=\"App 简介\"></a>App 简介</h2><p>后台数据来自 <a href=\"https://hexo.io/\">Hexo</a> 生成的博客文章，利用 <a href=\"https://github.com/ryanuo/hexo-generator-wxapi\">hexo-generator-wxapi</a> 生成 api .json 文件，再利用 <a href=\"https://www.qiniu.com/\">七牛云</a> 提供对图片和 .json 文件 CDN。</p>\n<p>实现的功能</p>\n<ul>\n<li>博客列表分页加载</li>\n<li>文章详情加载</li>\n<li>文章按分类&#x2F;标签展示</li>\n<li>文章内容统计</li>\n<li>深色&#x2F;浅色模式切换</li>\n<li>数据本地缓存</li>\n</ul>\n<h3 id=\"功能预览\"><a href=\"#功能预览\" class=\"headerlink\" title=\"功能预览\"></a>功能预览</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_blog_list.jpeg\"  alt=\"博客列表\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_stats.jpeg\"  alt=\"统计\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_mine.jpeg\" alt=\"个人\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_detail.jpeg\"  alt=\"文章详情\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_category.jpeg\"  alt=\"分类\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_tag.jpeg\"  alt=\"标签\" /></td>\n</tr>\n</tbody></table>\n<h3 id=\"依赖项\"><a href=\"#依赖项\" class=\"headerlink\" title=\"依赖项\"></a>依赖项</h3><h4 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h4><ul>\n<li><a href=\"https://hexo.io/\">Hexo</a> 快速、简洁且高效的博客框架</li>\n<li><a href=\"https://github.com/ryanuo/hexo-generator-wxapi\">hexo-generator-wxapi</a> 用于将 Hexo 博客内容生成 api 风格的.json文件</li>\n<li><a href=\"https://www.qiniu.com/\">七牛云</a> 提供对图片和.json文件 CDN加速</li>\n</ul>\n<h4 id=\"HarmonyOS\"><a href=\"#HarmonyOS\" class=\"headerlink\" title=\"HarmonyOS\"></a>HarmonyOS</h4><ul>\n<li><a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts\">ArkTS</a> ArkTS在TypeScript（简称TS）生态基础上做了进一步扩展，保持了TS的基本风格，同时通过规范定义强化开发期静态检查和分析，提升代码健壮性，并实现更好的程序执行稳定性和性能。</li>\n<li><a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui\">ArkUI</a>  ArkUI（方舟UI框架）为应用的UI开发提供了完整的基础设施，包括简洁的UI语法、丰富的UI功能（组件、布局、动画以及交互事件），以及实时界面预览工具等，可以支持开发者进行可视化界面开发。</li>\n<li><a href=\"https://gitee.com/openharmony-sig/ohos_pull_to_refresh\">ohos_pull_to_refresh</a> 列表加载&#x2F;刷新控件(没有’No more’的状态)</li>\n<li><a href=\"https://github.com/Tencent/MMKV\">MMKV</a> 是基于 mmap 内存映射的 key-value 组件</li>\n</ul>\n<h2 id=\"鸿蒙开发总结\"><a href=\"#鸿蒙开发总结\" class=\"headerlink\" title=\"鸿蒙开发总结\"></a>鸿蒙开发总结</h2><h3 id=\"ArkTs-语言\"><a href=\"#ArkTs-语言\" class=\"headerlink\" title=\"ArkTs 语言\"></a>ArkTs 语言</h3><p>ArkTS 是 TypeScript 的超集，TypeScript 又是 JavaScript 的超集，所以对于基本数据类型使用的是 TypeScript 语法。他们三者的关系如下图所示：</p>\n  <img src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/713/408/959/0030086000713408959.20241009110308.85777546121432927171131630988896:50001231000000:2800:D599CEDEC4315A859E47A08CEC5D4D3E334431F82ABC9FD0E9B6AD0F91CD2FF5.png\" width=\"80%\" alt=\"ArkTS与TypeScript的关系\" />\n\n<p>相关的差异可以参考社区话题讨论 <a href=\"https://developer.huawei.com/consumer/cn/forum/topic/0203163854317501934\">ArkTS与Typescript的区别？\n</a></p>\n<p>这里主要记录一下自己使用过程中踩过的坑：</p>\n<h4 id=\"基本语言类型\"><a href=\"#基本语言类型\" class=\"headerlink\" title=\"基本语言类型\"></a>基本语言类型</h4><p>Number 和 number 是两个不同的类型，Number 是 JavaScript 中的一个全局对象，可以使用 new Number() 来创建一个 Number 对象。同理对于 String 和 string，Boolean 和 boolean 也是一样的，大写开头的是<strong>包装对象类型</strong>，小写的是<strong>原始类型</strong>，这点Java&#x2F;kotlin也有类似的包装对象比较好理解，但 Object 居然也有大小写之区分相比难理解点，写代码的时候好几次忽略了这个事，<strong>Object</strong> 是所有对象的基类，object 表示非原始类型（即不是 number、string、boolean、symbol、null 或 undefined 的所有类型）。可以是任何对象、数组、函数、类实例等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj: object;</span><br><span class=\"line\">obj = &#123; a: 1 &#125;;         // ✅ 正确：普通对象</span><br><span class=\"line\">obj = [1, 2, 3];        // ✅ 正确：数组</span><br><span class=\"line\">obj = () =&gt; &#123;&#125;;         // ✅ 正确：函数</span><br><span class=\"line\">obj = new Date();       // ✅ 正确：类实例</span><br><span class=\"line\"></span><br><span class=\"line\">obj = 42;               // ❌ 错误：原始类型 number</span><br><span class=\"line\">obj = &quot;hello&quot;;          // ❌ 错误：原始类型 string</span><br></pre></td></tr></table></figure>\n<p>两则的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"left\">object</th>\n<th align=\"left\">Object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>允许的值</strong></td>\n<td align=\"left\">仅非原始类型（对象、数组等）</td>\n<td align=\"left\">任意类型（包括原始值）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>原始值处理</strong></td>\n<td align=\"left\">禁止</td>\n<td align=\"left\">自动装箱（如 42 → Number）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>使用场景</strong></td>\n<td align=\"left\">明确限制为非原始类型时</td>\n<td align=\"left\">极少使用（通常用 unknown 或具体类型替代）</td>\n</tr>\n</tbody></table>\n<h4 id=\"Map-等集合类当作普通-JavaScript-对象来操作\"><a href=\"#Map-等集合类当作普通-JavaScript-对象来操作\" class=\"headerlink\" title=\"Map 等集合类当作普通 JavaScript 对象来操作\"></a>Map 等集合类当作普通 JavaScript 对象来操作</h4><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">map[<span class=\"string\">&quot;key&quot;</span>] = value;            <span class=\"comment\">// ❌ 错误用法！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;biz&quot;</span>));   <span class=\"comment\">// ❌ 输出 undefined</span></span><br></pre></td></tr></table></figure>\n<p>最开始挺奇怪的 map 明明设置了值，但是对应的 map size 为0，遍历 map 也没有数据。后来才发现是这种方式 不会 触发 Map 的内部机制，而是绕过了 Map 的方法，直接操作对象的属性，赋值后，键值对 不会 被存入 Map 的真实存储中，而是作为对象的普通属性存在。正确的用法是：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">map.<span class=\"property\">set</span>[<span class=\"string\">&quot;key&quot;</span>] = value;        <span class=\"comment\">//  ✅ 正确用法！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;biz&quot;</span>));   <span class=\"comment\">//  ✅ 输出 value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"struct-的困扰\"><a href=\"#struct-的困扰\" class=\"headerlink\" title=\"struct 的困扰\"></a>struct 的困扰</h4><p>在 js 里面是没有 <code>struct</code> 这个关键词的，从刚接触到现在它唯一的作用就是：和 <code>@Component</code>绑定声明一个UI控件。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> struct <span class=\"title class_\">ToolBar</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@Component</code> 和 <code>struct</code> 两则缺一不可，既然必须有 <code>@Component</code>来标注这是一个UI控件，为什么不能下面这样呢？能省掉一个关键字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolBar</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>同样困扰的人还有很多，这里有一份讨论<a href=\"https://developer.huawei.com/consumer/cn/forum/topic/0204135301248599134\">定义组件时的stuct关键字是什么？</a><br>官方也有一份聊胜于无的介绍</p>\n<blockquote>\n<p>struct和class的区别是什么? </p>\n<p>struct只在自定义组件中使用，@Component装饰的struct就是自定义组件，自定义组件和class是两个概念，自定义组件没有类型，也不能等同于class。如果开发者需要使用组件作为参数在组件之间传递，可以使用自定义占位节点。</p>\n</blockquote>\n<p>我猜测这样是为了省掉对<code>@Component</code>装饰器编译的工作量，如果使用 class 声明，那么声明的UI控件就有“面向对象”的能力，实际上只希望它是一个UI控件声明，不需要它有其他的能力。难道不能对 <code>@Component</code> 装饰过的对象收回“面向对象”的能力么？当然能啊，估计要做很多编译检查的事儿。另外，从开发理解的层面上来讲，它确实也已经不是”对象”了，它只是一个干巴巴的一个UI结构，所以干脆就搞了一个新的关键词 struct。</p>\n<h3 id=\"ArkUI-框架\"><a href=\"#ArkUI-框架\" class=\"headerlink\" title=\"ArkUI 框架\"></a>ArkUI 框架</h3><p>整体框架使用的方式和 <a href=\"https://developer.android.com/compose\">Jetpack Compose</a> 类似，都是声明式UI框架。compose 里面使用  <code>@Composable</code>来标记某个方法这个方法便成了<code>UI控件</code>，控件里面的状态管理使用 <code>remember</code>+ <code>mutableState</code>来控制。而 ArkUI 通过 @State、@Link、@Prop 等装饰器来控制。了解了这些个装饰器的用法，基本上就能理解 ArkUI 的开发流程了。</p>\n<h4 id=\"构建-UI-的-Component-Builder\"><a href=\"#构建-UI-的-Component-Builder\" class=\"headerlink\" title=\"构建 UI 的 @Component @Builder\"></a>构建 UI 的 @Component @Builder</h4><p>@Component 和 @Builder 组合起来实现的差不多就是 Compose 里面使用  <code>@Composable</code> 装饰某个方法的作用，用于构建 UI 或可复用的逻辑单元。<br><strong>@Component</strong><br>用于创建一个自定义组件，组件可以包含独立的 UI 结构、状态管理和生命周期。</p>\n<p><strong>@Builder</strong><br>定义可复用的 UI 片段，用于创建一个UI 构建函数，封装一段可复用的 UI 代码块。不是独立组件，而是嵌入到其他组件或布局中执行，主要作用是复用和逻辑隔离，例如：关于页面，里面的文本是差不多的样式，只是内容不一样，那么只需要保留一个 text 属性出来接收参数。或者某块UI比较复杂，可以抽离一部分UI成为一个独立的UI逻辑模块。</p>\n<h3 id=\"构建-UI-的状态控制装饰器\"><a href=\"#构建-UI-的状态控制装饰器\" class=\"headerlink\" title=\"构建 UI 的状态控制装饰器\"></a>构建 UI 的状态控制装饰器</h3><p><strong>@State</strong><br>比较常用的装饰器，和 Compose 里面 remember+mutableStateOf 的作用差不多，对应的值改变之后，对相关的使用到该属性UI的地方进行刷新。</p>\n<p><strong>@Prop</strong><br>@Prop 装饰的变量和父组件建立单向的同步关系，@Prop变量允许在本地修改，但修改后的变化不会同步回父组件。</p>\n<p>也就是在某个 @Component 的组件内有一个 @State 装饰的属性，传递到子 @Component 组件 @Prop 修饰的属性。子控件对这个属性修改之后，父控件不会对这个改变感知，父控件UI不会改变。</p>\n<p><strong>@Link</strong><br>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。<br>跟 @Prop 的作用类似，不过是双向的，子控件对这个属性修改之后，父控件会感知这个变化，父控件UI会随着这个属性改变而改变。</p>\n<p><strong>@BuilderParam</strong><br>主要用于动态注入 UI 构建逻辑（即 @Builder 函数），实现父组件向子组件传递可定制的 UI 片段，也就是向子控件传递 UI 参数。</p>\n<p>基本上比较常用到的就这些，还有很多例如：@LocalBuilder @StorageLink @Styles等，都是为了解决开发过过程中遇到的问题，但是只要掌握了 ArkUI UI组件的声明周期和状态管理的基本原理理解其他装饰器还是比较简单的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体开发体验下来，鸿蒙开发学习成本并不是特别高，比较快能上手，但设计的 api 更像一个缝合怪，且使用上不太收敛。很多库还需要再建设，例如音视频开发对应的支持库还不是特别成熟。不过，作为一个从头搞的生态来说能实现成这样已经很不错了，就像此前武磊登陆西甲，以及目前被看好的青年新星王钰栋，都是”自己的孩子”，需要迈出第一步。现在，很多公司也在适配鸿蒙了，期待未来能从 Android 跟 iOS 的生态中争夺出一片大市场。</p>\n<p>项目源码：<a href=\"https://github.com/VomPom/blog_harmony\">https://github.com/VomPom/blog_harmony</a></p>\n","cover":null,"images":["https://cdn.julis.wang/github/blog_harmony/light_blog_list.jpeg","https://cdn.julis.wang/github/blog_harmony/light_stats.jpeg","https://cdn.julis.wang/github/blog_harmony/light_mine.jpeg","https://cdn.julis.wang/github/blog_harmony/light_detail.jpeg","https://cdn.julis.wang/github/blog_harmony/light_category.jpeg","https://cdn.julis.wang/github/blog_harmony/light_tag.jpeg","https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/713/408/959/0030086000713408959.20241009110308.85777546121432927171131630988896:50001231000000:2800:D599CEDEC4315A859E47A08CEC5D4D3E334431F82ABC9FD0E9B6AD0F91CD2FF5.png"],"content":"<p>最近部门也在跟进<a href=\"https://www.harmonyos.com/\">鸿蒙</a>平台的业务开发，自己主要是做 Android 开发，主要使用 Kotlin&#x2F;Java 语言。，需要对新的开发平台和开发模式进行学习，在业余时间开了个项目练手，做了个基于 Hexo 博客内容开发的App。鸿蒙主要使用<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts\">ArkTS语言</a>和<a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui\">ArkUI框架</a>进行开发，有使用 <a href=\"https://developer.android.com/compose\">Jetpack Compose</a> 和 JavaScript&#x2F;TypeScript 的开发经验的话，上手会比较的轻松。本文主要介绍做的App功能以及对鸿蒙开发的一个总结。</p>\n<h2 id=\"App-简介\"><a href=\"#App-简介\" class=\"headerlink\" title=\"App 简介\"></a>App 简介</h2><p>后台数据来自 <a href=\"https://hexo.io/\">Hexo</a> 生成的博客文章，利用 <a href=\"https://github.com/ryanuo/hexo-generator-wxapi\">hexo-generator-wxapi</a> 生成 api .json 文件，再利用 <a href=\"https://www.qiniu.com/\">七牛云</a> 提供对图片和 .json 文件 CDN。</p>\n<p>实现的功能</p>\n<ul>\n<li>博客列表分页加载</li>\n<li>文章详情加载</li>\n<li>文章按分类&#x2F;标签展示</li>\n<li>文章内容统计</li>\n<li>深色&#x2F;浅色模式切换</li>\n<li>数据本地缓存</li>\n</ul>\n<h3 id=\"功能预览\"><a href=\"#功能预览\" class=\"headerlink\" title=\"功能预览\"></a>功能预览</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_blog_list.jpeg\"  alt=\"博客列表\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_stats.jpeg\"  alt=\"统计\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_mine.jpeg\" alt=\"个人\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_detail.jpeg\"  alt=\"文章详情\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_category.jpeg\"  alt=\"分类\" /></td>\n<td><img src=\"https://cdn.julis.wang/github/blog_harmony/light_tag.jpeg\"  alt=\"标签\" /></td>\n</tr>\n</tbody></table>\n<h3 id=\"依赖项\"><a href=\"#依赖项\" class=\"headerlink\" title=\"依赖项\"></a>依赖项</h3><h4 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h4><ul>\n<li><a href=\"https://hexo.io/\">Hexo</a> 快速、简洁且高效的博客框架</li>\n<li><a href=\"https://github.com/ryanuo/hexo-generator-wxapi\">hexo-generator-wxapi</a> 用于将 Hexo 博客内容生成 api 风格的.json文件</li>\n<li><a href=\"https://www.qiniu.com/\">七牛云</a> 提供对图片和.json文件 CDN加速</li>\n</ul>\n<h4 id=\"HarmonyOS\"><a href=\"#HarmonyOS\" class=\"headerlink\" title=\"HarmonyOS\"></a>HarmonyOS</h4><ul>\n<li><a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts\">ArkTS</a> ArkTS在TypeScript（简称TS）生态基础上做了进一步扩展，保持了TS的基本风格，同时通过规范定义强化开发期静态检查和分析，提升代码健壮性，并实现更好的程序执行稳定性和性能。</li>\n<li><a href=\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui\">ArkUI</a>  ArkUI（方舟UI框架）为应用的UI开发提供了完整的基础设施，包括简洁的UI语法、丰富的UI功能（组件、布局、动画以及交互事件），以及实时界面预览工具等，可以支持开发者进行可视化界面开发。</li>\n<li><a href=\"https://gitee.com/openharmony-sig/ohos_pull_to_refresh\">ohos_pull_to_refresh</a> 列表加载&#x2F;刷新控件(没有’No more’的状态)</li>\n<li><a href=\"https://github.com/Tencent/MMKV\">MMKV</a> 是基于 mmap 内存映射的 key-value 组件</li>\n</ul>\n<h2 id=\"鸿蒙开发总结\"><a href=\"#鸿蒙开发总结\" class=\"headerlink\" title=\"鸿蒙开发总结\"></a>鸿蒙开发总结</h2><h3 id=\"ArkTs-语言\"><a href=\"#ArkTs-语言\" class=\"headerlink\" title=\"ArkTs 语言\"></a>ArkTs 语言</h3><p>ArkTS 是 TypeScript 的超集，TypeScript 又是 JavaScript 的超集，所以对于基本数据类型使用的是 TypeScript 语法。他们三者的关系如下图所示：</p>\n  <img src=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/713/408/959/0030086000713408959.20241009110308.85777546121432927171131630988896:50001231000000:2800:D599CEDEC4315A859E47A08CEC5D4D3E334431F82ABC9FD0E9B6AD0F91CD2FF5.png\" width=\"80%\" alt=\"ArkTS与TypeScript的关系\" />\n\n<p>相关的差异可以参考社区话题讨论 <a href=\"https://developer.huawei.com/consumer/cn/forum/topic/0203163854317501934\">ArkTS与Typescript的区别？\n</a></p>\n<p>这里主要记录一下自己使用过程中踩过的坑：</p>\n<h4 id=\"基本语言类型\"><a href=\"#基本语言类型\" class=\"headerlink\" title=\"基本语言类型\"></a>基本语言类型</h4><p>Number 和 number 是两个不同的类型，Number 是 JavaScript 中的一个全局对象，可以使用 new Number() 来创建一个 Number 对象。同理对于 String 和 string，Boolean 和 boolean 也是一样的，大写开头的是<strong>包装对象类型</strong>，小写的是<strong>原始类型</strong>，这点Java&#x2F;kotlin也有类似的包装对象比较好理解，但 Object 居然也有大小写之区分相比难理解点，写代码的时候好几次忽略了这个事，<strong>Object</strong> 是所有对象的基类，object 表示非原始类型（即不是 number、string、boolean、symbol、null 或 undefined 的所有类型）。可以是任何对象、数组、函数、类实例等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj: object;</span><br><span class=\"line\">obj = &#123; a: 1 &#125;;         // ✅ 正确：普通对象</span><br><span class=\"line\">obj = [1, 2, 3];        // ✅ 正确：数组</span><br><span class=\"line\">obj = () =&gt; &#123;&#125;;         // ✅ 正确：函数</span><br><span class=\"line\">obj = new Date();       // ✅ 正确：类实例</span><br><span class=\"line\"></span><br><span class=\"line\">obj = 42;               // ❌ 错误：原始类型 number</span><br><span class=\"line\">obj = &quot;hello&quot;;          // ❌ 错误：原始类型 string</span><br></pre></td></tr></table></figure>\n<p>两则的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"left\">object</th>\n<th align=\"left\">Object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>允许的值</strong></td>\n<td align=\"left\">仅非原始类型（对象、数组等）</td>\n<td align=\"left\">任意类型（包括原始值）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>原始值处理</strong></td>\n<td align=\"left\">禁止</td>\n<td align=\"left\">自动装箱（如 42 → Number）</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>使用场景</strong></td>\n<td align=\"left\">明确限制为非原始类型时</td>\n<td align=\"left\">极少使用（通常用 unknown 或具体类型替代）</td>\n</tr>\n</tbody></table>\n<h4 id=\"Map-等集合类当作普通-JavaScript-对象来操作\"><a href=\"#Map-等集合类当作普通-JavaScript-对象来操作\" class=\"headerlink\" title=\"Map 等集合类当作普通 JavaScript 对象来操作\"></a>Map 等集合类当作普通 JavaScript 对象来操作</h4><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">map[<span class=\"string\">&quot;key&quot;</span>] = value;            <span class=\"comment\">// ❌ 错误用法！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;biz&quot;</span>));   <span class=\"comment\">// ❌ 输出 undefined</span></span><br></pre></td></tr></table></figure>\n<p>最开始挺奇怪的 map 明明设置了值，但是对应的 map size 为0，遍历 map 也没有数据。后来才发现是这种方式 不会 触发 Map 的内部机制，而是绕过了 Map 的方法，直接操作对象的属性，赋值后，键值对 不会 被存入 Map 的真实存储中，而是作为对象的普通属性存在。正确的用法是：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">map.<span class=\"property\">set</span>[<span class=\"string\">&quot;key&quot;</span>] = value;        <span class=\"comment\">//  ✅ 正确用法！</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;biz&quot;</span>));   <span class=\"comment\">//  ✅ 输出 value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"struct-的困扰\"><a href=\"#struct-的困扰\" class=\"headerlink\" title=\"struct 的困扰\"></a>struct 的困扰</h4><p>在 js 里面是没有 <code>struct</code> 这个关键词的，从刚接触到现在它唯一的作用就是：和 <code>@Component</code>绑定声明一个UI控件。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> struct <span class=\"title class_\">ToolBar</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@Component</code> 和 <code>struct</code> 两则缺一不可，既然必须有 <code>@Component</code>来标注这是一个UI控件，为什么不能下面这样呢？能省掉一个关键字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolBar</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>同样困扰的人还有很多，这里有一份讨论<a href=\"https://developer.huawei.com/consumer/cn/forum/topic/0204135301248599134\">定义组件时的stuct关键字是什么？</a><br>官方也有一份聊胜于无的介绍</p>\n<blockquote>\n<p>struct和class的区别是什么? </p>\n<p>struct只在自定义组件中使用，@Component装饰的struct就是自定义组件，自定义组件和class是两个概念，自定义组件没有类型，也不能等同于class。如果开发者需要使用组件作为参数在组件之间传递，可以使用自定义占位节点。</p>\n</blockquote>\n<p>我猜测这样是为了省掉对<code>@Component</code>装饰器编译的工作量，如果使用 class 声明，那么声明的UI控件就有“面向对象”的能力，实际上只希望它是一个UI控件声明，不需要它有其他的能力。难道不能对 <code>@Component</code> 装饰过的对象收回“面向对象”的能力么？当然能啊，估计要做很多编译检查的事儿。另外，从开发理解的层面上来讲，它确实也已经不是”对象”了，它只是一个干巴巴的一个UI结构，所以干脆就搞了一个新的关键词 struct。</p>\n<h3 id=\"ArkUI-框架\"><a href=\"#ArkUI-框架\" class=\"headerlink\" title=\"ArkUI 框架\"></a>ArkUI 框架</h3><p>整体框架使用的方式和 <a href=\"https://developer.android.com/compose\">Jetpack Compose</a> 类似，都是声明式UI框架。compose 里面使用  <code>@Composable</code>来标记某个方法这个方法便成了<code>UI控件</code>，控件里面的状态管理使用 <code>remember</code>+ <code>mutableState</code>来控制。而 ArkUI 通过 @State、@Link、@Prop 等装饰器来控制。了解了这些个装饰器的用法，基本上就能理解 ArkUI 的开发流程了。</p>\n<h4 id=\"构建-UI-的-Component-Builder\"><a href=\"#构建-UI-的-Component-Builder\" class=\"headerlink\" title=\"构建 UI 的 @Component @Builder\"></a>构建 UI 的 @Component @Builder</h4><p>@Component 和 @Builder 组合起来实现的差不多就是 Compose 里面使用  <code>@Composable</code> 装饰某个方法的作用，用于构建 UI 或可复用的逻辑单元。<br><strong>@Component</strong><br>用于创建一个自定义组件，组件可以包含独立的 UI 结构、状态管理和生命周期。</p>\n<p><strong>@Builder</strong><br>定义可复用的 UI 片段，用于创建一个UI 构建函数，封装一段可复用的 UI 代码块。不是独立组件，而是嵌入到其他组件或布局中执行，主要作用是复用和逻辑隔离，例如：关于页面，里面的文本是差不多的样式，只是内容不一样，那么只需要保留一个 text 属性出来接收参数。或者某块UI比较复杂，可以抽离一部分UI成为一个独立的UI逻辑模块。</p>\n<h3 id=\"构建-UI-的状态控制装饰器\"><a href=\"#构建-UI-的状态控制装饰器\" class=\"headerlink\" title=\"构建 UI 的状态控制装饰器\"></a>构建 UI 的状态控制装饰器</h3><p><strong>@State</strong><br>比较常用的装饰器，和 Compose 里面 remember+mutableStateOf 的作用差不多，对应的值改变之后，对相关的使用到该属性UI的地方进行刷新。</p>\n<p><strong>@Prop</strong><br>@Prop 装饰的变量和父组件建立单向的同步关系，@Prop变量允许在本地修改，但修改后的变化不会同步回父组件。</p>\n<p>也就是在某个 @Component 的组件内有一个 @State 装饰的属性，传递到子 @Component 组件 @Prop 修饰的属性。子控件对这个属性修改之后，父控件不会对这个改变感知，父控件UI不会改变。</p>\n<p><strong>@Link</strong><br>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。<br>跟 @Prop 的作用类似，不过是双向的，子控件对这个属性修改之后，父控件会感知这个变化，父控件UI会随着这个属性改变而改变。</p>\n<p><strong>@BuilderParam</strong><br>主要用于动态注入 UI 构建逻辑（即 @Builder 函数），实现父组件向子组件传递可定制的 UI 片段，也就是向子控件传递 UI 参数。</p>\n<p>基本上比较常用到的就这些，还有很多例如：@LocalBuilder @StorageLink @Styles等，都是为了解决开发过过程中遇到的问题，但是只要掌握了 ArkUI UI组件的声明周期和状态管理的基本原理理解其他装饰器还是比较简单的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体开发体验下来，鸿蒙开发学习成本并不是特别高，比较快能上手，但设计的 api 更像一个缝合怪，且使用上不太收敛。很多库还需要再建设，例如音视频开发对应的支持库还不是特别成熟。不过，作为一个从头搞的生态来说能实现成这样已经很不错了，就像此前武磊登陆西甲，以及目前被看好的青年新星王钰栋，都是”自己的孩子”，需要迈出第一步。现在，很多公司也在适配鸿蒙了，期待未来能从 Android 跟 iOS 的生态中争夺出一片大市场。</p>\n<p>项目源码：<a href=\"https://github.com/VomPom/blog_harmony\">https://github.com/VomPom/blog_harmony</a></p>\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"鸿蒙","slug":"鸿蒙","api":"api/tags/鸿蒙.json"}],"api":"api/posts/2025/05/16/鸿蒙-写了个基于Hexo博客的鸿蒙App.json"},{"title":"快捷-Mac桌面adb push小工具","slug":"快捷-Mac桌面adb-push小工具","date":"2022-01-15T15:43:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2022/01/15/快捷-Mac桌面adb-push小工具/","excerpt":"<p>最近在Android开发过程中会遇到很多传文件的操作，市面上也有比较多的“文件管理器”，例如锤子的HandShaker，或者谷歌官方的<a href=\"https://www.android.com/filetransfer/\">filetransfer</a>,但他们都需要打开“传输文件”这个行为，个人感觉比较繁琐。作为Android开发，使用adb命令行去传输文件是不错的，但每次输入<code>adb push xxx</code>还是挺麻烦，而且必须打开 Terminal 才能运行。为了让所有操作更简化，我做了一个简单的桌面工具，只需要连上手机，正常打开adb，拖到文件到对应区域，则可以实现文件传输。</p>\n<h2 id=\"Macos-Adb-Helper\"><a href=\"#Macos-Adb-Helper\" class=\"headerlink\" title=\"Macos Adb Helper\"></a>Macos Adb Helper</h2><p>由于自己主要是从事Android相关的开发，对于Mac桌面端的开发不太熟悉，但是 Flutter 这个神奇的跨平台框架可以让你稍微消除这个平衡。</p>\n<p>实现一键拖拽文件发送到Android手机，主要需要实现的功能有两个：</p>\n<p>1、文件拖动功能</p>\n<p>2、发送功能</p>\n<h3 id=\"文件拖动功能\"><a href=\"#文件拖动功能\" class=\"headerlink\" title=\"文件拖动功能\"></a>文件拖动功能</h3><p>拖动功能也不需要自己去写，已经有现成的库 <a href=\"https://pub.dev/packages/desktop_drop\">desktop_drop</a> 实现好了该功能。看了下源码与大多数 plugin 一样，通过methed channel进行mac os进行通信，对桌面开发相关Api不太熟，实现原理没有太深究。</p>\n<h3 id=\"发送功能\"><a href=\"#发送功能\" class=\"headerlink\" title=\"发送功能\"></a>发送功能</h3><p>发送功能主要使用 adb 功能提供的 push命令实现。不过要在 Flutter 上面实现执行命令的功能还是比较简单，只要使用 <code>Process.start(&#39;adb&#39;, [&#39;push&#39;, ...])</code>即可，但是中间会遇到权限不足的问题，报错：<code>ProcessException (ProcessException: Operation not permitted)</code><br>需要关闭沙盒权限才行，将<code>com.apple.security.app-sandbox</code>之设为<code>false</code>。 那咱们这个程序就不太安全咯?不知道还有没有更好的办法?个人感觉不大行……</p>\n<p>在这里还遇到个比较蛋疼的问题，对于实现大文件的发送，通常时间比较久，使用<code>Process.start</code>没有找到相关的api能够直接拿到进度，不过也就简单实用，问题不大 ^_^#。</p>\n<p>效果展示</p>\n<img src=\"https://cdn.julis.wang/blog/img/mac_adb_helper.gif\">\n\n<p>项目地址：<a href=\"https://github.com/VomPom/macos_adb_helper\">macos_adb_helper</a></p>\n","cover":null,"images":["https://cdn.julis.wang/blog/img/mac_adb_helper.gif"],"content":"<p>最近在Android开发过程中会遇到很多传文件的操作，市面上也有比较多的“文件管理器”，例如锤子的HandShaker，或者谷歌官方的<a href=\"https://www.android.com/filetransfer/\">filetransfer</a>,但他们都需要打开“传输文件”这个行为，个人感觉比较繁琐。作为Android开发，使用adb命令行去传输文件是不错的，但每次输入<code>adb push xxx</code>还是挺麻烦，而且必须打开 Terminal 才能运行。为了让所有操作更简化，我做了一个简单的桌面工具，只需要连上手机，正常打开adb，拖到文件到对应区域，则可以实现文件传输。</p>\n<h2 id=\"Macos-Adb-Helper\"><a href=\"#Macos-Adb-Helper\" class=\"headerlink\" title=\"Macos Adb Helper\"></a>Macos Adb Helper</h2><p>由于自己主要是从事Android相关的开发，对于Mac桌面端的开发不太熟悉，但是 Flutter 这个神奇的跨平台框架可以让你稍微消除这个平衡。</p>\n<p>实现一键拖拽文件发送到Android手机，主要需要实现的功能有两个：</p>\n<p>1、文件拖动功能</p>\n<p>2、发送功能</p>\n<h3 id=\"文件拖动功能\"><a href=\"#文件拖动功能\" class=\"headerlink\" title=\"文件拖动功能\"></a>文件拖动功能</h3><p>拖动功能也不需要自己去写，已经有现成的库 <a href=\"https://pub.dev/packages/desktop_drop\">desktop_drop</a> 实现好了该功能。看了下源码与大多数 plugin 一样，通过methed channel进行mac os进行通信，对桌面开发相关Api不太熟，实现原理没有太深究。</p>\n<h3 id=\"发送功能\"><a href=\"#发送功能\" class=\"headerlink\" title=\"发送功能\"></a>发送功能</h3><p>发送功能主要使用 adb 功能提供的 push命令实现。不过要在 Flutter 上面实现执行命令的功能还是比较简单，只要使用 <code>Process.start(&#39;adb&#39;, [&#39;push&#39;, ...])</code>即可，但是中间会遇到权限不足的问题，报错：<code>ProcessException (ProcessException: Operation not permitted)</code><br>需要关闭沙盒权限才行，将<code>com.apple.security.app-sandbox</code>之设为<code>false</code>。 那咱们这个程序就不太安全咯?不知道还有没有更好的办法?个人感觉不大行……</p>\n<p>在这里还遇到个比较蛋疼的问题，对于实现大文件的发送，通常时间比较久，使用<code>Process.start</code>没有找到相关的api能够直接拿到进度，不过也就简单实用，问题不大 ^_^#。</p>\n<p>效果展示</p>\n<img src=\"https://cdn.julis.wang/blog/img/mac_adb_helper.gif\">\n\n<p>项目地址：<a href=\"https://github.com/VomPom/macos_adb_helper\">macos_adb_helper</a></p>\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"flutter","slug":"flutter","api":"api/tags/flutter.json"},{"name":"mac","slug":"mac","api":"api/tags/mac.json"},{"name":"工具","slug":"工具","api":"api/tags/工具.json"}],"api":"api/posts/2022/01/15/快捷-Mac桌面adb-push小工具.json"},{"title":"记一段 Android 面试时光","slug":"记一段-Android-面试时光","date":"2021-07-06T14:56:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2021/07/06/记一段-Android-面试时光/","excerpt":"<p>今晚已到下班时间，我又如往常一样，背着自己的包来到了楼下的会议室。不过与前些天的日子不太一样，今天我已经放下了诸多包袱，剩下的是一个轻松的自己，历经一个月的面试时光，终于可以在这会议室惬然地写下一些东西。</p>\n<p>准备面试以及参加面试都是一个高度紧张的过程，为了面试，我放弃了一些时间，也让自己每天变得很疲惫，因而有更少的精力去干一些其他事情。在六月，我还未完成一本书的阅读，时间忙碌所占去，或者那个疲惫的身体没有能静得下心来阅读一本书籍，我好希望能够有一个轻轻松松的时间，能够做自己想做的事\b。但在诸多现实面前，不得不低下头吧，好在现在收获的Offer也能对得起自己的付出，遂想记录一下这一个月来自己的面试经历。</p>\n<p>在五月初便有想跳槽的想法，原因也很简单：现在的日子太舒服，想找到一个更大的平台来提升自己。在五月下旬开始行动了起来，自己当然有想要去的厂，也通过一些相关的流程约到了面试的时间。那么接下来就是准备吧，准备的过程包括：<strong>算法(视公司而定)、基础知识(常见面试问题等)、项目(项目本身以及相关的深度知识)</strong>。当然还包括了面试经验，在面之前需要找一些中型公司来锻炼锻炼自己的表达能力，以及对问到的一些知识盲区进行一些补缺，于是面试之路开始了。</p>\n<p>记得第一家面的某快递公司，很久没有面试过了，发现面试的感觉还是有点差，被问了一些 Android 相关的基础知识，我知道那件事，但是我回忆不起来了，也讲不太出来了。理所应当挂了，不过无所谓吧，问题不大，回去之后把他问了的一些基础点再准备了看看。</p>\n<p>大概也就是第二天吧，是某买菜公司的面试，这次面试让我哭笑不得。我也本着找面经的态度来面试的，我希望他能多问点有深度的知识，然后我能知道我该去准备些什么。结果他一直不停地问我所做的项目，全程没有技术问题。大概问了我20分钟项目经历，他说：我问完了，你有什么要问的么？我一脸懵逼？？？？我（你特么）都不问点技术问题？他：我……感觉你好强啊（还有点支支吾吾的感觉）……不太敢问，怕暴露了……  不过登了很久也没有见他们约二面（难道是怕我太强了？？哈哈哈😂）。</p>\n<p>第三次面试是杭州某中厂，在经过两次面试的时间之后，我觉得我的基础知识准备还行，这一次的面试，全程问得还是比较轻松，技术深度也不是特别大，很轻松的过去了。后面相互交流时间，我问了一些他们在做什么东西，面试官倒是很热情地给我讲了一大堆，但我并不是很感兴趣，出于礼貌，还是耐心地听了下去。他问我现在的工资是怎样，我如实回答后他说：我们可能还要低些。后面又讲了他们的业务(企图用爱来发电)，不过我依然没有表现出多大的兴趣，后面也没有再约面试了吧。</p>\n<p>第四次面试我投了某能便宜买东西电商公司，这个公司算是我拿到的第一个Offer的公司，记得清楚是5.30号，因为当天下午面完，赶去苏州看国足世界杯预选赛的比赛了。一面的小哥还是很nice的，问的问题比较有深度，答得还行吧，在后面跟我讨论了起来 Flutter 的发展，聊得还是比较惬意，最后又是一道算法题（记不太清是什么题了，应该是easy难度），然后约我去现场进行下一面，也就是5.30号。去现场跟HR聊了好一会儿，才来一个看着很资深的大佬，问了我一些也不算事太难的问题，甚至感觉他没有仔细看我简历，一直看我简历，看一会儿问一会儿，最后又是一道算法题：求两个View的最近公共View，叫我直接在纸上写，那桌子太低，弯着个腰，写着太难受了，那字也写得跟个啥一样，不过他还是看懂了，后面也没有问个啥，然后就直接HRBP面了，问我期望工资，我说了一个期望，她当然会砍价，因为这时候没有其他 Offer ，她给我给得很低，然后 pua 我了一下，说什么你前两年浪费了呀，你要来的话，得赶紧过来之类的……然后没过几天就让我提交工资流水了。</p>\n<p>在后面是某手机大厂，这个厂流程也真的是一个之复杂。简历通过后，一上来就有个在线笔试，三道算法题，三个小时，三个题我应该都做出来了，难度中等吧，不过他的测试用例不知道怎么设计的，我的测试用例通过率每道题都没有超过百分之五十，可是我实在是找不到可以再加的逻辑了，忐忑的心情提交了上去。结果第二天跟我说通过了，刚好过。然后又给我发了一份职业问卷测评的链接，好嘛，点开一个看，woc 几百道题……也真的是做着累，问题也就是一些不痛不痒的问题。在做做之前，HR有给我发一份“高分教程”，大概总结一下就是你得选一些符合他们公司价值观的选项，总体的感觉就是：他们喜欢加班的人、能吃苦耐劳不计较报酬、不能有自己的个性……行吧……有的选项真的有点打击我三观，不过我还是坚持地做完了。</p>\n<p>第二天HR跟我说通过了，不过“XX值”有点偏高，到时候可能需要跟leader解释一下，我…… 然后到了第一面技术面，一上来又是一道算法题，还行吧，这道理大概完成了，后面去leetcode上面看了一下，也是个medium。不过面试官是真的很强的感觉，把我问得不要不要的，对于系统底层的问题问了很多，我甚至很佩服该厂的技术人员，怎么可以这么强？中间我有好几个问题没有答上来，但是大佬还是很耐心的给我讲解了一下，这次面试的收获也是蛮大的。</p>\n<p>后来居然先是HR面试，很神奇哟。不过这次HR面试让我很不爽很不爽，体验极差。跟HR聊着，真的是“痛不欲生”，她搁这里戴个有线耳机，只挂了一个在耳朵上（记不太清了，应该是挂的没有话筒的那一边）导致交流起来我能听到她的声音很不清楚，我得很仔细听她讲话。然而反过来呢？我在讲话的时候，她一边玩着自己的手指甲，中间时不时还有几个哈欠出来……后面聊到薪资一块，问了我期望薪资，我说了一个数（在我现在拿到了其他公司的offer之后，再看的话，真的算是一个比较低的数字了），她跟我说：你去看其他厂，除了某厂，其他不可能给你这么多的（现在看就呵呵了），然后还特别的高傲的把我pua了一顿……总之体验不太好。又过了一段时间跟我说要二轮技术面，我拒绝了。</p>\n<p>第二个Offer是曾经的XYZ的X，一面技术面居然是个姐姐，问的问题还算可以，不难，但是有一些个“坑”，我跳进去过几次，给我贴了好几段代码，让我找哪里有问题，不得不说这一波面试让我学到了很多知识点，让我对 Android 的 HandlerThread 有了更多了解。二面去的现场，去现场我还是挺感慨，这么大一块园区都是他们公司的，整个logo放大楼前面，真的是气派！在前台等了一会儿有面试官下来接待，天呐！又是一个姐姐！娘子军大作战？单独找了个会议室，跟这个面试官聊起来，感觉压力还是蛮大的，各种问我“架构设计”方面的事儿，让我画项目架构图在黑板上之类的。以及被诸多的技术灵魂拷问，总体聊了一个半小时，压力还是蛮大。后来是要他们主管过来面，我看这主管样子就是大佬样，应该有四十多岁了，有一种职场气质的技术主管。问我也是一些通用型的问题，架构、思维、方法论等，压力更多来自于他给我一种资历压迫感（我感觉我说的东西都太幼稚在他看来），因为我跟他说了我等会儿要赶飞机，所以跟他只聊了半个小时，后面的HR面也只聊了十几分钟，我就匆匆跑路了，然后第二周叫提交薪资流水。</p>\n<p>前面的面试还算是比较顺利，没有怎么失败过，我以为我能以“全胜出线”，结果现实并不是这样。再后来面了某视频网站和XYZ的Y。这两次失败是连在一起的，Y已经是最后一面的技术面，大佬面，应该问题不大了，可是，意外总是会出现。事情是这样子的，当天晚上七点约了视频网站的二面，八点是Y公司的最后一轮技术面了（只要没有什么幺蛾子事情发生，后续应该就是HR了）。当时前者公司正视频面试着，又是个女面试官，全程问了我一些问题莫名奇妙，我一开始还以为她是HR，问了我好几个非技术问题，以及一些有的得没得问题（比如：我们为什么招你？害～ 你能为我们带来什么？害～），但在七点四十多的时候收到了Y公司的电话，想立马面试，我跟他解释现在有事，并推迟到了八点之后。结果就是因为这一推，给大佬造成了不好的影响……据后来内推的同事说，很大的一部分原因就是这个。然后在面试过程中还接电话，结果两边都没有个好结果，害～ 这事儿整得，让我明白了：<strong>面试时间安排太紧凑比较危险。</strong></p>\n<p>最后拿到的两个offer，也是我最终纠结选择取哪里的offer，两个公司都比较好吧。一个在上海，一个在杭州，原本想拒绝上海这个公司的，因为杭州的公司有我诸多前同事，以及杭州相比上海而言有更好的生活舒适度，所以选择了杭州的公司，但是拒绝真的很难。上海的公司算事行业的佼佼者了，为了能更好的拒绝，我甚至写了一份“千字长文拒绝信”给对应HR，来表达我不能去其公司歉意（那内容我作为旁观者，看着都要给感动哭了），但HR也并没有回我什么（可能是见惯了这种场景），没过多久我收到了其公司的同事的关怀，但我还是对他表示拒绝的想法。又过了不久，我收到电话，貌似是之前去公司面试的时候，“我的直属leader”打过来的，向我阐述了大平台的重要，以及杭州公司的业务发展没有这边好。后来又被拉群，加入到了含有部门总监的群，他加了我微信，表示晚上要跟我谈一谈，并附言几句，大概意思翻译就是：你去杭州的不是一个明智之举，来我们这里才是最正确的选择。一下午就因为这些事“舌战群儒”，不过我很强烈地感受到了他们对人才的追求和肯定，让我感觉到：我何德何能？能让这么多陌生的人来劝我回去，让我很感动， 这或许就是大公司每个人都以人才来看待吧。</p>\n<p>此时我开始陷入了更深的纠结与迷茫：到底该怎么选？对于上海的公司体量是N个杭州公司那么大的，工作室是在做一些比较前沿的东西(视频特效渲染、移动端深度学习、音视频合成等)，很多东西我都没有接触过，要重新开始学习，会比较肝。对于杭州公司，在那里有我诸多的前同事，包括 leader 都是我之前公司的，公司位于滨江河畔，离钱塘江也不远，钱塘夜景让我久久不能忘怀。加之杭州的物价与房价都低于上海，不得不说杭州更适合生活。但做的东西比较与业务相关，需要与产品-测试等相关人员对接，相对而言所接触到的知识点没有上海这边深入。所以，我是否要去选择在上海再拼一拼呢？有那么些纠结，到底要选择相对轻松舒适的杭州，还是更有拼搏感的上海公司？最终吧，还是选择了上海，最近在读**《草莓人生》<strong>，有一句话让我又更坚定了这个选择：</strong>“其实没有一种工作是轻松的，正因为不轻松，所以才叫工作啊”**，学吧，学吧，肝吧肝吧，在上海再干几年，祝我有朝一日成大佬😂<br>昨日，已点击“接受本Offer”<br>至此，结束一段面试时光。</p>\n","cover":null,"images":[],"content":"<p>今晚已到下班时间，我又如往常一样，背着自己的包来到了楼下的会议室。不过与前些天的日子不太一样，今天我已经放下了诸多包袱，剩下的是一个轻松的自己，历经一个月的面试时光，终于可以在这会议室惬然地写下一些东西。</p>\n<p>准备面试以及参加面试都是一个高度紧张的过程，为了面试，我放弃了一些时间，也让自己每天变得很疲惫，因而有更少的精力去干一些其他事情。在六月，我还未完成一本书的阅读，时间忙碌所占去，或者那个疲惫的身体没有能静得下心来阅读一本书籍，我好希望能够有一个轻轻松松的时间，能够做自己想做的事\b。但在诸多现实面前，不得不低下头吧，好在现在收获的Offer也能对得起自己的付出，遂想记录一下这一个月来自己的面试经历。</p>\n<p>在五月初便有想跳槽的想法，原因也很简单：现在的日子太舒服，想找到一个更大的平台来提升自己。在五月下旬开始行动了起来，自己当然有想要去的厂，也通过一些相关的流程约到了面试的时间。那么接下来就是准备吧，准备的过程包括：<strong>算法(视公司而定)、基础知识(常见面试问题等)、项目(项目本身以及相关的深度知识)</strong>。当然还包括了面试经验，在面之前需要找一些中型公司来锻炼锻炼自己的表达能力，以及对问到的一些知识盲区进行一些补缺，于是面试之路开始了。</p>\n<p>记得第一家面的某快递公司，很久没有面试过了，发现面试的感觉还是有点差，被问了一些 Android 相关的基础知识，我知道那件事，但是我回忆不起来了，也讲不太出来了。理所应当挂了，不过无所谓吧，问题不大，回去之后把他问了的一些基础点再准备了看看。</p>\n<p>大概也就是第二天吧，是某买菜公司的面试，这次面试让我哭笑不得。我也本着找面经的态度来面试的，我希望他能多问点有深度的知识，然后我能知道我该去准备些什么。结果他一直不停地问我所做的项目，全程没有技术问题。大概问了我20分钟项目经历，他说：我问完了，你有什么要问的么？我一脸懵逼？？？？我（你特么）都不问点技术问题？他：我……感觉你好强啊（还有点支支吾吾的感觉）……不太敢问，怕暴露了……  不过登了很久也没有见他们约二面（难道是怕我太强了？？哈哈哈😂）。</p>\n<p>第三次面试是杭州某中厂，在经过两次面试的时间之后，我觉得我的基础知识准备还行，这一次的面试，全程问得还是比较轻松，技术深度也不是特别大，很轻松的过去了。后面相互交流时间，我问了一些他们在做什么东西，面试官倒是很热情地给我讲了一大堆，但我并不是很感兴趣，出于礼貌，还是耐心地听了下去。他问我现在的工资是怎样，我如实回答后他说：我们可能还要低些。后面又讲了他们的业务(企图用爱来发电)，不过我依然没有表现出多大的兴趣，后面也没有再约面试了吧。</p>\n<p>第四次面试我投了某能便宜买东西电商公司，这个公司算是我拿到的第一个Offer的公司，记得清楚是5.30号，因为当天下午面完，赶去苏州看国足世界杯预选赛的比赛了。一面的小哥还是很nice的，问的问题比较有深度，答得还行吧，在后面跟我讨论了起来 Flutter 的发展，聊得还是比较惬意，最后又是一道算法题（记不太清是什么题了，应该是easy难度），然后约我去现场进行下一面，也就是5.30号。去现场跟HR聊了好一会儿，才来一个看着很资深的大佬，问了我一些也不算事太难的问题，甚至感觉他没有仔细看我简历，一直看我简历，看一会儿问一会儿，最后又是一道算法题：求两个View的最近公共View，叫我直接在纸上写，那桌子太低，弯着个腰，写着太难受了，那字也写得跟个啥一样，不过他还是看懂了，后面也没有问个啥，然后就直接HRBP面了，问我期望工资，我说了一个期望，她当然会砍价，因为这时候没有其他 Offer ，她给我给得很低，然后 pua 我了一下，说什么你前两年浪费了呀，你要来的话，得赶紧过来之类的……然后没过几天就让我提交工资流水了。</p>\n<p>在后面是某手机大厂，这个厂流程也真的是一个之复杂。简历通过后，一上来就有个在线笔试，三道算法题，三个小时，三个题我应该都做出来了，难度中等吧，不过他的测试用例不知道怎么设计的，我的测试用例通过率每道题都没有超过百分之五十，可是我实在是找不到可以再加的逻辑了，忐忑的心情提交了上去。结果第二天跟我说通过了，刚好过。然后又给我发了一份职业问卷测评的链接，好嘛，点开一个看，woc 几百道题……也真的是做着累，问题也就是一些不痛不痒的问题。在做做之前，HR有给我发一份“高分教程”，大概总结一下就是你得选一些符合他们公司价值观的选项，总体的感觉就是：他们喜欢加班的人、能吃苦耐劳不计较报酬、不能有自己的个性……行吧……有的选项真的有点打击我三观，不过我还是坚持地做完了。</p>\n<p>第二天HR跟我说通过了，不过“XX值”有点偏高，到时候可能需要跟leader解释一下，我…… 然后到了第一面技术面，一上来又是一道算法题，还行吧，这道理大概完成了，后面去leetcode上面看了一下，也是个medium。不过面试官是真的很强的感觉，把我问得不要不要的，对于系统底层的问题问了很多，我甚至很佩服该厂的技术人员，怎么可以这么强？中间我有好几个问题没有答上来，但是大佬还是很耐心的给我讲解了一下，这次面试的收获也是蛮大的。</p>\n<p>后来居然先是HR面试，很神奇哟。不过这次HR面试让我很不爽很不爽，体验极差。跟HR聊着，真的是“痛不欲生”，她搁这里戴个有线耳机，只挂了一个在耳朵上（记不太清了，应该是挂的没有话筒的那一边）导致交流起来我能听到她的声音很不清楚，我得很仔细听她讲话。然而反过来呢？我在讲话的时候，她一边玩着自己的手指甲，中间时不时还有几个哈欠出来……后面聊到薪资一块，问了我期望薪资，我说了一个数（在我现在拿到了其他公司的offer之后，再看的话，真的算是一个比较低的数字了），她跟我说：你去看其他厂，除了某厂，其他不可能给你这么多的（现在看就呵呵了），然后还特别的高傲的把我pua了一顿……总之体验不太好。又过了一段时间跟我说要二轮技术面，我拒绝了。</p>\n<p>第二个Offer是曾经的XYZ的X，一面技术面居然是个姐姐，问的问题还算可以，不难，但是有一些个“坑”，我跳进去过几次，给我贴了好几段代码，让我找哪里有问题，不得不说这一波面试让我学到了很多知识点，让我对 Android 的 HandlerThread 有了更多了解。二面去的现场，去现场我还是挺感慨，这么大一块园区都是他们公司的，整个logo放大楼前面，真的是气派！在前台等了一会儿有面试官下来接待，天呐！又是一个姐姐！娘子军大作战？单独找了个会议室，跟这个面试官聊起来，感觉压力还是蛮大的，各种问我“架构设计”方面的事儿，让我画项目架构图在黑板上之类的。以及被诸多的技术灵魂拷问，总体聊了一个半小时，压力还是蛮大。后来是要他们主管过来面，我看这主管样子就是大佬样，应该有四十多岁了，有一种职场气质的技术主管。问我也是一些通用型的问题，架构、思维、方法论等，压力更多来自于他给我一种资历压迫感（我感觉我说的东西都太幼稚在他看来），因为我跟他说了我等会儿要赶飞机，所以跟他只聊了半个小时，后面的HR面也只聊了十几分钟，我就匆匆跑路了，然后第二周叫提交薪资流水。</p>\n<p>前面的面试还算是比较顺利，没有怎么失败过，我以为我能以“全胜出线”，结果现实并不是这样。再后来面了某视频网站和XYZ的Y。这两次失败是连在一起的，Y已经是最后一面的技术面，大佬面，应该问题不大了，可是，意外总是会出现。事情是这样子的，当天晚上七点约了视频网站的二面，八点是Y公司的最后一轮技术面了（只要没有什么幺蛾子事情发生，后续应该就是HR了）。当时前者公司正视频面试着，又是个女面试官，全程问了我一些问题莫名奇妙，我一开始还以为她是HR，问了我好几个非技术问题，以及一些有的得没得问题（比如：我们为什么招你？害～ 你能为我们带来什么？害～），但在七点四十多的时候收到了Y公司的电话，想立马面试，我跟他解释现在有事，并推迟到了八点之后。结果就是因为这一推，给大佬造成了不好的影响……据后来内推的同事说，很大的一部分原因就是这个。然后在面试过程中还接电话，结果两边都没有个好结果，害～ 这事儿整得，让我明白了：<strong>面试时间安排太紧凑比较危险。</strong></p>\n<p>最后拿到的两个offer，也是我最终纠结选择取哪里的offer，两个公司都比较好吧。一个在上海，一个在杭州，原本想拒绝上海这个公司的，因为杭州的公司有我诸多前同事，以及杭州相比上海而言有更好的生活舒适度，所以选择了杭州的公司，但是拒绝真的很难。上海的公司算事行业的佼佼者了，为了能更好的拒绝，我甚至写了一份“千字长文拒绝信”给对应HR，来表达我不能去其公司歉意（那内容我作为旁观者，看着都要给感动哭了），但HR也并没有回我什么（可能是见惯了这种场景），没过多久我收到了其公司的同事的关怀，但我还是对他表示拒绝的想法。又过了不久，我收到电话，貌似是之前去公司面试的时候，“我的直属leader”打过来的，向我阐述了大平台的重要，以及杭州公司的业务发展没有这边好。后来又被拉群，加入到了含有部门总监的群，他加了我微信，表示晚上要跟我谈一谈，并附言几句，大概意思翻译就是：你去杭州的不是一个明智之举，来我们这里才是最正确的选择。一下午就因为这些事“舌战群儒”，不过我很强烈地感受到了他们对人才的追求和肯定，让我感觉到：我何德何能？能让这么多陌生的人来劝我回去，让我很感动， 这或许就是大公司每个人都以人才来看待吧。</p>\n<p>此时我开始陷入了更深的纠结与迷茫：到底该怎么选？对于上海的公司体量是N个杭州公司那么大的，工作室是在做一些比较前沿的东西(视频特效渲染、移动端深度学习、音视频合成等)，很多东西我都没有接触过，要重新开始学习，会比较肝。对于杭州公司，在那里有我诸多的前同事，包括 leader 都是我之前公司的，公司位于滨江河畔，离钱塘江也不远，钱塘夜景让我久久不能忘怀。加之杭州的物价与房价都低于上海，不得不说杭州更适合生活。但做的东西比较与业务相关，需要与产品-测试等相关人员对接，相对而言所接触到的知识点没有上海这边深入。所以，我是否要去选择在上海再拼一拼呢？有那么些纠结，到底要选择相对轻松舒适的杭州，还是更有拼搏感的上海公司？最终吧，还是选择了上海，最近在读**《草莓人生》<strong>，有一句话让我又更坚定了这个选择：</strong>“其实没有一种工作是轻松的，正因为不轻松，所以才叫工作啊”**，学吧，学吧，肝吧肝吧，在上海再干几年，祝我有朝一日成大佬😂<br>昨日，已点击“接受本Offer”<br>至此，结束一段面试时光。</p>\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"面试","slug":"面试","api":"api/tags/面试.json"}],"api":"api/posts/2021/07/06/记一段-Android-面试时光.json"},{"title":"95后，毕业半年，你过得好吗？","slug":"95后的你们毕业半年过得还好么？","date":"2019-05-20T01:42:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2019/05/20/95后的你们毕业半年过得还好么？/","excerpt":"<p>原帖：<a href=\"https://www.zhihu.com/question/307640916/answer/686748493\">https://www.zhihu.com/question/307640916/answer/686748493</a><br>95后，毕业半年，你过得好吗？<br>亲爱的95后，毕业两年，你过得怎么样了？充实或是空虚，甜蜜还是苦涩，热爱生活还是生无可恋，期待写下你的故事。</p>\n<p>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧：<br>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧。</p>\n<p>在这里我好想讲讲近一年的实习生活，过得日子也算是充满酸甜苦辣吧。从刚开始从公司实习开始讲吧：当时的我好像什么都会，php也会、python、java、安卓啥都会一样，经过被阿里面试打击后，可以看此帖子：<a href=\"https://www.zhihu.com/question/268713348/answer/352195054\">https://www.zhihu.com/question/268713348/answer/352195054</a></p>\n<p>我稍微收敛了一点了吧，最后进入了杭州一家互联网公司，刚开始是干php的，干了一个多月一点，感觉并没有学到多少东西，做的业务比较多，因为我属于“实习”的状态吧，安排的任务也比较少，所以每天的日子过得也很“悠闲”，每天干完就回家了，大概下午六点多就走了……这前面的php实习期间算是伏笔吧。之后由于刚好公司内部有个安卓实习的位置，好像是没有招到合适的吧，最开始面试的时候说了我什么都会，所以有幸被调到了安卓组里面。我发现好像每天的需求做起来还是那么简单，所以每天依然走得特别早吧，还有点沾沾自喜的样子，然而回到家并没有继续学习相关知识，要不就和女朋友（ broken up.）漫步钱塘江边，要么就是回到家里写写字看看其他类型的书，反正过得很舒服吧。</p>\n<p>直到有一天我被“伤自尊”了，一度自我感觉良好的我被组内的同事叫去看一个问题，我看了很久也看不出来，因为很多Java基础我都有些快忘了吧，基础不太扎实，我对代码的深度理解也有问题，我只停留在用的阶段，我不懂其原理，我只会使用，我连他们的源码都没有看过。</p>\n<p>后来被他鞭策道：你现在确实很厉害，比我当时刚出大学的时候厉害多了，但是我觉得我一点比你做的好，那就是我一直坚持在学习。你每天回去那么早没有学习，你在做什么？你现在对你自己的定位有些问题，现在你虽然觉得这些需求能做，但是你知道这些需求都是最简单的，工作难度都是最低的，我们为什么不把那些高难的任务给你？是因为你现在能力还不够，现在给你简单任务就是想让你多一些时间去学习，让你尽早能够跟上团队的步伐。实话给你说：你很菜！你真的很菜……你师傅可能不太好给你讲所以我才给你讲这些，如果你现在的状态，你永远只能做那些最简单的任务，可能连之后的校招offer都拿不到，就算侥幸8月份能拿到校招offer，也许你之后能侥幸转正，但是你不坚持学习的话迟早会被行业淘汰……</p>\n<p>这位前辈的话一直在我脑海里面印象深刻，我是一个不服输的人，在被鞭策后，我真的不服气，我也不认输，当时他叫我周末会去看一看”EventBus”的源码，然后周一向他汇报一下看的结果。周末连续两天都在看其源码，说实话看起来真的很痛苦，因为自己以前都是直接用，不会去关心它内部的逻辑，但是依然坚持看了两天，做了很多笔记，把它内部实现逻辑也搞明白了。忐忑不安地等到了周一，我向他汇报，我给他讲述了内部原理以及源码解读，他给我提了几个问题，我答上了一半多一点，我正沾沾自喜时，他给我说：如果给你这次评价满分一百分的话，我最多给你打20分。</p>\n<p>**！！！！20分，我的天！**我当时一下子整个人就不好了，甚至都想去反驳他了，可是他之后给我讲得东西，让我打消了这个念头，我确实菜。我确实认识到了自己的不足，对源代码的解读真的还不够，Java基础也不太扎实，包括我的师傅也这样认为，我是一个不服输的人，不服气。我向我师傅请教了，大概给自己定了一个短期的学习计划：先把Java基础过一遍，再过一遍Android基础过一把，再开始去理解安卓深度的东西。从此开始，我感觉我开始暴走了。</p>\n<p>我每天都背一两本书回去学习，在地铁上有时候位置空我也会拿出来继续学习，偶尔还是会找女朋友去玩，但是当我11点钟回到家，我还是会拿出书来继续学习。然后第二天我会和我的师傅讲我昨天学了什么，然后讲出我的疑问。我的师傅真的是一个很耐心的人，他会给我仔细地讲解，包括平时的问题，如果我向组内请教问：1+1等于几？ 他们会告诉我等于2。然而我的师傅会告诉我 加法口诀表，甚至是乘法口诀表。那时候我每天都不曾忘记学习，每天都会去研究，那一段时间我真的压力很大，经常性的失眠，心跳特别快，后面也去看过一次医生说是“心悸”。当然那也是在压力下人做出的一些极端反应，所幸的是我坚持了过来。八月中，HR把我叫了过去，我还以为她又要批判我了，因为最开始被团队的人给鞭策了之后，她也找过我谈话了：你如果还继续现在的状态，可能之后的校招offer都不会发给你。这一次不一样了，她给我讲了我转正后的待遇，什么期权还要公积金啥啥啥的，然后讲了工资多少多少，其实工资是有点超乎我预期的。她讲完之后，我真的笑了，真的开心了，我忍不住笑了起来。她问：开心吗？我一直点头。或许这是对努力之后最好的回报吧！那一刻真的，心里有太多说不出来，打心地的开心。</p>\n<p>拿到校招offer我还是坚持学习吧，只是强度没有之前那样强了，但是依然坚持每天要学习。现在我觉得每天每周过得生活都特别的充实吧，我们不是996。公司9点上班，弹性打卡9个小时，也就是说早上9点钟打卡，下午6点钟就可以走了，但是大部分人并不是6点钟走。现在自己每天早上都会比较期盼去公司，因为每次做需求，我都并不把他当做我的“工作”在做，而我认为那是我的兴趣爱好。我喜欢敲代码的感觉，我喜欢那种自己去设计思路想法，最后打磨出来产品的过程。而我们做出的成果会是被几百万用户所使用，肩上也有一种责任感吧。然后也带来了成就感，比如公司的宣传片或者展示公告大牌上面印着app的应用界面图，会看到里面有一部分是我做得，我是多么的开心呀。一次室友的朋友过来了，我们聊着天，后来聊到它妈妈也在用我们做得app，它给我说它妈妈怎么怎么这个App，我说啊，这里就是我做的呀。哇！厉害咯。我对工作保持乐观态度，因为我可以向厉害的前辈们请教问题，向他们学习，我每天都感觉自己有收获，所以在公司让我感觉过得很开心，没有太大的压力，每天都在进步。</p>\n<p>当然回到家了，我也有该做的事，我也有我的兴趣，大概每天7.30左右下班回家，回到家快8.30了。我也有自己追求，我在学日语，打算能在明年去一趟日本，感受一下不同的文化。日语学累了，我会继续学习相关专业的书籍，或者写写字，我比较喜欢写字，虽然没有很飘逸炫酷，但是我觉得写完之后看起来特别的舒服，这也算是一种成就感把，大概学到10.30收拾洗漱，大概11点左右上床了，我会继续看一些相关的书籍，比如最近在看《红楼梦》，厚厚的一本，渐渐地书签也跑到了中间的位置吧。</p>\n<p>至于周末，我可能比较放松吧，周末我会学着去做做菜，不再想吃外卖了，真的难吃且贵。</p>\n<p>有时候也会去绿城主场看看绿城踢球吧，虽然心里支持的四川队，但是远在他乡没有办法了。</p>\n<p>最后附上自己毕业答辩后拍的照片，算是对自己充实的大学生活的怀念吧。</p>\n<p>总之，我觉得自己每天都过得很充实吧，很热爱自己的生活。</p>\n<h2 id=\"愿每一个你们的生活都过得幸福。\"><a href=\"#愿每一个你们的生活都过得幸福。\" class=\"headerlink\" title=\"愿每一个你们的生活都过得幸福。\"></a>愿每一个你们的生活都过得幸福。</h2>","cover":null,"images":[],"content":"<p>原帖：<a href=\"https://www.zhihu.com/question/307640916/answer/686748493\">https://www.zhihu.com/question/307640916/answer/686748493</a><br>95后，毕业半年，你过得好吗？<br>亲爱的95后，毕业两年，你过得怎么样了？充实或是空虚，甜蜜还是苦涩，热爱生活还是生无可恋，期待写下你的故事。</p>\n<p>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧：<br>96年 刚参加完学校的毕业答辩回来，离毕业也不远了吧。从去年暑假开始就在杭州实习了，最开始是做php后端，后来转到了安卓开发。实习了差不多快一年了，就要成“资深实习生”了。说实话我感觉我过得很充实吧，依然热爱生活。实习期间租房+伙食费+路费，如果不干别的什么事，一个月请假天数在两三天的话，每个月的生活是过得还算是比较舒服的，不太愁。实习之后就第一个月问家里要了一下房租和押金，以及驾校的学费。可以说完全独立了吧。拿到公司的offer是10几k，还是蛮期待拿毕业证转正的时候吧。</p>\n<p>在这里我好想讲讲近一年的实习生活，过得日子也算是充满酸甜苦辣吧。从刚开始从公司实习开始讲吧：当时的我好像什么都会，php也会、python、java、安卓啥都会一样，经过被阿里面试打击后，可以看此帖子：<a href=\"https://www.zhihu.com/question/268713348/answer/352195054\">https://www.zhihu.com/question/268713348/answer/352195054</a></p>\n<p>我稍微收敛了一点了吧，最后进入了杭州一家互联网公司，刚开始是干php的，干了一个多月一点，感觉并没有学到多少东西，做的业务比较多，因为我属于“实习”的状态吧，安排的任务也比较少，所以每天的日子过得也很“悠闲”，每天干完就回家了，大概下午六点多就走了……这前面的php实习期间算是伏笔吧。之后由于刚好公司内部有个安卓实习的位置，好像是没有招到合适的吧，最开始面试的时候说了我什么都会，所以有幸被调到了安卓组里面。我发现好像每天的需求做起来还是那么简单，所以每天依然走得特别早吧，还有点沾沾自喜的样子，然而回到家并没有继续学习相关知识，要不就和女朋友（ broken up.）漫步钱塘江边，要么就是回到家里写写字看看其他类型的书，反正过得很舒服吧。</p>\n<p>直到有一天我被“伤自尊”了，一度自我感觉良好的我被组内的同事叫去看一个问题，我看了很久也看不出来，因为很多Java基础我都有些快忘了吧，基础不太扎实，我对代码的深度理解也有问题，我只停留在用的阶段，我不懂其原理，我只会使用，我连他们的源码都没有看过。</p>\n<p>后来被他鞭策道：你现在确实很厉害，比我当时刚出大学的时候厉害多了，但是我觉得我一点比你做的好，那就是我一直坚持在学习。你每天回去那么早没有学习，你在做什么？你现在对你自己的定位有些问题，现在你虽然觉得这些需求能做，但是你知道这些需求都是最简单的，工作难度都是最低的，我们为什么不把那些高难的任务给你？是因为你现在能力还不够，现在给你简单任务就是想让你多一些时间去学习，让你尽早能够跟上团队的步伐。实话给你说：你很菜！你真的很菜……你师傅可能不太好给你讲所以我才给你讲这些，如果你现在的状态，你永远只能做那些最简单的任务，可能连之后的校招offer都拿不到，就算侥幸8月份能拿到校招offer，也许你之后能侥幸转正，但是你不坚持学习的话迟早会被行业淘汰……</p>\n<p>这位前辈的话一直在我脑海里面印象深刻，我是一个不服输的人，在被鞭策后，我真的不服气，我也不认输，当时他叫我周末会去看一看”EventBus”的源码，然后周一向他汇报一下看的结果。周末连续两天都在看其源码，说实话看起来真的很痛苦，因为自己以前都是直接用，不会去关心它内部的逻辑，但是依然坚持看了两天，做了很多笔记，把它内部实现逻辑也搞明白了。忐忑不安地等到了周一，我向他汇报，我给他讲述了内部原理以及源码解读，他给我提了几个问题，我答上了一半多一点，我正沾沾自喜时，他给我说：如果给你这次评价满分一百分的话，我最多给你打20分。</p>\n<p>**！！！！20分，我的天！**我当时一下子整个人就不好了，甚至都想去反驳他了，可是他之后给我讲得东西，让我打消了这个念头，我确实菜。我确实认识到了自己的不足，对源代码的解读真的还不够，Java基础也不太扎实，包括我的师傅也这样认为，我是一个不服输的人，不服气。我向我师傅请教了，大概给自己定了一个短期的学习计划：先把Java基础过一遍，再过一遍Android基础过一把，再开始去理解安卓深度的东西。从此开始，我感觉我开始暴走了。</p>\n<p>我每天都背一两本书回去学习，在地铁上有时候位置空我也会拿出来继续学习，偶尔还是会找女朋友去玩，但是当我11点钟回到家，我还是会拿出书来继续学习。然后第二天我会和我的师傅讲我昨天学了什么，然后讲出我的疑问。我的师傅真的是一个很耐心的人，他会给我仔细地讲解，包括平时的问题，如果我向组内请教问：1+1等于几？ 他们会告诉我等于2。然而我的师傅会告诉我 加法口诀表，甚至是乘法口诀表。那时候我每天都不曾忘记学习，每天都会去研究，那一段时间我真的压力很大，经常性的失眠，心跳特别快，后面也去看过一次医生说是“心悸”。当然那也是在压力下人做出的一些极端反应，所幸的是我坚持了过来。八月中，HR把我叫了过去，我还以为她又要批判我了，因为最开始被团队的人给鞭策了之后，她也找过我谈话了：你如果还继续现在的状态，可能之后的校招offer都不会发给你。这一次不一样了，她给我讲了我转正后的待遇，什么期权还要公积金啥啥啥的，然后讲了工资多少多少，其实工资是有点超乎我预期的。她讲完之后，我真的笑了，真的开心了，我忍不住笑了起来。她问：开心吗？我一直点头。或许这是对努力之后最好的回报吧！那一刻真的，心里有太多说不出来，打心地的开心。</p>\n<p>拿到校招offer我还是坚持学习吧，只是强度没有之前那样强了，但是依然坚持每天要学习。现在我觉得每天每周过得生活都特别的充实吧，我们不是996。公司9点上班，弹性打卡9个小时，也就是说早上9点钟打卡，下午6点钟就可以走了，但是大部分人并不是6点钟走。现在自己每天早上都会比较期盼去公司，因为每次做需求，我都并不把他当做我的“工作”在做，而我认为那是我的兴趣爱好。我喜欢敲代码的感觉，我喜欢那种自己去设计思路想法，最后打磨出来产品的过程。而我们做出的成果会是被几百万用户所使用，肩上也有一种责任感吧。然后也带来了成就感，比如公司的宣传片或者展示公告大牌上面印着app的应用界面图，会看到里面有一部分是我做得，我是多么的开心呀。一次室友的朋友过来了，我们聊着天，后来聊到它妈妈也在用我们做得app，它给我说它妈妈怎么怎么这个App，我说啊，这里就是我做的呀。哇！厉害咯。我对工作保持乐观态度，因为我可以向厉害的前辈们请教问题，向他们学习，我每天都感觉自己有收获，所以在公司让我感觉过得很开心，没有太大的压力，每天都在进步。</p>\n<p>当然回到家了，我也有该做的事，我也有我的兴趣，大概每天7.30左右下班回家，回到家快8.30了。我也有自己追求，我在学日语，打算能在明年去一趟日本，感受一下不同的文化。日语学累了，我会继续学习相关专业的书籍，或者写写字，我比较喜欢写字，虽然没有很飘逸炫酷，但是我觉得写完之后看起来特别的舒服，这也算是一种成就感把，大概学到10.30收拾洗漱，大概11点左右上床了，我会继续看一些相关的书籍，比如最近在看《红楼梦》，厚厚的一本，渐渐地书签也跑到了中间的位置吧。</p>\n<p>至于周末，我可能比较放松吧，周末我会学着去做做菜，不再想吃外卖了，真的难吃且贵。</p>\n<p>有时候也会去绿城主场看看绿城踢球吧，虽然心里支持的四川队，但是远在他乡没有办法了。</p>\n<p>最后附上自己毕业答辩后拍的照片，算是对自己充实的大学生活的怀念吧。</p>\n<p>总之，我觉得自己每天都过得很充实吧，很热爱自己的生活。</p>\n<h2 id=\"愿每一个你们的生活都过得幸福。\"><a href=\"#愿每一个你们的生活都过得幸福。\" class=\"headerlink\" title=\"愿每一个你们的生活都过得幸福。\"></a>愿每一个你们的生活都过得幸福。</h2>","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"知乎","slug":"zhihu","api":"api/tags/zhihu.json"}],"api":"api/posts/2019/05/20/95后的你们毕业半年过得还好么？.json"},{"title":"MacOs  JAVA调用R语言环境配置","slug":"MacOs-JAVA调用R语言配置","date":"2017-08-07T02:44:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2017/08/07/MacOs-JAVA调用R语言配置/","excerpt":"<p>最近接收一个项目做R语言的接口调用，网上做java调用R语言的大多是关于windows系统的，今天给大家介绍一下mac系统下如何配置调用R语言</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>首先下载三个必须要的文件：JRI JRIEngine REngine<br>添加依赖</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_1.png\">\n<p>配置VM option和Enviroment</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_2.png\">\n\n<p>其中VM option为你的rJava的jri的路径：</p>\n<p>这里一定要写“-Djava.library.path＝XX”<br>我的参数为：-Djava.library.path＝&#x2F;Library&#x2F;Frameworks&#x2F;R.framework&#x2F;Versions&#x2F;3.4&#x2F;Resources&#x2F;library&#x2F;rJava&#x2F;jri<br>Enviroment为R_HOME的路径<br>我的环境变量为：R_HOME＝&#x2F;Library&#x2F;Frameworks&#x2F;R.framework&#x2F;Resources</p>\n<p>最后写个例子调用测试是否成功</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_3.png\">\n","cover":null,"images":["https://cdn.julis.wang/blog/img/java_r_1.png","https://cdn.julis.wang/blog/img/java_r_2.png","https://cdn.julis.wang/blog/img/java_r_3.png"],"content":"<p>最近接收一个项目做R语言的接口调用，网上做java调用R语言的大多是关于windows系统的，今天给大家介绍一下mac系统下如何配置调用R语言</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>首先下载三个必须要的文件：JRI JRIEngine REngine<br>添加依赖</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_1.png\">\n<p>配置VM option和Enviroment</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_2.png\">\n\n<p>其中VM option为你的rJava的jri的路径：</p>\n<p>这里一定要写“-Djava.library.path＝XX”<br>我的参数为：-Djava.library.path＝&#x2F;Library&#x2F;Frameworks&#x2F;R.framework&#x2F;Versions&#x2F;3.4&#x2F;Resources&#x2F;library&#x2F;rJava&#x2F;jri<br>Enviroment为R_HOME的路径<br>我的环境变量为：R_HOME＝&#x2F;Library&#x2F;Frameworks&#x2F;R.framework&#x2F;Resources</p>\n<p>最后写个例子调用测试是否成功</p>\n<img src=\"https://cdn.julis.wang/blog/img/java_r_3.png\">\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[],"api":"api/posts/2017/08/07/MacOs-JAVA调用R语言配置.json"},{"title":"黑客可以厉害到什么程度？","slug":"黑客可以厉害到什么程度？","date":"2017-05-20T02:00:00.000Z","updated":"2025-05-20T11:46:57.000Z","comments":true,"url":"2017/05/20/黑客可以厉害到什么程度？/","excerpt":"<p>原帖发布于知乎:<a href=\"https://www.zhihu.com/question/264331588/answer/281676126\">《黑客可以厉害到什么程度？》</a></p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>一个黑客很厉害，那一群黑客呢？<br>这里给大家讲下一个组织–中国红客联盟。<br>接下来给大家讲一下中国红客联盟的几次重大事件</p>\n<h3 id=\"第一次：-1998-年-5-月反击印尼网络\"><a href=\"#第一次：-1998-年-5-月反击印尼网络\" class=\"headerlink\" title=\"第一次： 1998 年 5 月反击印尼网络\"></a>第一次： 1998 年 5 月反击印尼网络</h3><p>原因：印度尼西亚发生动乱。在此期间，大批华人受到迫害，华人妇女遭到令人发指的强暴。<br><img src=\"https://pic2.zhimg.com/50/v2-daf1909a2585da271aba22845ca967e2_b.jpg\"></p>\n<p>1998 年 5 月，印度尼西亚发生动乱。在此期间，大批华人受到迫害，华人妇女遭到令人发指的强暴。至 7 、 8 月，事件真相才通过互联网陆续透漏出来。在国内新闻媒体不报道此事的情况下，中国网民通过互联网陆续获得了相关信息。 8 月初，全球华人社会形成抗议高潮， 8 月 7 日 ，世界各地华人更同步举行抗议示威。印尼暴徒的行为激怒了刚刚学会蹒跚走步的中国黑客们，他们不约而同聚集在聊天室（ IRC ）中，讨论并决定对向印尼网站攻击。这是中国黑客的第一次对外群体性攻击行动，其表现出的团结与协调成为今后类似攻击行动的典范。<br>8 月 7 日 ， ChinaByte 责任编辑在网站论坛中发现一个新帖。这一“帖子”声称中国黑客袭击了印尼站点，同时附上了尚未恢复原貌的站点网址。编辑印证后当即决定立即在每日发送给订户的新闻邮件中，首次增发“号外”。“号外”中只有简单两句话及一个网址，但包含了这一新闻事件的核心信息。全文为：“你的站点已被来自中国的‘黑客’所‘黑’，印尼的暴徒你们的暴行是会有报应的！！！（中文）’‘停止屠杀华人！！！’（英文）这是印尼一个‘ to kobudi.co.id ’的站点上日前出现的文字。这一站点目前被中国黑客小组所‘黑’。<br>这一“号外”几分钟里就发送到数万订户的邮箱中。 8 月 10 日 ， ChinaByte 更将相关新闻上了主页头条。标题赫然为：印尼排华暴行激怒中国黑客。副题为：网上怒潮连天起。<br>实际上，早在 8月7日之前，中国黑客已对印尼网站和电子邮箱展开攻击行动。他们通过破解密码而拥有了系统管理员的权利，将“苦难的同胞，我为你悲愤哭泣！”、“严惩暴徒！严惩凶手！血债血还！”等口号写在了印尼网站的首页上。他们同时还提供大量印尼重要部门的电子信箱，并向网友提供如何“轰炸”这些电子信箱的方法。 8 月 17 日 是印尼国庆日，这一天众多印尼网站再次遭到黑客的攻击，被黑网站首页都留有黑客们用不太连贯的英文以及中文声讨印尼排华暴行的词句。其中一名署名“ Warning From Chinese ”的黑客，在被黑的页面上留言道，他这样做只是提醒人们不要忘记５月间发生的惨案，此举并不会造成该 网站数据的丢失，但警告系统管理员必须将被黑页面保留 48 小时。这名黑客显然是为了让大家记住那场持续了 48 小时的排华暴乱。<br>中国黑客的攻击引起印尼政府强烈的反应，他们将中国民间黑客的行为指责为中国政府的怂恿，并指出是中国谋求地区霸权的强烈信号。据当时“美国之音” 8 月 9 日 报道，印尼一名政府官员今日抗议“中国黑客”的“暴行”，据他说在 8 月 7 日 以来，印尼至少有十余个互联网站，被自称“中国黑客”的组织摧毁，少数被贴上各种恐怖的图片，大部分被彻底破坏。另外 8 月 7 日 几乎所有的印尼政府公用邮箱均遭到了邮件炸弹的疯狂轰炸。该官员竟说：“我们希望中国人保持理智，因为前一阶段的事情是我们自己的事情！如果中国人不想分清华人和中国人的区别，那就说明中国是一个充满威胁的国家，中国不能把有华人的地方都看作他的领土。五十年代中国派来了军舰，我们可以理解，因为他们接走的是自己国家的人，今天中国黑客来了，我们迷惑，因为他们对我们自己的事情横加干涉。谁都知道，没有中国政府的授意，中国妇联是不会抗议的，中国政府不仅干涉我们的内政，而且挑唆国内黑客对我们的攻击。我们十分不满！” 8 月 11 日 ，印尼政府电子技术主管官员就中国黑客行为再度发言。他说：“虽然黑客攻击给印尼造成了很大的损失，但他表示对民间的激愤他表示理解。但，印尼的问题是否象宣传的那样严重，大可不必听信过于危言耸听的报道。印尼政府会把自己的问题处理好。在被问及黑客攻击的损失时，他说有上百个个网站被攻击，其中十几个被侵入，大部分遭到破坏，有黑客试图攻击金融系统，造成了一定损失。另外 8 月 7 日 当天，印尼的网络异常拥挤，当天的政府邮件系统几乎瘫痪，给印尼的正常社会秩序造成了一定影响。但这位发言人话题一转，再次耸人听闻地说道：“完全有把握说，中国的大量 ISP 凭借带宽的优势对我们进行了长达 30 个小时的邮件轰炸，我们很难说这不是有组织的行动。如果不是防空警报没响，我一定以为中国对我们宣战了。不过，谁的网络都有漏洞，任何民族都有黑客，我们不希望这是两个伟大民族仇恨的开端。我过去不相信中国威胁，现在我知道了不该听信中国政府口头上的什么政策，仅仅是他的十亿公民在政府偷偷怂恿下发泄一下不满，就是一种可怕的力量。”他最后说：“我敢打赌，黑客事件仅仅是中国人对他们地区称霸的一个信号，当他们踏上我们的国土，开始说三道四时，大家就会觉得‘中国威胁’多么贴切，东盟的朋友，应该首先记住！”</p>\n<h3 id=\"第二次：-1999-年-5-月反击美国网络\"><a href=\"#第二次：-1999-年-5-月反击美国网络\" class=\"headerlink\" title=\"第二次： 1999 年 5 月反击美国网络\"></a>第二次： 1999 年 5 月反击美国网络</h3><p>原因：以美国为首的北约空军用导弹袭击中国驻南联盟大使馆并造成三名中国记者死亡。<br><img src=\"https://pic4.zhimg.com/50/v2-82c3f8ed78a139607b074b4a64c4aa65_b.jpg\"></p>\n<p><img src=\"https://pic4.zhimg.com/50/v2-38ed004dec1e8439de7bcf35ff86c9ff_b.jpg\"></p>\n<p>1998年的牛刀小试为1999年的第一次中美黑客大战埋下伏笔。1999年美军误炸中国驻南使馆后，一大批网民开始思考要行动起来，大量只懂简单电脑知识的网民自学了一点黑客常识后便参与到了黑客大战中来(他们被蔑称为脚本小孩)，中国的人海战术正式形成。<br>1999年5月8日，以美国为首的北约悍然用5枚导弹袭击了我驻南斯拉夫联盟共和国大使馆，记者邵云环、许杏虎、朱颖遇难，另有20多人受伤。消息传来，国人震惊。<br>5月8日，“红客”们首次黑掉了美国驻华使馆的网页；<br>5月8日晚11点左右，“红客”们又成功突破白宫的防线，更改了白宫的主页；<br>5月10日，中国网民自发地在同一时间内向北约网站发出ping指令，北约服务器（<a href=\"http://www.nato.org)过载,一度瘫痪./\">http://www.nato.org）过载，一度瘫痪。</a><br>5.10日夜间，上述中国黑客网站攻击了<a href=\"http://www.capweb.net,一个美国国会的相关站点,并且用大约5分钟时间在上面公布了国外将近250个站点的密码,导致国外将近800多个站点被换上了全都自称是“中国黑客”的主页.到了北京时间12日白天,这些站点全部关闭./\">www.capweb.net，一个美国国会的相关站点，并且用大约5分钟时间在上面公布了国外将近250个站点的密码,导致国外将近800多个站点被换上了全都自称是“中国黑客”的主页。到了北京时间12日白天，这些站点全部关闭。</a><br>5月11日，成功侵入美国海军计算机与通讯华盛顿中心网站（<a href=\"http://www.nctsw.navy.mil).这是黑客攻击以来首次攻击美国军方站点./\">www.nctsw.navy.mil）。这是黑客攻击以来首次攻击美国军方站点。</a><br>5月17日，中国黑客紧急会议中心网站发出号召先致力于国内网络安全的改善，并着手为为国内大站义诊，以防止国外黑客对我国门户网站的攻击。<br>中国红客联盟、中国鹰派联盟、中国黑客联盟三大黑客组织成为这场中美黑客大战的主力军。一时间，红盟的lion、鹰派的万涛成为中国黑客英雄。<br>前者宣扬红客精神，给自己起了个独特的名字——“红客”(Honker)，希望以政治立场的正义性来证实自己攻击行为的合法性。<br>以文化或者爱国的名义，在1999年前后，一大批脚本小孩挑战黑客的进入门槛。那个时候，黑客技术就像今天的blog一样流行，中国城市街头的书摊上，到处可见匆忙印刷出来的黑客入门，五花八门的黑客杂志匆匆出炉。中国的网民听到关于黑客的传说，也许就是在这个时候。<br>1999年5月，即美国轰炸中国驻南联盟大使馆事件发生以后，当时中国的红客们袭击了美国的一些政府网站，包括能源部、内政部在内，这些网站的首页上一度高高飘扬着五星红旗。有一次大规模的攻击，还致使白宫的网站失灵三天。中国黑客攻击事件成了当时美国各大报纸的头条新闻</p>\n<h3 id=\"第三次：-1999-年-8-月反击台湾网络\"><a href=\"#第三次：-1999-年-8-月反击台湾网络\" class=\"headerlink\" title=\"第三次： 1999 年 8 月反击台湾网络\"></a>第三次： 1999 年 8 月反击台湾网络</h3><p>原因：1999 年 7 月 9 日 ， 李登辉在接受“德国之声”专访时，所提出了所谓“两国论”。</p>\n<p>1999 年 7 月 9 日 ，李登辉在接受“德国之声”专访时，所提出了所谓“两国论”。公然宣称，台湾当局将两岸关系定位在“国家与国家，至少是特殊的国与国的关系”。台湾当局有关负责人也随声附和，说两岸关系已从“两个对等政治实体”走到“两个国家”，两岸会谈就是“国与国的会谈”等等。台湾当局这些分裂祖国的言论将他们一贯蓄意分裂中国领土和主权、制造“两个中国”、“一中一台”、“台湾独立”的意图暴露无遗。“两国论”顿时导致两岸局势紧张。大陆黑客依靠刚刚对美网络攻击战中总结出的经验，从 8 月 7 日 开始攻击台湾十多个政府网站，台湾黑客随即于 8 月 8 日 展开反击，大陆黑客贴“世界上只有一个中国，世界只需要一个中国”，台湾黑客贴“台湾是中国永远分割的一部分”、“你们敢打，我们敢独；大陆黑客贴五星红旗，台湾黑客贴青天白日旗，一时间“山雨欲来风满楼”。香港、台湾报刊纷纷以“两岸黑客狂掀网络战”、“网络大战方兴未艾”、“网络开战：免不了的一场战争”为题，大肆进行报道：“台海两岸军队尚在隔海威吓，按兵观望，民间却已经先行拉开电脑资讯大战的序幕，双方电脑黑客互相攻击对方网站并张贴政治口号，展现实力。”<br>在大陆黑客的攻击中，台湾“行政院”、“国安局”、“新闻局”、“监察院”、“国民大会”等网站均被攻克。台湾方面指，仅对“国安局”的攻击 3 天内就达 7200 次。大陆黑客除删改网页外，还给许多台湾服务器安装了木马程序，导致不少网站服务器长时间瘫痪。值得一提的是，此次安装的木马程序由美国的 BO 首次改为了大陆黑客自己研发的“冰河”与 NetSpy ，而“木马冰河”也成了大陆黑客最为钟爱的木马程序。 8 月 11 日 ，台湾“国民大会”网站报警称，网站软、硬件疑遭黑客攻击造成严重毁损，即使是重灌系统也无法恢复。而警方对黑客仅利用软件就可破坏硬件，大感惊讶。在台湾黑客的第一波的反击下，铁道部、中国证监会、陕西科技信息网、浙江平阳国税局网站等篡改网页。随着两岸黑客对攻战规模的发展，大量的非政府网站开始被殃及。参与者非理性的成分越来越大，只要是“黑”下一个对方网站，就被视为胜利战果。这种情况是出于政治目的而实施的黑客攻击最普遍的现象，已超出少数真正意义上的黑客的行径。一直到八月底，两岸的黑客战才暂告一段。后来，台湾黑客扬言要在 十月一日 当天大举进攻大陆网站，而大陆黑客则针锋相对地表示，如果这样，将在是 十月十日 坚决反击。<br>中国大陆黑客与台湾黑客的互攻是一场“持久战”，但凡碰到刺激事件就会引发攻击。如 2000 年 3 月 18 日 台湾“大选”结束陈水扁上台的当晚，一些大陆黑客当即进行攻击行动。以下是名叫“天语”的一名黑客的自白：“本人天语，浙江人氏，现外出打工，月薪 800 元人民币，虽不穷困也不不富有，刚好穿暖吃饱，平民 - 草民 - 贱民一个，连正规的高中都还尚未读过！此次对台湾的几个站点页面修改纯属发自一时气愤！要分裂我中国，我想每一个中国人对这个观点上的态度和我都该是一样的！尔等现正对我中国站点进攻，昨天竟还有一个“可爱的”所谓的“黑客”竟对我的个人电脑挂带的 HTTPD 产生了兴趣。呵呵。。其 IP 来自 140.123.107.78 。在此想也不用本人来说尔等对我方的进攻之密集！本人现警告之！本人原已停止对台主机的破解，但听闻尔等竟然反攻，并破坏我国几个站点。本人忍耐有限，于昨晚进入尔等国防部的主机。本打算来个 deltree&#x2F;y c:\\ 但想此举必将引起黑客大战！顾及大家皆无利可图，本人最后退出 TELNET 进程并关闭端口，可能也顺手关了 80 端口 , （纯属水平太差！：））现公布屏捕图！望尔等也能息事宁人！！”正是这名“天语”和其他黑客攻陷了台湾“国防部”等多个网站。<br>2004 年台湾“大选”后，台湾情治部门透露， 3 · 20 “大选”刚结束不久，大陆黑客竟突破重重防火墙，侵入“总统府”和“国安会”内部网络系统，窃取并下载机密文件。近年来，台湾媒体屡屡报道“大陆网军入侵台湾”。两岸长期僵持的局面，决定了两岸黑客互相攻击的长期态势。 </p>\n<h3 id=\"第四次：-2000-年-1-2月反击日本网络\"><a href=\"#第四次：-2000-年-1-2月反击日本网络\" class=\"headerlink\" title=\"第四次： 2000 年 1~2月反击日本网络\"></a>第四次： 2000 年 1~2月反击日本网络</h3><p>原因：2000 年 1 月 21 日 ，日本最高法院无视历史事实，悍然判决参加过当年南京大屠杀的老兵东史郎见证大屠杀的诉讼败诉；<br><img src=\"https://pic4.zhimg.com/50/v2-98ac6f61ace587cce6ec8d608e978288_b.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/50/v2-1954ec631342a0fe874cc29ad1bfded4_b.jpg\"></p>\n<p>由于日本厚颜否认南京大屠杀这一历史事实，从2000年1月24日下午，中国“红客”再次集体出击，先后有多个日本官方站点被入侵。1月24日5时45分日本科技厅网站被袭，主页上用英文写有“日本人是丧家之犬”，并与美国杂志《花花公子》链接，25日再次被攻入。<br>2000年年初，零星骚扰演变为一场争夺网站控制权的黑客战，有人称之为互联网上的“新抗日战争”。当年1月21日，日本最高法院驳回因揭露南京大屠杀而被告损害他人名誉的东史郎等人的上诉，并对其判处50万日元的罚款。两天后，日本右翼势力在大阪国际和平中心举行“二十世纪最大谎言——南京大屠杀彻底验证”集会，公然否认南京大屠杀的史实。<br>这两次事件直接引发了中国黑客对日本网站的大规模攻击，被替换的日本网页上，出现了“不肯正视历史真相的日本人是亚洲之耻”等抨击和谩骂的文字。<br>这次攻击中，一个自称“中国极右翼抗日联盟”的黑客组织最为抢眼。1月24日至2月13日，该组织对30多家日本政府机构及新闻网站发动攻击，包括科学技术厅、总务厅、每日新闻社、NHK等。<br>该组织还在网站上发布《致日本政府的公开信》，称其成员是“一切具有强烈爱国心的中国网虫”，宗旨是“对日本少数疯狗在网络里进行猛烈的打击”，并公布了300多个日本政府部门的网址、100多名日本议员的电子邮箱地址，以及十多种黑客攻击工具和网站攻击方法的说明。</p>\n<p>再补充一下：同年九月中国黑客进攻日本反动网站，纪念“九.一八”<br>2000年9月18日是一个特殊的日子，历史上的今天，是中华民族蒙受耻辱，永远无法忘却的日子。“九.一八”是国耻、国痛，但也是沈阳人、中国人的光荣，因为从这一天起一直到抗日战争的胜利，东北人民、中国人民同日本军国主义进行了不屈不挠的斗争。<br>就在这样一个特殊的日子里，中国的黑客再一次以自己的方式纪念“9.18”事变。昨晚19时31分，Chinaren新闻中心接到网友报料说有中国黑客于2000年9月18日下午19时30分左右成功地对日本的右翼反动网站<a href=\"http://www.since918.com.jp进行了攻击.向日本右翼表达了他们愤怒的声音./\">www.since918.com.jp进行了攻击。向日本右翼表达了他们愤怒的声音。</a><br>受到攻击的这个网站是臭名昭著的日本右翼反动派的大站点。该站点一直在狡辩和否认“9.18”事件，为日本军国主义招魂。此次中国黑客是使用DDOS方式黑掉了该网站，将整个信道堵住，从而无法登陆该网站。这是中国黑客为捍卫中国尊严，不忘“9.18”事件付诸的又一强有力的行动。此次攻击导致该网站系统瘫痪。所以无法访问到该主页。</p>\n<h3 id=\"第五次：-2001-年反击日本网络\"><a href=\"#第五次：-2001-年反击日本网络\" class=\"headerlink\" title=\"第五次： 2001 年反击日本网络\"></a>第五次： 2001 年反击日本网络</h3><p>原因：2001年前后，跨入新的世纪后之后，三菱车事件、日航事件、教科书事件、《台湾论》事件，令两国关系持续紧张，黑客攻击也趋于频繁。</p>\n<p>据日本政府官员称，2000年日本共发生63起以政治为目的的黑客攻击事件，而2001年，前五个月已发生650起。日本警方曾通过国际刑警机构向中国索取资料，以协助调查。<br>2001年8月13日，日本首相小泉纯一郎参拜靖国神社，中国黑客再次发动猛烈攻势。当日下午4时，日本气象厅网站服务器首先遭到攻击，主页被更改为带有英文字母和中文文字的页面。紧随其后，日本消防厅、防卫设施厅、通讯研究实验室，以及日本议员等网站相继沦陷，被贴上抗议文字及中国国旗。<br>在小泉参拜靖国神社后， 8 月的攻击波来得更为猛烈。中国的黑客在获悉新闻后，即刻采取行动，更换了部分日本政府站点的主页内容，以示抗议。中国黑客组织在声明中表示：小泉参拜靖国神社的举动严重伤害了亚洲各国人民尤其是中国人民的感情，加之此前的教科书事件等，令他们非常愤怒，为此，决定用攻击日本政府网站的方式，表达他们的强烈不满。其实，中国红客大联盟早已讨论，一旦 8 月 15 日 小泉参拜，将对日本网络采取何种攻击行动，没想到小泉提早参拜，因此红客大联盟成员也提前行动。<br>8 月 13 日 当天下午 4 时许，日本气象厅网站服务器首先受到中国黑客的攻击，其后，日本物质评估研究机构、日本战略物质研究中心、日本防御系统研究会、日本情报大会服务中心、日本消防厅、日本防卫设施厅、日本通讯研究实验室、日本议员网站等大批政府站点也受到攻击。 8 月 14 日 凌晨，红客大联盟发出了《对日本采取网络打击的声明》，内中写道：“日本首相小泉不顾全亚洲人民的抗议和日本国内祈求和平的声音，于昨日下午公然参拜了象征日本军国主义的靖国神社。日本领导人的这一错误举动严重地伤害了亚洲各国人民，尤其是受害最深的中国人民的感受。加之教科书事件等斑斑劣迹更是体现出日本当局对当年的错误毫无悔改之意。红客大联盟在得到此消息的的第一时间便召集了部分成员对此突发事件商讨对策。最终决定在我国政府还没有对日本提出抗议之前用我们所擅长的，表达我们网络时代青年一群对日本新政府的严正抗议和日本领导人的强烈不满。红客大联盟 (<a href=\"http://www.redhacker.org/\">www.RedHacker.org</a>) 在此次紧急行动中对以下的日本政府站点进行了主页替换。这和我们致力于推行的红客精神并不矛盾。红客大联盟对此件事情的发生表示遗憾，并将对以下所列举的受到的攻击的站点负责。历史不容忽视，事实岂能篡改，反击方能赢尊重，发展才是硬道理！” </p>\n<h3 id=\"第六次：-2001-年-4-月-5月反击-美国网络\"><a href=\"#第六次：-2001-年-4-月-5月反击-美国网络\" class=\"headerlink\" title=\"第六次： 2001 年 4 月~5月反击 美国网络\"></a>第六次： 2001 年 4 月~5月反击 美国网络</h3><p>原因：2001 年 4 月 1 日 ，美国军用侦察机将中国战机撞毁，导致飞行员王伟坠海死亡。</p>\n<p><img src=\"https://pic4.zhimg.com/50/v2-375b10c9ed9e68ea664523e6952c62df_b.jpg\"></p>\n<p>2001 年 4 月 1 日 ，美国军用侦察机将中国战机撞毁，导致飞行员王伟坠海死亡。这一事件在中国国内引起民众极大的愤慨，而在中美之间立刻造成布什新政府与中国关系紧张的局面。尽管 4 月 11 日 ，中国方面已同意美方机组人员先行返国，但事件尚未得到完全解决，两国间的气氛依旧剑拔弩张。从 4 月初开始，中美两国的黑客已经展开相互攻击。如美国黑客组织 poizonB0x 便是攻击中国网站的主力，而一个名为 pr0phet 的黑客则更是明确地说：“我一开始只是随机挑选一些网站作为攻击目标，不过现在我则主要攻击以 .edu.cn 和 ac.cn 结尾的网站，或者只是以 .cn 结尾的网站，都会成为我的攻击目标。”在这种气氛和情况下（ 5 月 8 日 又逢中国驻南使馆被炸两周年），中国黑客在 4 月 30 日 至 5 月 8 日 打响了大规模的“第六次卫国网络战”。对于这次中美黑客大战的“战绩”，不同媒体的报道有很大出入，据“中国红客联盟”负责人称，真正被攻破的美国网站到 5 月 7 日 为止有 1600 多个，其中主要的网站 ( 包括政府和军方的网站 ) 有 900 多个。而中国被攻破的网站有 1100 多个，主要网站有 600 多个。实际上，任何一次黑客战争既不可能事先公开“宣战”，更不可能有“终战”的截止日期。<br>这次中美黑客大战有以下特点：</p>\n<p>1 、中国黑客的攻击事出有因<br>在中国黑客的这次行动中，“中国红客网络安全技术联盟”（简称“中国红客联盟”， HUC ）是最瞩目的攻击主力，它使“红客”这一称谓再次叫响。其负责人 Lion 在 2000 年 12 月 1 日 就提出建议：“统一“红客”一词的英文名称（ honker ）。“红客”一词若能在英文中占有一席之地，这将具有非同寻常的意义！这样红客在世界范围内的交流与应用将变得更加方便；更重要的是，这样做能扩大影响力，增强凝聚力，促进红客文化的形成和进一步的发展！”也就是说中国黑客试图通过“红客”名称的确认，来赋予自己在一种特定情况下所作所为的正面形象。中国黑客涂改美国网页尽管也有以谩骂方式来泄愤，但主流是中国国旗、中国国歌和“伟大的中华民族万岁！”、“美国必须对撞机事件负完全责任”、“抗议美国向台湾出售武器，破坏世界和平！”等口号，实践着“维护祖国统一、捍卫国家主权、一致抵抗外辱、打击反华气焰”的行动宗旨。<br>2 、中国黑客的攻击具有群体规模<br>“中国红客联盟”、“中华黑客联盟”和“中国鹰派联盟”是攻击美国网站的主力，由于以往通过各种形式奠定的组织基础，因此得以在这次攻击行动中发挥群体力量，并带动了一大批临时参战的“菜鸟”（即技术生疏的新手）。如 4 月 30 日晚 7 点 ，“中国红客联盟”召开了“攻击美国网络动员大会”，并提供了更换美国网页的专用数据包；再如 5 月 4 日晚 ，中国黑客集中力量攻击白宫网站，据称参与人数有 8 万之众，事后白宫网站的新闻负责人吉米承认“大量数据同时涌入，堵塞了白宫与其互联网服务提供商的连接通道”。中国黑客万众一心的行动并且其间的出色协调，使得美国方面怀疑这次中国政府如果说没有背后支持，至少也是默许的。加拿大军事评论家、汉和情报评论高级分析员平可夫在香港《亚洲周刊》（第 19 期， 5 月 13 日 ）撰文称此次中国黑客的攻击为一场“新人民战争”，而这场战争的主体往往是可以称为“信息战网络战民兵”的庞大群体，武器是计算机、杀伤性火力构成是知识和技能，战场便是信息网络。<br>3 、中国黑客群体由年轻人组成<br>据媒体报道，“中国鹰派联盟”负责人老鹰今年 30 岁，而“中国红客联盟”负责人 lion 今年仅 21 岁，该组织发言人 bkbll 也年仅 21 岁，是在校大学生，其专业还不是计算机。 Bkbll 称“中国红客联盟”成员的平均年龄并不是媒体报道的 23 岁，而是更年轻，同时注册成员的 65% 是在校大学生。中国互联网信息中心（ CNNIC ）历次调查显示， 30 岁以下的青少年占全体网民的绝大多数。如最近一次调查显示（截止日期为 2000 年 12 月 31 日 ）， 8 个年龄段中， 18 至 24 岁占 41.18% ， 25 至 30 岁占 18.8% ， 18 岁以下占 14.93% ，也就是说， 18 至 30 岁年龄段的用户占到 2250 万总体的 75% 。今年中国网络用户预计将突破 3500 万， 2005 年将达到 2 亿，占全体国民的 15% 。从发展看，如此规模巨大的中国青年网络用户群体的网络行为，今后不论是对内还是对外，都将产生更大的效应。</p>\n<p>完～～<br>注：本文大部分内容来自  中国社会科学院新闻与传播研究所网络与数字传媒研究室主任闵大洪在博客中国于2005年02月12日 所发表的<a href=\"http://mdh.blogchina.com/64775.html\" title=\"《告别中国黑客的激情年代——写在“中国红客联盟”解散之际》\">《告别中国黑客的激情年代——写在“中国红客联盟”解散之际》</a>一文，本文中如有错误，欢迎指证。<br>推荐阅读：</p>\n","cover":null,"images":["https://pic2.zhimg.com/50/v2-daf1909a2585da271aba22845ca967e2_b.jpg","https://pic4.zhimg.com/50/v2-82c3f8ed78a139607b074b4a64c4aa65_b.jpg","https://pic4.zhimg.com/50/v2-38ed004dec1e8439de7bcf35ff86c9ff_b.jpg","https://pic4.zhimg.com/50/v2-98ac6f61ace587cce6ec8d608e978288_b.jpg","https://pic2.zhimg.com/50/v2-1954ec631342a0fe874cc29ad1bfded4_b.jpg","https://pic4.zhimg.com/50/v2-375b10c9ed9e68ea664523e6952c62df_b.jpg"],"content":"<p>原帖发布于知乎:<a href=\"https://www.zhihu.com/question/264331588/answer/281676126\">《黑客可以厉害到什么程度？》</a></p>\n<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h2><p>一个黑客很厉害，那一群黑客呢？<br>这里给大家讲下一个组织–中国红客联盟。<br>接下来给大家讲一下中国红客联盟的几次重大事件</p>\n<h3 id=\"第一次：-1998-年-5-月反击印尼网络\"><a href=\"#第一次：-1998-年-5-月反击印尼网络\" class=\"headerlink\" title=\"第一次： 1998 年 5 月反击印尼网络\"></a>第一次： 1998 年 5 月反击印尼网络</h3><p>原因：印度尼西亚发生动乱。在此期间，大批华人受到迫害，华人妇女遭到令人发指的强暴。<br><img src=\"https://pic2.zhimg.com/50/v2-daf1909a2585da271aba22845ca967e2_b.jpg\"></p>\n<p>1998 年 5 月，印度尼西亚发生动乱。在此期间，大批华人受到迫害，华人妇女遭到令人发指的强暴。至 7 、 8 月，事件真相才通过互联网陆续透漏出来。在国内新闻媒体不报道此事的情况下，中国网民通过互联网陆续获得了相关信息。 8 月初，全球华人社会形成抗议高潮， 8 月 7 日 ，世界各地华人更同步举行抗议示威。印尼暴徒的行为激怒了刚刚学会蹒跚走步的中国黑客们，他们不约而同聚集在聊天室（ IRC ）中，讨论并决定对向印尼网站攻击。这是中国黑客的第一次对外群体性攻击行动，其表现出的团结与协调成为今后类似攻击行动的典范。<br>8 月 7 日 ， ChinaByte 责任编辑在网站论坛中发现一个新帖。这一“帖子”声称中国黑客袭击了印尼站点，同时附上了尚未恢复原貌的站点网址。编辑印证后当即决定立即在每日发送给订户的新闻邮件中，首次增发“号外”。“号外”中只有简单两句话及一个网址，但包含了这一新闻事件的核心信息。全文为：“你的站点已被来自中国的‘黑客’所‘黑’，印尼的暴徒你们的暴行是会有报应的！！！（中文）’‘停止屠杀华人！！！’（英文）这是印尼一个‘ to kobudi.co.id ’的站点上日前出现的文字。这一站点目前被中国黑客小组所‘黑’。<br>这一“号外”几分钟里就发送到数万订户的邮箱中。 8 月 10 日 ， ChinaByte 更将相关新闻上了主页头条。标题赫然为：印尼排华暴行激怒中国黑客。副题为：网上怒潮连天起。<br>实际上，早在 8月7日之前，中国黑客已对印尼网站和电子邮箱展开攻击行动。他们通过破解密码而拥有了系统管理员的权利，将“苦难的同胞，我为你悲愤哭泣！”、“严惩暴徒！严惩凶手！血债血还！”等口号写在了印尼网站的首页上。他们同时还提供大量印尼重要部门的电子信箱，并向网友提供如何“轰炸”这些电子信箱的方法。 8 月 17 日 是印尼国庆日，这一天众多印尼网站再次遭到黑客的攻击，被黑网站首页都留有黑客们用不太连贯的英文以及中文声讨印尼排华暴行的词句。其中一名署名“ Warning From Chinese ”的黑客，在被黑的页面上留言道，他这样做只是提醒人们不要忘记５月间发生的惨案，此举并不会造成该 网站数据的丢失，但警告系统管理员必须将被黑页面保留 48 小时。这名黑客显然是为了让大家记住那场持续了 48 小时的排华暴乱。<br>中国黑客的攻击引起印尼政府强烈的反应，他们将中国民间黑客的行为指责为中国政府的怂恿，并指出是中国谋求地区霸权的强烈信号。据当时“美国之音” 8 月 9 日 报道，印尼一名政府官员今日抗议“中国黑客”的“暴行”，据他说在 8 月 7 日 以来，印尼至少有十余个互联网站，被自称“中国黑客”的组织摧毁，少数被贴上各种恐怖的图片，大部分被彻底破坏。另外 8 月 7 日 几乎所有的印尼政府公用邮箱均遭到了邮件炸弹的疯狂轰炸。该官员竟说：“我们希望中国人保持理智，因为前一阶段的事情是我们自己的事情！如果中国人不想分清华人和中国人的区别，那就说明中国是一个充满威胁的国家，中国不能把有华人的地方都看作他的领土。五十年代中国派来了军舰，我们可以理解，因为他们接走的是自己国家的人，今天中国黑客来了，我们迷惑，因为他们对我们自己的事情横加干涉。谁都知道，没有中国政府的授意，中国妇联是不会抗议的，中国政府不仅干涉我们的内政，而且挑唆国内黑客对我们的攻击。我们十分不满！” 8 月 11 日 ，印尼政府电子技术主管官员就中国黑客行为再度发言。他说：“虽然黑客攻击给印尼造成了很大的损失，但他表示对民间的激愤他表示理解。但，印尼的问题是否象宣传的那样严重，大可不必听信过于危言耸听的报道。印尼政府会把自己的问题处理好。在被问及黑客攻击的损失时，他说有上百个个网站被攻击，其中十几个被侵入，大部分遭到破坏，有黑客试图攻击金融系统，造成了一定损失。另外 8 月 7 日 当天，印尼的网络异常拥挤，当天的政府邮件系统几乎瘫痪，给印尼的正常社会秩序造成了一定影响。但这位发言人话题一转，再次耸人听闻地说道：“完全有把握说，中国的大量 ISP 凭借带宽的优势对我们进行了长达 30 个小时的邮件轰炸，我们很难说这不是有组织的行动。如果不是防空警报没响，我一定以为中国对我们宣战了。不过，谁的网络都有漏洞，任何民族都有黑客，我们不希望这是两个伟大民族仇恨的开端。我过去不相信中国威胁，现在我知道了不该听信中国政府口头上的什么政策，仅仅是他的十亿公民在政府偷偷怂恿下发泄一下不满，就是一种可怕的力量。”他最后说：“我敢打赌，黑客事件仅仅是中国人对他们地区称霸的一个信号，当他们踏上我们的国土，开始说三道四时，大家就会觉得‘中国威胁’多么贴切，东盟的朋友，应该首先记住！”</p>\n<h3 id=\"第二次：-1999-年-5-月反击美国网络\"><a href=\"#第二次：-1999-年-5-月反击美国网络\" class=\"headerlink\" title=\"第二次： 1999 年 5 月反击美国网络\"></a>第二次： 1999 年 5 月反击美国网络</h3><p>原因：以美国为首的北约空军用导弹袭击中国驻南联盟大使馆并造成三名中国记者死亡。<br><img src=\"https://pic4.zhimg.com/50/v2-82c3f8ed78a139607b074b4a64c4aa65_b.jpg\"></p>\n<p><img src=\"https://pic4.zhimg.com/50/v2-38ed004dec1e8439de7bcf35ff86c9ff_b.jpg\"></p>\n<p>1998年的牛刀小试为1999年的第一次中美黑客大战埋下伏笔。1999年美军误炸中国驻南使馆后，一大批网民开始思考要行动起来，大量只懂简单电脑知识的网民自学了一点黑客常识后便参与到了黑客大战中来(他们被蔑称为脚本小孩)，中国的人海战术正式形成。<br>1999年5月8日，以美国为首的北约悍然用5枚导弹袭击了我驻南斯拉夫联盟共和国大使馆，记者邵云环、许杏虎、朱颖遇难，另有20多人受伤。消息传来，国人震惊。<br>5月8日，“红客”们首次黑掉了美国驻华使馆的网页；<br>5月8日晚11点左右，“红客”们又成功突破白宫的防线，更改了白宫的主页；<br>5月10日，中国网民自发地在同一时间内向北约网站发出ping指令，北约服务器（<a href=\"http://www.nato.org)过载,一度瘫痪./\">http://www.nato.org）过载，一度瘫痪。</a><br>5.10日夜间，上述中国黑客网站攻击了<a href=\"http://www.capweb.net,一个美国国会的相关站点,并且用大约5分钟时间在上面公布了国外将近250个站点的密码,导致国外将近800多个站点被换上了全都自称是“中国黑客”的主页.到了北京时间12日白天,这些站点全部关闭./\">www.capweb.net，一个美国国会的相关站点，并且用大约5分钟时间在上面公布了国外将近250个站点的密码,导致国外将近800多个站点被换上了全都自称是“中国黑客”的主页。到了北京时间12日白天，这些站点全部关闭。</a><br>5月11日，成功侵入美国海军计算机与通讯华盛顿中心网站（<a href=\"http://www.nctsw.navy.mil).这是黑客攻击以来首次攻击美国军方站点./\">www.nctsw.navy.mil）。这是黑客攻击以来首次攻击美国军方站点。</a><br>5月17日，中国黑客紧急会议中心网站发出号召先致力于国内网络安全的改善，并着手为为国内大站义诊，以防止国外黑客对我国门户网站的攻击。<br>中国红客联盟、中国鹰派联盟、中国黑客联盟三大黑客组织成为这场中美黑客大战的主力军。一时间，红盟的lion、鹰派的万涛成为中国黑客英雄。<br>前者宣扬红客精神，给自己起了个独特的名字——“红客”(Honker)，希望以政治立场的正义性来证实自己攻击行为的合法性。<br>以文化或者爱国的名义，在1999年前后，一大批脚本小孩挑战黑客的进入门槛。那个时候，黑客技术就像今天的blog一样流行，中国城市街头的书摊上，到处可见匆忙印刷出来的黑客入门，五花八门的黑客杂志匆匆出炉。中国的网民听到关于黑客的传说，也许就是在这个时候。<br>1999年5月，即美国轰炸中国驻南联盟大使馆事件发生以后，当时中国的红客们袭击了美国的一些政府网站，包括能源部、内政部在内，这些网站的首页上一度高高飘扬着五星红旗。有一次大规模的攻击，还致使白宫的网站失灵三天。中国黑客攻击事件成了当时美国各大报纸的头条新闻</p>\n<h3 id=\"第三次：-1999-年-8-月反击台湾网络\"><a href=\"#第三次：-1999-年-8-月反击台湾网络\" class=\"headerlink\" title=\"第三次： 1999 年 8 月反击台湾网络\"></a>第三次： 1999 年 8 月反击台湾网络</h3><p>原因：1999 年 7 月 9 日 ， 李登辉在接受“德国之声”专访时，所提出了所谓“两国论”。</p>\n<p>1999 年 7 月 9 日 ，李登辉在接受“德国之声”专访时，所提出了所谓“两国论”。公然宣称，台湾当局将两岸关系定位在“国家与国家，至少是特殊的国与国的关系”。台湾当局有关负责人也随声附和，说两岸关系已从“两个对等政治实体”走到“两个国家”，两岸会谈就是“国与国的会谈”等等。台湾当局这些分裂祖国的言论将他们一贯蓄意分裂中国领土和主权、制造“两个中国”、“一中一台”、“台湾独立”的意图暴露无遗。“两国论”顿时导致两岸局势紧张。大陆黑客依靠刚刚对美网络攻击战中总结出的经验，从 8 月 7 日 开始攻击台湾十多个政府网站，台湾黑客随即于 8 月 8 日 展开反击，大陆黑客贴“世界上只有一个中国，世界只需要一个中国”，台湾黑客贴“台湾是中国永远分割的一部分”、“你们敢打，我们敢独；大陆黑客贴五星红旗，台湾黑客贴青天白日旗，一时间“山雨欲来风满楼”。香港、台湾报刊纷纷以“两岸黑客狂掀网络战”、“网络大战方兴未艾”、“网络开战：免不了的一场战争”为题，大肆进行报道：“台海两岸军队尚在隔海威吓，按兵观望，民间却已经先行拉开电脑资讯大战的序幕，双方电脑黑客互相攻击对方网站并张贴政治口号，展现实力。”<br>在大陆黑客的攻击中，台湾“行政院”、“国安局”、“新闻局”、“监察院”、“国民大会”等网站均被攻克。台湾方面指，仅对“国安局”的攻击 3 天内就达 7200 次。大陆黑客除删改网页外，还给许多台湾服务器安装了木马程序，导致不少网站服务器长时间瘫痪。值得一提的是，此次安装的木马程序由美国的 BO 首次改为了大陆黑客自己研发的“冰河”与 NetSpy ，而“木马冰河”也成了大陆黑客最为钟爱的木马程序。 8 月 11 日 ，台湾“国民大会”网站报警称，网站软、硬件疑遭黑客攻击造成严重毁损，即使是重灌系统也无法恢复。而警方对黑客仅利用软件就可破坏硬件，大感惊讶。在台湾黑客的第一波的反击下，铁道部、中国证监会、陕西科技信息网、浙江平阳国税局网站等篡改网页。随着两岸黑客对攻战规模的发展，大量的非政府网站开始被殃及。参与者非理性的成分越来越大，只要是“黑”下一个对方网站，就被视为胜利战果。这种情况是出于政治目的而实施的黑客攻击最普遍的现象，已超出少数真正意义上的黑客的行径。一直到八月底，两岸的黑客战才暂告一段。后来，台湾黑客扬言要在 十月一日 当天大举进攻大陆网站，而大陆黑客则针锋相对地表示，如果这样，将在是 十月十日 坚决反击。<br>中国大陆黑客与台湾黑客的互攻是一场“持久战”，但凡碰到刺激事件就会引发攻击。如 2000 年 3 月 18 日 台湾“大选”结束陈水扁上台的当晚，一些大陆黑客当即进行攻击行动。以下是名叫“天语”的一名黑客的自白：“本人天语，浙江人氏，现外出打工，月薪 800 元人民币，虽不穷困也不不富有，刚好穿暖吃饱，平民 - 草民 - 贱民一个，连正规的高中都还尚未读过！此次对台湾的几个站点页面修改纯属发自一时气愤！要分裂我中国，我想每一个中国人对这个观点上的态度和我都该是一样的！尔等现正对我中国站点进攻，昨天竟还有一个“可爱的”所谓的“黑客”竟对我的个人电脑挂带的 HTTPD 产生了兴趣。呵呵。。其 IP 来自 140.123.107.78 。在此想也不用本人来说尔等对我方的进攻之密集！本人现警告之！本人原已停止对台主机的破解，但听闻尔等竟然反攻，并破坏我国几个站点。本人忍耐有限，于昨晚进入尔等国防部的主机。本打算来个 deltree&#x2F;y c:\\ 但想此举必将引起黑客大战！顾及大家皆无利可图，本人最后退出 TELNET 进程并关闭端口，可能也顺手关了 80 端口 , （纯属水平太差！：））现公布屏捕图！望尔等也能息事宁人！！”正是这名“天语”和其他黑客攻陷了台湾“国防部”等多个网站。<br>2004 年台湾“大选”后，台湾情治部门透露， 3 · 20 “大选”刚结束不久，大陆黑客竟突破重重防火墙，侵入“总统府”和“国安会”内部网络系统，窃取并下载机密文件。近年来，台湾媒体屡屡报道“大陆网军入侵台湾”。两岸长期僵持的局面，决定了两岸黑客互相攻击的长期态势。 </p>\n<h3 id=\"第四次：-2000-年-1-2月反击日本网络\"><a href=\"#第四次：-2000-年-1-2月反击日本网络\" class=\"headerlink\" title=\"第四次： 2000 年 1~2月反击日本网络\"></a>第四次： 2000 年 1~2月反击日本网络</h3><p>原因：2000 年 1 月 21 日 ，日本最高法院无视历史事实，悍然判决参加过当年南京大屠杀的老兵东史郎见证大屠杀的诉讼败诉；<br><img src=\"https://pic4.zhimg.com/50/v2-98ac6f61ace587cce6ec8d608e978288_b.jpg\"></p>\n<p><img src=\"https://pic2.zhimg.com/50/v2-1954ec631342a0fe874cc29ad1bfded4_b.jpg\"></p>\n<p>由于日本厚颜否认南京大屠杀这一历史事实，从2000年1月24日下午，中国“红客”再次集体出击，先后有多个日本官方站点被入侵。1月24日5时45分日本科技厅网站被袭，主页上用英文写有“日本人是丧家之犬”，并与美国杂志《花花公子》链接，25日再次被攻入。<br>2000年年初，零星骚扰演变为一场争夺网站控制权的黑客战，有人称之为互联网上的“新抗日战争”。当年1月21日，日本最高法院驳回因揭露南京大屠杀而被告损害他人名誉的东史郎等人的上诉，并对其判处50万日元的罚款。两天后，日本右翼势力在大阪国际和平中心举行“二十世纪最大谎言——南京大屠杀彻底验证”集会，公然否认南京大屠杀的史实。<br>这两次事件直接引发了中国黑客对日本网站的大规模攻击，被替换的日本网页上，出现了“不肯正视历史真相的日本人是亚洲之耻”等抨击和谩骂的文字。<br>这次攻击中，一个自称“中国极右翼抗日联盟”的黑客组织最为抢眼。1月24日至2月13日，该组织对30多家日本政府机构及新闻网站发动攻击，包括科学技术厅、总务厅、每日新闻社、NHK等。<br>该组织还在网站上发布《致日本政府的公开信》，称其成员是“一切具有强烈爱国心的中国网虫”，宗旨是“对日本少数疯狗在网络里进行猛烈的打击”，并公布了300多个日本政府部门的网址、100多名日本议员的电子邮箱地址，以及十多种黑客攻击工具和网站攻击方法的说明。</p>\n<p>再补充一下：同年九月中国黑客进攻日本反动网站，纪念“九.一八”<br>2000年9月18日是一个特殊的日子，历史上的今天，是中华民族蒙受耻辱，永远无法忘却的日子。“九.一八”是国耻、国痛，但也是沈阳人、中国人的光荣，因为从这一天起一直到抗日战争的胜利，东北人民、中国人民同日本军国主义进行了不屈不挠的斗争。<br>就在这样一个特殊的日子里，中国的黑客再一次以自己的方式纪念“9.18”事变。昨晚19时31分，Chinaren新闻中心接到网友报料说有中国黑客于2000年9月18日下午19时30分左右成功地对日本的右翼反动网站<a href=\"http://www.since918.com.jp进行了攻击.向日本右翼表达了他们愤怒的声音./\">www.since918.com.jp进行了攻击。向日本右翼表达了他们愤怒的声音。</a><br>受到攻击的这个网站是臭名昭著的日本右翼反动派的大站点。该站点一直在狡辩和否认“9.18”事件，为日本军国主义招魂。此次中国黑客是使用DDOS方式黑掉了该网站，将整个信道堵住，从而无法登陆该网站。这是中国黑客为捍卫中国尊严，不忘“9.18”事件付诸的又一强有力的行动。此次攻击导致该网站系统瘫痪。所以无法访问到该主页。</p>\n<h3 id=\"第五次：-2001-年反击日本网络\"><a href=\"#第五次：-2001-年反击日本网络\" class=\"headerlink\" title=\"第五次： 2001 年反击日本网络\"></a>第五次： 2001 年反击日本网络</h3><p>原因：2001年前后，跨入新的世纪后之后，三菱车事件、日航事件、教科书事件、《台湾论》事件，令两国关系持续紧张，黑客攻击也趋于频繁。</p>\n<p>据日本政府官员称，2000年日本共发生63起以政治为目的的黑客攻击事件，而2001年，前五个月已发生650起。日本警方曾通过国际刑警机构向中国索取资料，以协助调查。<br>2001年8月13日，日本首相小泉纯一郎参拜靖国神社，中国黑客再次发动猛烈攻势。当日下午4时，日本气象厅网站服务器首先遭到攻击，主页被更改为带有英文字母和中文文字的页面。紧随其后，日本消防厅、防卫设施厅、通讯研究实验室，以及日本议员等网站相继沦陷，被贴上抗议文字及中国国旗。<br>在小泉参拜靖国神社后， 8 月的攻击波来得更为猛烈。中国的黑客在获悉新闻后，即刻采取行动，更换了部分日本政府站点的主页内容，以示抗议。中国黑客组织在声明中表示：小泉参拜靖国神社的举动严重伤害了亚洲各国人民尤其是中国人民的感情，加之此前的教科书事件等，令他们非常愤怒，为此，决定用攻击日本政府网站的方式，表达他们的强烈不满。其实，中国红客大联盟早已讨论，一旦 8 月 15 日 小泉参拜，将对日本网络采取何种攻击行动，没想到小泉提早参拜，因此红客大联盟成员也提前行动。<br>8 月 13 日 当天下午 4 时许，日本气象厅网站服务器首先受到中国黑客的攻击，其后，日本物质评估研究机构、日本战略物质研究中心、日本防御系统研究会、日本情报大会服务中心、日本消防厅、日本防卫设施厅、日本通讯研究实验室、日本议员网站等大批政府站点也受到攻击。 8 月 14 日 凌晨，红客大联盟发出了《对日本采取网络打击的声明》，内中写道：“日本首相小泉不顾全亚洲人民的抗议和日本国内祈求和平的声音，于昨日下午公然参拜了象征日本军国主义的靖国神社。日本领导人的这一错误举动严重地伤害了亚洲各国人民，尤其是受害最深的中国人民的感受。加之教科书事件等斑斑劣迹更是体现出日本当局对当年的错误毫无悔改之意。红客大联盟在得到此消息的的第一时间便召集了部分成员对此突发事件商讨对策。最终决定在我国政府还没有对日本提出抗议之前用我们所擅长的，表达我们网络时代青年一群对日本新政府的严正抗议和日本领导人的强烈不满。红客大联盟 (<a href=\"http://www.redhacker.org/\">www.RedHacker.org</a>) 在此次紧急行动中对以下的日本政府站点进行了主页替换。这和我们致力于推行的红客精神并不矛盾。红客大联盟对此件事情的发生表示遗憾，并将对以下所列举的受到的攻击的站点负责。历史不容忽视，事实岂能篡改，反击方能赢尊重，发展才是硬道理！” </p>\n<h3 id=\"第六次：-2001-年-4-月-5月反击-美国网络\"><a href=\"#第六次：-2001-年-4-月-5月反击-美国网络\" class=\"headerlink\" title=\"第六次： 2001 年 4 月~5月反击 美国网络\"></a>第六次： 2001 年 4 月~5月反击 美国网络</h3><p>原因：2001 年 4 月 1 日 ，美国军用侦察机将中国战机撞毁，导致飞行员王伟坠海死亡。</p>\n<p><img src=\"https://pic4.zhimg.com/50/v2-375b10c9ed9e68ea664523e6952c62df_b.jpg\"></p>\n<p>2001 年 4 月 1 日 ，美国军用侦察机将中国战机撞毁，导致飞行员王伟坠海死亡。这一事件在中国国内引起民众极大的愤慨，而在中美之间立刻造成布什新政府与中国关系紧张的局面。尽管 4 月 11 日 ，中国方面已同意美方机组人员先行返国，但事件尚未得到完全解决，两国间的气氛依旧剑拔弩张。从 4 月初开始，中美两国的黑客已经展开相互攻击。如美国黑客组织 poizonB0x 便是攻击中国网站的主力，而一个名为 pr0phet 的黑客则更是明确地说：“我一开始只是随机挑选一些网站作为攻击目标，不过现在我则主要攻击以 .edu.cn 和 ac.cn 结尾的网站，或者只是以 .cn 结尾的网站，都会成为我的攻击目标。”在这种气氛和情况下（ 5 月 8 日 又逢中国驻南使馆被炸两周年），中国黑客在 4 月 30 日 至 5 月 8 日 打响了大规模的“第六次卫国网络战”。对于这次中美黑客大战的“战绩”，不同媒体的报道有很大出入，据“中国红客联盟”负责人称，真正被攻破的美国网站到 5 月 7 日 为止有 1600 多个，其中主要的网站 ( 包括政府和军方的网站 ) 有 900 多个。而中国被攻破的网站有 1100 多个，主要网站有 600 多个。实际上，任何一次黑客战争既不可能事先公开“宣战”，更不可能有“终战”的截止日期。<br>这次中美黑客大战有以下特点：</p>\n<p>1 、中国黑客的攻击事出有因<br>在中国黑客的这次行动中，“中国红客网络安全技术联盟”（简称“中国红客联盟”， HUC ）是最瞩目的攻击主力，它使“红客”这一称谓再次叫响。其负责人 Lion 在 2000 年 12 月 1 日 就提出建议：“统一“红客”一词的英文名称（ honker ）。“红客”一词若能在英文中占有一席之地，这将具有非同寻常的意义！这样红客在世界范围内的交流与应用将变得更加方便；更重要的是，这样做能扩大影响力，增强凝聚力，促进红客文化的形成和进一步的发展！”也就是说中国黑客试图通过“红客”名称的确认，来赋予自己在一种特定情况下所作所为的正面形象。中国黑客涂改美国网页尽管也有以谩骂方式来泄愤，但主流是中国国旗、中国国歌和“伟大的中华民族万岁！”、“美国必须对撞机事件负完全责任”、“抗议美国向台湾出售武器，破坏世界和平！”等口号，实践着“维护祖国统一、捍卫国家主权、一致抵抗外辱、打击反华气焰”的行动宗旨。<br>2 、中国黑客的攻击具有群体规模<br>“中国红客联盟”、“中华黑客联盟”和“中国鹰派联盟”是攻击美国网站的主力，由于以往通过各种形式奠定的组织基础，因此得以在这次攻击行动中发挥群体力量，并带动了一大批临时参战的“菜鸟”（即技术生疏的新手）。如 4 月 30 日晚 7 点 ，“中国红客联盟”召开了“攻击美国网络动员大会”，并提供了更换美国网页的专用数据包；再如 5 月 4 日晚 ，中国黑客集中力量攻击白宫网站，据称参与人数有 8 万之众，事后白宫网站的新闻负责人吉米承认“大量数据同时涌入，堵塞了白宫与其互联网服务提供商的连接通道”。中国黑客万众一心的行动并且其间的出色协调，使得美国方面怀疑这次中国政府如果说没有背后支持，至少也是默许的。加拿大军事评论家、汉和情报评论高级分析员平可夫在香港《亚洲周刊》（第 19 期， 5 月 13 日 ）撰文称此次中国黑客的攻击为一场“新人民战争”，而这场战争的主体往往是可以称为“信息战网络战民兵”的庞大群体，武器是计算机、杀伤性火力构成是知识和技能，战场便是信息网络。<br>3 、中国黑客群体由年轻人组成<br>据媒体报道，“中国鹰派联盟”负责人老鹰今年 30 岁，而“中国红客联盟”负责人 lion 今年仅 21 岁，该组织发言人 bkbll 也年仅 21 岁，是在校大学生，其专业还不是计算机。 Bkbll 称“中国红客联盟”成员的平均年龄并不是媒体报道的 23 岁，而是更年轻，同时注册成员的 65% 是在校大学生。中国互联网信息中心（ CNNIC ）历次调查显示， 30 岁以下的青少年占全体网民的绝大多数。如最近一次调查显示（截止日期为 2000 年 12 月 31 日 ）， 8 个年龄段中， 18 至 24 岁占 41.18% ， 25 至 30 岁占 18.8% ， 18 岁以下占 14.93% ，也就是说， 18 至 30 岁年龄段的用户占到 2250 万总体的 75% 。今年中国网络用户预计将突破 3500 万， 2005 年将达到 2 亿，占全体国民的 15% 。从发展看，如此规模巨大的中国青年网络用户群体的网络行为，今后不论是对内还是对外，都将产生更大的效应。</p>\n<p>完～～<br>注：本文大部分内容来自  中国社会科学院新闻与传播研究所网络与数字传媒研究室主任闵大洪在博客中国于2005年02月12日 所发表的<a href=\"http://mdh.blogchina.com/64775.html\" title=\"《告别中国黑客的激情年代——写在“中国红客联盟”解散之际》\">《告别中国黑客的激情年代——写在“中国红客联盟”解散之际》</a>一文，本文中如有错误，欢迎指证。<br>推荐阅读：</p>\n","categories":[{"name":"思考总结","slug":"thinking","api":"api/categories/thinking.json"}],"tags":[{"name":"知乎","slug":"zhihu","api":"api/tags/zhihu.json"}],"api":"api/posts/2017/05/20/黑客可以厉害到什么程度？.json"}],"info":{"type":"category","name":"思考总结","slug":"thinking"}},"api":"api/categories/thinking/page.1.json"}