<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落叶挽歌</title>
  
  <subtitle>juliswang&#39;s 博客</subtitle>
  <link href="http://vompom.github.com/atom.xml" rel="self"/>
  
  <link href="http://vompom.github.com/"/>
  <updated>2025-08-25T13:44:34.603Z</updated>
  <id>http://vompom.github.com/</id>
  
  <author>
    <name>落叶挽歌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手写一个精简版Koin：深入理解依赖注入核心原理</title>
    <link href="http://vompom.github.com/2025/08/25/Koin-%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3%E7%9B%B8%E5%85%B3/"/>
    <id>http://vompom.github.com/2025/08/25/Koin-%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3%E7%9B%B8%E5%85%B3/</id>
    <published>2025-08-25T13:08:00.000Z</published>
    <updated>2025-08-25T13:44:34.603Z</updated>
    
    <content type="html"><![CDATA[<p>在现代 Android 应用开发中，依赖注入（Dependency Injection, DI）已成为构建松耦合、可测试代码的重要技术。Koin 作为一个轻量级的Kotlin依赖注入框架，因其简洁的DSL和易用性深受开发者喜爱。最近对其源码进行学习了解，通过手写一个极度精简的 Koin 核心代码，来透彻理解Koin的注册、解析和参数传递机制。</p><blockquote><p><strong>本文代码基于 Koin 源码思想实现，仅用于学习核心原理，并非 Koin官 方代码。</strong></p></blockquote><h2 id="核心概念与项目结构"><a href="#核心概念与项目结构" class="headerlink" title="核心概念与项目结构"></a>核心概念与项目结构</h2><p>下图是基于 koin 4.1 解析的 主要类UML图，可以比较清晰地看看各个类之间的关系</p><img src="https://cdn.julis.wang/blog/img/koin_uml.png"> <p>power by <a href="https://www.mermaidchart.com/">mermaidchart</a></p><p>主要类：</p><ul><li><strong><code>KoinApplication</code></strong>: Koin启动的入口，负责初始化容器和加载模块。</li><li><strong><code>Koin</code></strong>: 核心容器，持有实例注册表 InstanceRegistry 和作用域注册表 ScopeRegistry。</li><li><strong><code>Module</code></strong>: 定义依赖的地方，存放了所有的 bean 定义 BeanDefinition 与 InstanceFactory。</li><li><strong><code>BeanDefinition</code></strong>: 对一个依赖项的定义，包括其类型、限定符、所属作用域以及创建它的 lambda 表达式。</li><li><strong><code>InstanceFactory</code></strong>: 负责根据 <code>BeanDefinition</code> 创建实例的核心工厂，分为 <code>SingleFactory</code> (单例)、<code>FactoryFactory</code> (工厂模式) 和 <code>ScopeFactory</code> (作用域内单例)。</li><li><strong><code>Scope</code></strong>: 作用域，用于管理特定生命周期内的实例。</li><li><strong><code>ParametersHolder</code></strong>: 参数容器，用于在获取实例时动态传递参数。</li></ul><h2 id="手写-koin-代码介绍"><a href="#手写-koin-代码介绍" class="headerlink" title="手写 koin 代码介绍"></a>手写 koin 代码介绍</h2><p>基于对源码的理解和参考，实现了 koin 的基本功能，整体分成三部分：简单 single 数据存取、包含 scope 能力、动态参数能力，分成三个文件夹，顺序123是基于前面带代码累加的。</p><p><strong>简单 single 数据存取</strong><br>代码实现在：<a href="https://github.com/VomPom/JProject/blob/master/app/src/main/java/wang/julis/jproject/example/source/koin/noScope1/KoinWithoutScope.kt">KoinWithoutScope.kt</a></p><p>这是一份最简单的代码，大概200行不到，基本上包含了 koin 的核心思想：启动时注册组件定义。解析时，先查作用域缓存，命中则直接返回。未命中则递归解析其依赖项，调用工厂函数创建实例，最后返回实例。</p><p>从这也能看出来 koin 的缺点：Koin 启动时 (startKoin) 需要将所有模块的定义 (BeanDefinition) 注册到容器中。实例数量过多会显著增加启动注册过程的耗时，影响应用启动速度。由于每个实例都会对应一个 BeanDefinition 以及 Factory ，内存占用会相应地上升。</p><p>整个流程简单来讲就是生成一个 map，通过 key 获取对于的数据。</p><p><strong>Scope 能力</strong><br>代码实现在：<a href="https://github.com/VomPom/JProject/blob/master/app/src/main/java/wang/julis/jproject/example/source/koin/scope2/KoinWithScope.kt">KoinWithScope.kt</a></p><p>这一份是在之前的能力上进行添加，此前将所有的数据都注册到 “root” 这个容器内，全局通用，但为了将不同作用域分开，需要引入 scope 的概念。</p><p>简单理解就是在通过 key 获取的 map 里面的数据的时候，这个 key 是有一定的规则的，核心逻辑在这里：<br> <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">indexKey</span><span class="params">(clazz: <span class="type">KClass</span>&lt;*&gt;, typeQualifier: <span class="type">String</span>?, scopeQualifier: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> buildString &#123;</span><br><span class="line">        append(clazz.java.name)</span><br><span class="line">        append(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        append(typeQualifier ?: <span class="string">&quot;&quot;</span>)</span><br><span class="line">        append(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        append(scopeQualifier)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 不同的 scope 实际上也就是获取的 key 值的不同。</p><p><strong>动态参数能力</strong><br>代码实现在：<a href="https://github.com/VomPom/JProject/blob/master/app/src/main/java/wang/julis/jproject/example/source/koin/parameter3/KoinWithParameter.kt">KoinWithParameter.kt</a></p><p>最后在 scope 的基础上实现了一个比较重要的能力-动态参数能力，通过这个能力可以让有实例能够在运行的时候根据参数动态创建。这个能力也是像在安卓 Activity&#x2F;Fragment 里面 viewmodel() 实现依赖注入的必要实现。 </p><p>简单理解就是在 get() 的时候将参数传入到获取实例的调用链中，在运行时执行注册的 Lambda 函数invoke时候将作为参数传递到构造方法中去。这里单独拎出来实现是因为这个参数传递影响到整个流程的逻辑，为了上上面的两个能力逻辑更简单清晰，单独在这一部分实现。</p><h2 id="Koin-的注册流程（Declaration）"><a href="#Koin-的注册流程（Declaration）" class="headerlink" title="Koin 的注册流程（Declaration）"></a>Koin 的注册流程（Declaration）</h2><p>注册是DI容器工作的第一步。通过 <code>startKoin</code> 和 <code>module</code> DSL来声明依赖。</p><h3 id="启动-Koin-与模块加载"><a href="#启动-Koin-与模块加载" class="headerlink" title="启动 Koin 与模块加载"></a>启动 Koin 与模块加载</h3><p>整个启动加载流程将 kotlin 的语法糖用到了极致，也就使得整个代码看起来是如此的简洁。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> myApp = startKoin &#123;</span><br><span class="line">    modules(appModule)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个模块</span></span><br><span class="line"><span class="keyword">val</span> appModule = module &#123;</span><br><span class="line">    <span class="comment">// 注册一个单例，其构造需要一個 Int 参数</span></span><br><span class="line">    single &#123; (<span class="keyword">data</span>: <span class="built_in">Int</span>) -&gt; ComponentInt(<span class="keyword">data</span>) &#125;</span><br><span class="line">    <span class="comment">// 注册一个工厂（每次获取都是新实例），其构造需要 Int 和 Float 参数</span></span><br><span class="line">    factory &#123; (data1: <span class="built_in">Int</span>, data2: <span class="built_in">Float</span>) -&gt; ComponentIntFloat(data1, data2) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>流程剖析：</strong></p><p><strong><code>startKoin</code></strong><br>这是一个顶级函数，它调用 <code>GlobalContext.startKoin</code>，创建并初始化一个 <code>KoinApplication</code> 对象。</p><p><strong><code>modules(...)</code></strong><br><code>KoinApplication</code> 的方法，它将传入的 <code>Module</code> 列表交给 <code>Koin</code> 实例的 <code>loadModels</code> 方法处理。</p><p><strong><code>module &#123; ... &#125;</code></strong><br>DSL函数，它创建一个 <code>Module</code> 对象，并执行其中的配置lambda。</p><p><strong><code>single/factory/scope</code></strong><br><code>Module</code> 的扩展函数。它们的作用是：</p><ul><li>使用 <code>_createDefinition</code> 将 lambda 表达式包装成一个 <code>BeanDefinition</code>对象。</li><li>使用 <code>_InstanceFactory</code> 将 <code>BeanDefinition</code> 包装成对应的 <code>InstanceFactory</code>。</li><li>调用 <code>indexPrimaryType</code>，生成一个<strong>唯一的Key</strong>（格式：<code>类名:限定符:作用域</code>），并将 <code>Factory</code> 存入 <code>Module.mappings</code> 这个 <code>HashMap</code> 中。</li></ul><p><strong>最终存储</strong><br><code>Koin</code> 的 <code>InstanceRegistry</code> 会遍历所有 <code>Module</code>，将它们 <code>mappings</code> 中的全部 <code>Factory</code> 都合并到自己的 <code>_instances</code>（一个 <code>ConcurrentHashMap</code>）中。</p><p>至此，所有依赖的定义都已注册到容器中，静待获取。</p><h2 id="Koin的实例获取流程（Retrieval）"><a href="#Koin的实例获取流程（Retrieval）" class="headerlink" title="Koin的实例获取流程（Retrieval）"></a>Koin的实例获取流程（Retrieval）</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取无参依赖（普通方式）</span></span><br><span class="line"><span class="keyword">val</span> component = <span class="keyword">get</span>&lt;Component&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 scope 作用域限定进行获取</span></span><br><span class="line"><span class="keyword">val</span> scope = koin.createScope(<span class="string">&quot;scope&quot;</span>, scopeQualifier)</span><br><span class="line"><span class="keyword">val</span> component = scope.<span class="keyword">get</span>&lt;Component&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过需要动态参数的获取</span></span><br><span class="line"><span class="keyword">val</span> componentWithArgs = <span class="keyword">get</span>&lt;ComponentInt&gt; &#123; parametersOf(<span class="number">42</span>) &#125;</span><br><span class="line"><span class="keyword">val</span> componentWithMultiArgs = <span class="keyword">get</span>&lt;ComponentIntFloat&gt; &#123; parametersOf(<span class="number">101</span>, <span class="number">3.14f</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="流程剖析"><a href="#流程剖析" class="headerlink" title="流程剖析"></a>流程剖析</h3><p><strong><code>Scope.get&lt;T&gt;</code></strong></p><p>这是 <code>Scope</code> 的一个扩展函数。它首先创建一个 <code>ResolutionContext</code>，封装了当前作用域、要解析的类型、限定符以及最重要的——<strong>参数持有器 <code>ParametersHolder</code></strong>（由 <code>parametersOf</code> 函数创建）。</p><p> <strong>解析上下文（ResolutionContext）</strong></p><p> 这个上下文对象包含了解析一个实例所需的所有信息。</p><p><strong>核心解析器（CoreResolver）</strong><br><code>get</code> 操作会委托给 <code>Koin</code> 的 <code>CoreResolver</code>进行处理。源码里面对于查找顺序有非常清晰的层次体现：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">resolveFromContext</span><span class="params">(scope : <span class="type">Scope</span>, instanceContext: <span class="type">ResolutionContext</span>)</span></span>: T &#123;</span><br><span class="line">      <span class="keyword">return</span> resolveFromContextOrNull(scope,instanceContext) ?: throwNoDefinitionFound(instanceContext)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">resolveFromContextOrNull</span><span class="params">(scope : <span class="type">Scope</span>, instanceContext: <span class="type">ResolutionContext</span>, lookupParent : <span class="type">Boolean</span> = <span class="literal">true</span>)</span></span>: T? &#123;</span><br><span class="line">      <span class="keyword">return</span> resolveFromInjectedParameters(instanceContext)</span><br><span class="line">          ?: resolveFromRegistry(scope,instanceContext)</span><br><span class="line">          ?: resolveFromStackedParameters(scope,instanceContext)</span><br><span class="line">          ?: resolveFromScopeSource(scope,instanceContext)</span><br><span class="line">          ?: resolveFromScopeArchetype(scope,instanceContext)</span><br><span class="line">          ?: <span class="keyword">if</span> (lookupParent) resolveFromParentScopes(scope,instanceContext) <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">          ?: resolveInExtensions(scope,instanceContext)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> <strong>查找工厂</strong></p><ul><li><code>Resolver</code> 会调用 <code>InstanceRegistry.resolveDefinition</code>。</li><li>该方法使用和注册时<strong>相同的算法</strong>生成Key（类名:限定符:作用域），然后从 <code>_instances</code> 中查找对应的 <code>InstanceFactory</code>。</li></ul><p> <strong>创建实例</strong></p><ul><li><p>找到 <code>Factory</code> 后，调用其 <code>get(context: ResolutionContext)</code> 方法。</p></li><li><p><code>Factory</code> 会调用自己的 <code>create</code> 方法。<strong>关键一步来了</strong>：在 <code>create</code> 方法中，会执行 <code>BeanDefinition.definition.invoke(context.scope, parameters)</code>。这其实就是执行了之前注册的 lambda：<code>&#123; (data: Int) -&gt; ComponentInt(data) &#125;</code>。</p></li><li><p><strong>参数传递</strong>：这里的 <code>parameters</code> 就是在 <code>get</code> 时传入的 <code>ParametersHolder</code>。Lambda 的参数 <code>(data: Int)</code> 会从 <code>ParametersHolder</code> 中按顺序（或使用解构）取出值</p></li></ul><p><strong>返回实例</strong></p><p>工厂将创建好的实例返回给调用者。</p><p>对于 <code>SingleFactory</code>，它会将第一次创建出来的实例缓存起来，后续调用直接返回缓存实例。<code>FactoryFactory</code> 则每次都会执行 <code>create</code> 方法。</p><h2 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h2><h3 id="DslMarker-的作用"><a href="#DslMarker-的作用" class="headerlink" title="@DslMarker 的作用"></a>@DslMarker 的作用</h3><p>在实现的过程中发现如下图所示：koin 的代码有颜色分层，能比较清晰地看到各个 block 之间的差异，自己写的代码全部是白色。</p><img src="https://cdn.julis.wang/blog/img/koin_color_contrast.png"> <p>代码开头定义了三个注解：<code>@KoinApplicationDslMarker</code>, <code>@KoinDslMarker</code>, <code>@OptionDslMarker</code>。这是Kotlin DSL的<strong>安全卫士</strong>。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DslMarker</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">KoinDslMarker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@KoinDslMarker</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">single</span><span class="params">(...)</span></span> &#123; ... &#125; <span class="comment">// 这个single在DSL里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@KoinDslMarker</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KoinApplication</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">modules</span><span class="params">(...)</span></span> &#123; ... &#125; <span class="comment">// 这个modules在DSL里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    startKoin &#123;</span><br><span class="line">        modules(...) <span class="comment">// 正确：在 KoinApplication 的 lambda 里</span></span><br><span class="line">        single &#123; ... &#125; <span class="comment">// 编译错误！@DslMarker 阻止了隐式地使用外部 Receiver (Module)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@DslMarker</code> 实际的作用是防止在嵌套的DSL Lambda中，意外地调用到外层 Receiver 的方法，从而让DSL书写更加清晰和安全。代码颜色是由 IDE 提供的效果。在代码中加上几个注解之后，效果如图所示：</p><img src="https://cdn.julis.wang/blog/img/koin_color_annotation.png"> <p>跟 koin 的颜色不太一致，不过能明显看到代码有分层，应该是由于 koin 对 annotation 也有处理，这里没有再深入研究。</p><h3 id="2-优雅的参数传递与解构"><a href="#2-优雅的参数传递与解构" class="headerlink" title="2. 优雅的参数传递与解构"></a>2. 优雅的参数传递与解构</h3><p>这个逻辑复刻了Koin的动态参数特性。</p><ul><li><strong><code>ParametersHolder</code></strong>：一个轻量的参数容器，内部用一个 <code>List&lt;Any?&gt;</code> 存储参数。</li><li><strong><code>parametersOf</code></strong>：辅助函数，优雅地创建 <code>ParametersHolder</code>。</li><li><strong>解构声明（Destructuring Declaration）</strong>：<code>ParametersHolder</code> 重写了 <code>component1()</code> 到 <code>component5()</code> 操作符。这使得在定义lambda时，可以直接用 <code>(a: A, b: B)</code> 的形式来接收参数，而不是手动调用 <code>parameters.get&lt;X&gt;(0)</code>。</li></ul><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册端：看起来就像普通函数</span></span><br><span class="line">single &#123; (id: <span class="built_in">Int</span>, name: String) -&gt; User(id, name) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取端：传递参数非常直观</span></span><br><span class="line"><span class="keyword">val</span> user = <span class="keyword">get</span>&lt;User&gt; &#123; parametersOf(<span class="number">123</span>, <span class="string">&quot;Julius&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><p>这种设计极大地提升了API的简洁性和可读性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个手写的迷你Koin，可以深刻地理解到，一个现代DI容器的核心无非是解决两个问题：</p><ol><li><strong>如何注册（Declaration）</strong>：通过DSL将依赖的创建方式（Lambda）以键值对的形式保存到一个全局的注册表中。</li><li><strong>如何获取（Retrieval）</strong>：根据请求的类型、限定符和作用域生成Key，从注册表中找到对应的创建工厂，并调用它来生成实例。支持通过参数容器实现动态传参。</li></ol><p>除此之外，诸如 <code>@DslMarker</code> 保证DSL安全、<strong>解构</strong>实现参数优雅传递，都是构建一个健壮、易用框架的关键技术。</p><p>虽然这个实现省略了Koin的许多高级功能（如完整的Scope生命周期管理、属性注入、Android特定支持等），但它已经囊括了最核心、最精妙的设计思想，再理解其他的模块也会简单很多。</p><p>实现的所有源码位于：<a href="https://github.com/VomPom/JProject/tree/master/app/src/main/java/wang/julis/jproject/example/source/koin">JProject&#x2F;source&#x2F;koin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在现代 Android 应用开发中，依赖注入（Dependency Injection, DI）已成为构建松耦合、可测试代码的重要技术。Koin 作为一个轻量级的Kotlin依赖注入框架，因其简洁的DSL和易用性深受开发者喜爱。最近对其源码进行学习了解，通过手写一个极度精简</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="koin" scheme="http://vompom.github.com/tags/koin/"/>
    
  </entry>
  
  <entry>
    <title>[Compose Multiplatform]跨平台博客应用实践</title>
    <link href="http://vompom.github.com/2025/07/28/Compose-Multiplatform-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8D%9A%E5%AE%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://vompom.github.com/2025/07/28/Compose-Multiplatform-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%8D%9A%E5%AE%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</id>
    <published>2025-07-28T12:28:00.000Z</published>
    <updated>2025-07-28T14:51:23.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践"><a href="#用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践" class="headerlink" title="用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践"></a>用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实践</h2><p>在追求高效开发的时代，跨平台技术已成为移动应用开发的主流选择，此前基于鸿蒙的开发平台开发 <a href="https://julis.wang/2025/05/16/%E9%B8%BF%E8%92%99-%E5%86%99%E4%BA%86%E4%B8%AA%E5%9F%BA%E4%BA%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%B8%BF%E8%92%99App/">blog_harmony</a>，将自己博客文章进行展示。本文将介绍基于 <strong>CMP(Compose Multiplatform)</strong> 构建的开源博客应用 <a href="https://github.com/VomPom/blog_kmp">blog_kmp</a>，展示如何用 Kotlin 实现跨平台的应用开发。</p><h3 id="Compose-Multiplatform"><a href="#Compose-Multiplatform" class="headerlink" title="Compose Multiplatform"></a>Compose Multiplatform</h3><p>Compose Multiplatform 是 JetBrains 推出的声明式 UI 框架，基于 Jetpack Compose 扩展而来：</p><ul><li><strong>核心优势</strong>：用同一套 Kotlin 代码构建 Android、iOS、Desktop 和 Web 应用</li><li><strong>开发效率</strong>：实时预览、热重载加速开发迭代</li><li><strong>原生性能</strong>：通过 Skia 渲染引擎实现接近原生体验</li><li><strong>共享逻辑</strong>：业务逻辑、网络请求、状态管理可 100% 复用</li></ul><h3 id="项目架构与技术栈"><a href="#项目架构与技术栈" class="headerlink" title="项目架构与技术栈"></a>项目架构与技术栈</h3><p>blog_kmp 采用分层架构设计，核心模块包括：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">shared/</span><br><span class="line">├── src/commonMain/kotlin/  # 共享业务逻辑</span><br><span class="line">│   ├── <span class="keyword">data</span>/               # 数据层</span><br><span class="line">│   ├── domain/             # 领域模型</span><br><span class="line">│   └── presentation/       # UI状态管理</span><br><span class="line">├── src/androidMain/        # Android 平台代码</span><br><span class="line">└── src/iosMain/            # iOS 平台适配</span><br><span class="line">├── composeApp</span><br><span class="line">│   ├── build.gradle.kts</span><br><span class="line">│   └── src</span><br><span class="line">│       ├── androidMain     # Android 平台代码</span><br><span class="line">│       ├── commonMain      # 共享业务逻辑</span><br><span class="line">│            ├── App.kt     # 界面展示入口</span><br><span class="line">│            ├── <span class="keyword">data</span>       # 数据层</span><br><span class="line">│            │   ├── api        # 网络请求</span><br><span class="line">│            │   ├── di         # koin 依赖注入</span><br><span class="line">│            │   ├── model      # model 数据</span><br><span class="line">│            │   └── repository # 数据缓存管理</span><br><span class="line">│            │</span><br><span class="line">│            ├── navigation  # 页面间导航管理</span><br><span class="line">│            ├── platform    # 通过对各个平台抽象的接口 </span><br><span class="line">│            └── ui          # 通用 UI 逻辑</span><br><span class="line">│</span><br><span class="line">│       ├── desktopMain     # Desktop 平台适配</span><br><span class="line">│       └── iosMain         # iOS 平台适配</span><br></pre></td></tr></table></figure><h2 id="功能预览"><a href="#功能预览" class="headerlink" title="功能预览"></a>功能预览</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p><img src="https://cdn.julis.wang/github/blog_cmp/android.png"></p><h4 id="深色模式"><a href="#深色模式" class="headerlink" title="深色模式"></a>深色模式</h4><p><img src="https://cdn.julis.wang/github/blog_cmp/dark.png"></p><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><img src="https://cdn.julis.wang/github/blog_cmp/ios.png"></p><h3 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h3><p><img src="https://cdn.julis.wang/github/blog_cmp/desktop.png"></p><h4 id="主要技术栈"><a href="#主要技术栈" class="headerlink" title="主要技术栈"></a>主要技术栈</h4><ol><li><strong>Ktor 客户端</strong> - 网络请求</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> httpClient = HttpClient &#123;</span><br><span class="line">    install(ContentNegotiation) &#123;</span><br><span class="line">        json(Json &#123; ignoreUnknownKeys = <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadPosts</span><span class="params">()</span></span>: List&lt;Post&gt; = </span><br><span class="line">    httpClient.<span class="keyword">get</span>(<span class="string">&quot;https://cdn.julis/api/posts&quot;</span>).body()</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>DataStore</strong> - 跨平台数据库</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dataKey = stringPreferencesKey(key)</span><br><span class="line"><span class="keyword">val</span> result = dataStore.<span class="keyword">data</span></span><br><span class="line">    .<span class="keyword">catch</span> &#123; exception -&gt;</span><br><span class="line">        <span class="comment">// dataStore.data throws an IOException when an error is encountered when reading data</span></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">is</span> IOException) &#123;</span><br><span class="line">            emit(emptyPreferences())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .map &#123; preferences -&gt;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span>: String? = preferences[dataKey]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">data</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isJson) Json.decodeFromString&lt;T&gt;(<span class="keyword">data</span>) <span class="keyword">else</span> (<span class="keyword">data</span> <span class="keyword">as</span> T)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Koin</strong> - 依赖注入</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> sharedModule = module &#123;</span><br><span class="line">    single&lt;PostRepository&gt; &#123; PostRepositoryImpl(<span class="keyword">get</span>()) &#125;</span><br><span class="line">    viewModel &#123; PostViewModel(<span class="keyword">get</span>()) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>Kotlinx.Serialization</strong> - JSON 解析</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Post</span>(</span><br><span class="line">    <span class="keyword">val</span> id: String,</span><br><span class="line">    <span class="keyword">val</span> title: String,</span><br><span class="line">    <span class="keyword">val</span> content: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>compose-webview-multiplatform</strong> - WebView 浏览器<br>使用的第三方开发<a href="https://github.com/KevinnZou/compose-webview-multiplatform">compose-webview-multiplatform</a>基于 <a href="https://github.com/chromiumembedded/java-cef">java-cef</a>开发，不过这个library 在 desktop 平台表现不是太好，待完善。</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> state = rememberWebViewState(postUrl)</span><br><span class="line"> WebView(state = state,modifier = Modifier.fillMaxSize())            </span><br></pre></td></tr></table></figure><h3 id="平台特定实现"><a href="#平台特定实现" class="headerlink" title="平台特定实现"></a>平台特定实现</h3><p>UI 层面三端能够使用同一份代码，但为了体验，可能需要针对不同的设计，在桌面端可以设计更好地体验UI。这里避免不了 if-else 的UI逻辑，以及一些依赖各种系统的 api 需要单独实现，比如：深色模式监听、资源存储路径、系统信息、状态栏颜色等。</p><p><strong>Android 端</strong><br>Android 特定的功能结合使用起来非常的简单，毕竟都是有血缘关系的。可以使用 AndroidView 直接渲染原生的 UI 页面。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">AndroidView(</span><br><span class="line">      modifier = Modifier.fillMaxSize(),</span><br><span class="line">      factory = &#123; context -&gt;</span><br><span class="line">          MyView(context) &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      update = &#123; view -&gt;&#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p><strong>iOS 端</strong><br>iOS端主要需要 XCode 进行配合，还需要关注开发者账号相关的信息等，其他与 Android 端实现没有太大的差异。</p><p><strong>桌面端</strong><br>利用 Compose Desktop 的窗口管理，可以实现窗口多开。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = application &#123;</span><br><span class="line">    Window(onCloseRequest = ::exitApplication) &#123;</span><br><span class="line">        DesktopAppTheme &#123; AppContent() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🚀-性能优化实践"><a href="#🚀-性能优化实践" class="headerlink" title="🚀 性能优化实践"></a>🚀 性能优化实践</h3><ol><li><strong>分页加载</strong>：实现懒加载防止长列表卡顿</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">LazyColumn &#123;</span><br><span class="line">    itemsIndexed(posts) &#123; _, post -&gt;</span><br><span class="line">        PostItem(post)</span><br><span class="line">    &#125;</span><br><span class="line">    item &#123; <span class="keyword">if</span> (loading) LoadingIndicator() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>本地缓存</strong>：DataStore 离线存储 + Ktor 缓存策略</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">HttpClient &#123;</span><br><span class="line">    install(HttpCache) <span class="comment">// 启用 HTTP 缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>图像处理</strong>：搭配 Coil 实现高效图片加载</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">AsyncImage(</span><br><span class="line">    modifier = Modifier.size(<span class="number">80.</span>dp)</span><br><span class="line">        .shadow(</span><br><span class="line">            elevation = <span class="number">5.</span>dp,</span><br><span class="line">            shape = CircleShape,</span><br><span class="line">            spotColor = Color.Black</span><br><span class="line">        )</span><br><span class="line">        .clip(CircleShape)</span><br><span class="line">        .clickable &#123; &#125;,</span><br><span class="line">    model = AppConfig.AVATAR,</span><br><span class="line">    contentDescription = AppConfig.AVATAR,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="开发经验总结"><a href="#开发经验总结" class="headerlink" title="开发经验总结"></a>开发经验总结</h3><ol><li><p><strong>UI界面</strong><br>  使用 <a href="https://developer.android.com/compose">Compose</a> 进行界面布局开发，声明性编程范式相比于传统的 xml 布局开发，高效很多，使用也很方便。使用了这种方式，传统的 UI 开发方式再也回不去了。</p></li><li><p><strong>状态管理</strong><br>使用 <code>mutableStateOf</code> 实现响应式更新，或者使用 <code>derivedStateOf</code> 实现派生状态的处理。</p></li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pagIndex <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="number">0</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> errorState <span class="keyword">by</span> remember &#123; mutableStateOf&lt;String?&gt;(<span class="literal">null</span>) &#125;   </span><br><span class="line"><span class="keyword">val</span> themeState <span class="keyword">by</span> mineViewModel.appTheme.collectAsState()</span><br><span class="line"><span class="keyword">val</span> uiChecked <span class="keyword">by</span> remember(themeState) &#123; derivedStateOf &#123; themeState == ThemeConstants.DARK &#125; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>导航</strong></li></ol><p>实现 <code>Compose Navigator</code> 统一路由管理</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> gotoDebug: () -&gt; <span class="built_in">Unit</span> = &#123;</span><br><span class="line">    navController.navigate(Routes.Debug())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> goToPostDetail: (Post) -&gt; <span class="built_in">Unit</span> = &#123; it -&gt;</span><br><span class="line">    navController.navigate(Routes.PostDetail(title = it.title, it.url))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>Kotlin Flow</strong><br>简化异步编程，让网络请求的代码看起来更直观</li></ol><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadAllPost</span><span class="params">()</span></span>: Flow&lt;List&lt;PostV2&gt;&gt; = load(<span class="string">&quot;allPosts&quot;</span>) &#123;</span><br><span class="line">    postApi.getAllPost()?.<span class="keyword">data</span> ?: emptyList()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAllPost</span><span class="params">()</span></span>: SearchResponse? = request&lt;SearchResponse&gt;(getUrl(<span class="string">&quot;api/search.json&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">request</span><span class="params">(url: <span class="type">String</span>)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        client.<span class="keyword">get</span>(url).body()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> CancellationException) <span class="keyword">throw</span> e</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>经过一番各种折腾，将很多在工作上无法使用的能力（Koin、Flow、DataStore……）都体验使用了一下，在业余的时间完成了基于博客文章构建的 App 在三个平台上的开发，实际上最初我也想搭建 WebJs 的平台的，后面删除掉了，因为涉及到 web 平台开发的各种库相比客户端少很多，兼容起来也比较费劲。KMP&#x2F;CMP 这块技术确实是能很大地节省开发人力，多端使用同一份UI逻辑代码，部分逻辑也可以用 kotlin 统一进行封装，后续维护也会方便很多。但这里有个缺点就是涉及到的库所需要的 kotlin&#x2F;Java 版本要求比较高，除非开发一些独立的 App，否则公司里的项目想基于这些技术去实现不太大可能。以及如果所需要的能力比较依赖与原生，比如音视频领域就有一定的局限性，总体来讲更适合偏交互业务的开发。</p><p><strong>项目源码</strong>: <a href="https://github.com/VomPom/blog_kmp">https://github.com/VomPom/blog_kmp</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践&quot;&gt;&lt;a href=&quot;#用-CMP-构建跨平台博客应用：一次-Kotlin-的全栈实践&quot; class=&quot;headerlink&quot; title=&quot;用 CMP 构建跨平台博客应用：一次 Kotlin 的全栈实</summary>
      
    
    
    
    <category term="思考总结" scheme="http://vompom.github.com/categories/thinking/"/>
    
    
    <category term="KMP" scheme="http://vompom.github.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>[鸿蒙]写了个基于Hexo博客的鸿蒙App</title>
    <link href="http://vompom.github.com/2025/05/16/%E9%B8%BF%E8%92%99-%E5%86%99%E4%BA%86%E4%B8%AA%E5%9F%BA%E4%BA%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%B8%BF%E8%92%99App/"/>
    <id>http://vompom.github.com/2025/05/16/%E9%B8%BF%E8%92%99-%E5%86%99%E4%BA%86%E4%B8%AA%E5%9F%BA%E4%BA%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%B8%BF%E8%92%99App/</id>
    <published>2025-05-16T12:10:00.000Z</published>
    <updated>2025-07-28T14:52:28.959Z</updated>
    
    <content type="html"><![CDATA[<p>最近部门也在跟进<a href="https://www.harmonyos.com/">鸿蒙</a>平台的业务开发，自己主要是做 Android 开发，主要使用 Kotlin&#x2F;Java 语言。，需要对新的开发平台和开发模式进行学习，在业余时间开了个项目练手，做了个基于 Hexo 博客内容开发的App。鸿蒙主要使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts">ArkTS语言</a>和<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui">ArkUI框架</a>进行开发，有使用 <a href="https://developer.android.com/compose">Jetpack Compose</a> 和 JavaScript&#x2F;TypeScript 的开发经验的话，上手会比较的轻松。本文主要介绍做的App功能以及对鸿蒙开发的一个总结。</p><h2 id="App-简介"><a href="#App-简介" class="headerlink" title="App 简介"></a>App 简介</h2><p>后台数据来自 <a href="https://hexo.io/">Hexo</a> 生成的博客文章，利用 <a href="https://github.com/ryanuo/hexo-generator-wxapi">hexo-generator-wxapi</a> 生成 api .json 文件，再利用 <a href="https://www.qiniu.com/">七牛云</a> 提供对图片和 .json 文件 CDN。</p><p>实现的功能</p><ul><li>博客列表分页加载</li><li>文章详情加载</li><li>文章按分类&#x2F;标签展示</li><li>文章内容统计</li><li>深色&#x2F;浅色模式切换</li><li>数据本地缓存</li></ul><h3 id="功能预览"><a href="#功能预览" class="headerlink" title="功能预览"></a>功能预览</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><img src="https://cdn.julis.wang/github/blog_harmony/light_blog_list.jpeg"  alt="博客列表" /></td><td><img src="https://cdn.julis.wang/github/blog_harmony/light_stats.jpeg"  alt="统计" /></td><td><img src="https://cdn.julis.wang/github/blog_harmony/light_mine.jpeg" alt="个人" /></td><td><img src="https://cdn.julis.wang/github/blog_harmony/light_detail.jpeg"  alt="文章详情" /></td><td><img src="https://cdn.julis.wang/github/blog_harmony/light_category.jpeg"  alt="分类" /></td><td><img src="https://cdn.julis.wang/github/blog_harmony/light_tag.jpeg"  alt="标签" /></td></tr></tbody></table><h3 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><ul><li><a href="https://hexo.io/">Hexo</a> 快速、简洁且高效的博客框架</li><li><a href="https://github.com/ryanuo/hexo-generator-wxapi">hexo-generator-wxapi</a> 用于将 Hexo 博客内容生成 api 风格的.json文件</li><li><a href="https://www.qiniu.com/">七牛云</a> 提供对图片和.json文件 CDN加速</li></ul><h4 id="HarmonyOS"><a href="#HarmonyOS" class="headerlink" title="HarmonyOS"></a>HarmonyOS</h4><ul><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts">ArkTS</a> ArkTS在TypeScript（简称TS）生态基础上做了进一步扩展，保持了TS的基本风格，同时通过规范定义强化开发期静态检查和分析，提升代码健壮性，并实现更好的程序执行稳定性和性能。</li><li><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkui">ArkUI</a>  ArkUI（方舟UI框架）为应用的UI开发提供了完整的基础设施，包括简洁的UI语法、丰富的UI功能（组件、布局、动画以及交互事件），以及实时界面预览工具等，可以支持开发者进行可视化界面开发。</li><li><a href="https://gitee.com/openharmony-sig/ohos_pull_to_refresh">ohos_pull_to_refresh</a> 列表加载&#x2F;刷新控件(没有’No more’的状态)</li><li><a href="https://github.com/Tencent/MMKV">MMKV</a> 是基于 mmap 内存映射的 key-value 组件</li></ul><h2 id="鸿蒙开发总结"><a href="#鸿蒙开发总结" class="headerlink" title="鸿蒙开发总结"></a>鸿蒙开发总结</h2><h3 id="ArkTs-语言"><a href="#ArkTs-语言" class="headerlink" title="ArkTs 语言"></a>ArkTs 语言</h3><p>ArkTS 是 TypeScript 的超集，TypeScript 又是 JavaScript 的超集，所以对于基本数据类型使用的是 TypeScript 语法。他们三者的关系如下图所示：</p>  <img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/713/408/959/0030086000713408959.20241009110308.85777546121432927171131630988896:50001231000000:2800:D599CEDEC4315A859E47A08CEC5D4D3E334431F82ABC9FD0E9B6AD0F91CD2FF5.png" width="80%" alt="ArkTS与TypeScript的关系" /><p>相关的差异可以参考社区话题讨论 <a href="https://developer.huawei.com/consumer/cn/forum/topic/0203163854317501934">ArkTS与Typescript的区别？</a></p><p>这里主要记录一下自己使用过程中踩过的坑：</p><h4 id="基本语言类型"><a href="#基本语言类型" class="headerlink" title="基本语言类型"></a>基本语言类型</h4><p>Number 和 number 是两个不同的类型，Number 是 JavaScript 中的一个全局对象，可以使用 new Number() 来创建一个 Number 对象。同理对于 String 和 string，Boolean 和 boolean 也是一样的，大写开头的是<strong>包装对象类型</strong>，小写的是<strong>原始类型</strong>，这点Java&#x2F;kotlin也有类似的包装对象比较好理解，但 Object 居然也有大小写之区分相比难理解点，写代码的时候好几次忽略了这个事，<strong>Object</strong> 是所有对象的基类，object 表示非原始类型（即不是 number、string、boolean、symbol、null 或 undefined 的所有类型）。可以是任何对象、数组、函数、类实例等。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj: object;</span><br><span class="line">obj = &#123; a: 1 &#125;;         // ✅ 正确：普通对象</span><br><span class="line">obj = [1, 2, 3];        // ✅ 正确：数组</span><br><span class="line">obj = () =&gt; &#123;&#125;;         // ✅ 正确：函数</span><br><span class="line">obj = new Date();       // ✅ 正确：类实例</span><br><span class="line"></span><br><span class="line">obj = 42;               // ❌ 错误：原始类型 number</span><br><span class="line">obj = &quot;hello&quot;;          // ❌ 错误：原始类型 string</span><br></pre></td></tr></table></figure><p>两则的区别</p><table><thead><tr><th align="left">特性</th><th align="left">object</th><th align="left">Object</th></tr></thead><tbody><tr><td align="left"><strong>允许的值</strong></td><td align="left">仅非原始类型（对象、数组等）</td><td align="left">任意类型（包括原始值）</td></tr><tr><td align="left"><strong>原始值处理</strong></td><td align="left">禁止</td><td align="left">自动装箱（如 42 → Number）</td></tr><tr><td align="left"><strong>使用场景</strong></td><td align="left">明确限制为非原始类型时</td><td align="left">极少使用（通常用 unknown 或具体类型替代）</td></tr></tbody></table><h4 id="Map-等集合类当作普通-JavaScript-对象来操作"><a href="#Map-等集合类当作普通-JavaScript-对象来操作" class="headerlink" title="Map 等集合类当作普通 JavaScript 对象来操作"></a>Map 等集合类当作普通 JavaScript 对象来操作</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">map[<span class="string">&quot;key&quot;</span>] = value;            <span class="comment">// ❌ 错误用法！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;biz&quot;</span>));   <span class="comment">// ❌ 输出 undefined</span></span><br></pre></td></tr></table></figure><p>最开始挺奇怪的 map 明明设置了值，但是对应的 map size 为0，遍历 map 也没有数据。后来才发现是这种方式 不会 触发 Map 的内部机制，而是绕过了 Map 的方法，直接操作对象的属性，赋值后，键值对 不会 被存入 Map 的真实存储中，而是作为对象的普通属性存在。正确的用法是：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">map.<span class="property">set</span>[<span class="string">&quot;key&quot;</span>] = value;        <span class="comment">//  ✅ 正确用法！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;biz&quot;</span>));   <span class="comment">//  ✅ 输出 value</span></span><br></pre></td></tr></table></figure><h4 id="struct-的困扰"><a href="#struct-的困扰" class="headerlink" title="struct 的困扰"></a>struct 的困扰</h4><p>在 js 里面是没有 <code>struct</code> 这个关键词的，从刚接触到现在它唯一的作用就是：和 <code>@Component</code>绑定声明一个UI控件。例如：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> struct <span class="title class_">ToolBar</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>@Component</code> 和 <code>struct</code> 两则缺一不可，既然必须有 <code>@Component</code>来标注这是一个UI控件，为什么不能下面这样呢？能省掉一个关键字。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ToolBar</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>同样困扰的人还有很多，这里有一份讨论<a href="https://developer.huawei.com/consumer/cn/forum/topic/0204135301248599134">定义组件时的stuct关键字是什么？</a><br>官方也有一份聊胜于无的介绍</p><blockquote><p>struct和class的区别是什么? </p><p>struct只在自定义组件中使用，@Component装饰的struct就是自定义组件，自定义组件和class是两个概念，自定义组件没有类型，也不能等同于class。如果开发者需要使用组件作为参数在组件之间传递，可以使用自定义占位节点。</p></blockquote><p>我猜测这样是为了省掉对<code>@Component</code>装饰器编译的工作量，如果使用 class 声明，那么声明的UI控件就有“面向对象”的能力，实际上只希望它是一个UI控件声明，不需要它有其他的能力。难道不能对 <code>@Component</code> 装饰过的对象收回“面向对象”的能力么？当然能啊，估计要做很多编译检查的事儿。另外，从开发理解的层面上来讲，它确实也已经不是”对象”了，它只是一个干巴巴的一个UI结构，所以干脆就搞了一个新的关键词 struct。</p><h3 id="ArkUI-框架"><a href="#ArkUI-框架" class="headerlink" title="ArkUI 框架"></a>ArkUI 框架</h3><p>整体框架使用的方式和 <a href="https://developer.android.com/compose">Jetpack Compose</a> 类似，都是声明式UI框架。compose 里面使用  <code>@Composable</code>来标记某个方法这个方法便成了<code>UI控件</code>，控件里面的状态管理使用 <code>remember</code>+ <code>mutableState</code>来控制。而 ArkUI 通过 @State、@Link、@Prop 等装饰器来控制。了解了这些个装饰器的用法，基本上就能理解 ArkUI 的开发流程了。</p><h4 id="构建-UI-的-Component-Builder"><a href="#构建-UI-的-Component-Builder" class="headerlink" title="构建 UI 的 @Component @Builder"></a>构建 UI 的 @Component @Builder</h4><p>@Component 和 @Builder 组合起来实现的差不多就是 Compose 里面使用  <code>@Composable</code> 装饰某个方法的作用，用于构建 UI 或可复用的逻辑单元。<br><strong>@Component</strong><br>用于创建一个自定义组件，组件可以包含独立的 UI 结构、状态管理和生命周期。</p><p><strong>@Builder</strong><br>定义可复用的 UI 片段，用于创建一个UI 构建函数，封装一段可复用的 UI 代码块。不是独立组件，而是嵌入到其他组件或布局中执行，主要作用是复用和逻辑隔离，例如：关于页面，里面的文本是差不多的样式，只是内容不一样，那么只需要保留一个 text 属性出来接收参数。或者某块UI比较复杂，可以抽离一部分UI成为一个独立的UI逻辑模块。</p><h3 id="构建-UI-的状态控制装饰器"><a href="#构建-UI-的状态控制装饰器" class="headerlink" title="构建 UI 的状态控制装饰器"></a>构建 UI 的状态控制装饰器</h3><p><strong>@State</strong><br>比较常用的装饰器，和 Compose 里面 remember+mutableStateOf 的作用差不多，对应的值改变之后，对相关的使用到该属性UI的地方进行刷新。</p><p><strong>@Prop</strong><br>@Prop 装饰的变量和父组件建立单向的同步关系，@Prop变量允许在本地修改，但修改后的变化不会同步回父组件。</p><p>也就是在某个 @Component 的组件内有一个 @State 装饰的属性，传递到子 @Component 组件 @Prop 修饰的属性。子控件对这个属性修改之后，父控件不会对这个改变感知，父控件UI不会改变。</p><p><strong>@Link</strong><br>子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。<br>跟 @Prop 的作用类似，不过是双向的，子控件对这个属性修改之后，父控件会感知这个变化，父控件UI会随着这个属性改变而改变。</p><p><strong>@BuilderParam</strong><br>主要用于动态注入 UI 构建逻辑（即 @Builder 函数），实现父组件向子组件传递可定制的 UI 片段，也就是向子控件传递 UI 参数。</p><p>基本上比较常用到的就这些，还有很多例如：@LocalBuilder @StorageLink @Styles等，都是为了解决开发过过程中遇到的问题，但是只要掌握了 ArkUI UI组件的声明周期和状态管理的基本原理理解其他装饰器还是比较简单的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体开发体验下来，鸿蒙开发学习成本并不是特别高，比较快能上手，但设计的 api 更像一个缝合怪，且使用上不太收敛。很多库还需要再建设，例如音视频开发对应的支持库还不是特别成熟。不过，作为一个从头搞的生态来说能实现成这样已经很不错了，就像此前武磊登陆西甲，以及目前被看好的青年新星王钰栋，都是”自己的孩子”，需要迈出第一步。现在，很多公司也在适配鸿蒙了，期待未来能从 Android 跟 iOS 的生态中争夺出一片大市场。</p><p>项目源码：<a href="https://github.com/VomPom/blog_harmony">https://github.com/VomPom/blog_harmony</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近部门也在跟进&lt;a href=&quot;https://www.harmonyos.com/&quot;&gt;鸿蒙&lt;/a&gt;平台的业务开发，自己主要是做 Android 开发，主要使用 Kotlin&amp;#x2F;Java 语言。，需要对新的开发平台和开发模式进行学习，在业余时间开了个项目练手，做了</summary>
      
    
    
    
    <category term="思考总结" scheme="http://vompom.github.com/categories/thinking/"/>
    
    
    <category term="鸿蒙" scheme="http://vompom.github.com/tags/%E9%B8%BF%E8%92%99/"/>
    
  </entry>
  
  <entry>
    <title>KV-存储之mmkv</title>
    <link href="http://vompom.github.com/2025/03/30/KV-%E5%AD%98%E5%82%A8%E4%B9%8Bmmkv/"/>
    <id>http://vompom.github.com/2025/03/30/KV-%E5%AD%98%E5%82%A8%E4%B9%8Bmmkv/</id>
    <published>2025-03-30T03:38:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的业务中，需要用到轻量级存储业务中的数据（例如设置数据存储），绝大多数时候 Anroid 管法提供的 <a href="https://developer.android.com/reference/android/content/SharedPreferences">SharedPreferences</a>  组件就能实现，但针对一些需要高效的场景它就不那么使用了，不适合存储大量数据、多线程操作的不安全性、数据明文不安全性，以及不支持多进程之间的调用等各种问题。<br><a href="https://github.com/Tencent/MMKV">MMKV</a>的诞生就是为了解决以上的问题，本文主要对 MMKV 源码的学习知识点进行一些总结。</p><h2 id="核心设计与原理"><a href="#核心设计与原理" class="headerlink" title="核心设计与原理"></a>核心设计与原理</h2><p>在官方的开源工程中可以看到如下的一些介绍</p><blockquote><p>MMKV 是基于 mmap 内存映射的 key-value 组件，底层序列化&#x2F;反序列化使用 protobuf 实现，性能高，稳定性强。从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。</p></blockquote><h3 id="传统I-O与-mmap"><a href="#传统I-O与-mmap" class="headerlink" title="传统I&#x2F;O与 mmap"></a>传统I&#x2F;O与 mmap</h3><p>mmap 这个是 mmkv 实现的核心，没有 mmap 那么就没有 mmkv。对于 <code>SharedPreferences</code>的实现来说，每次的数据更新都将操作本地文件，而本地文件的写入是通过传统的I&#x2F;O实现。要理解两者的实现差异，需要先理解 Linux <strong>用户空间与内核空间</strong>设计。</p><h4 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a><strong>用户空间与内核空间</strong></h4><p>Linux的进程是相互独立的，一个进程是不能直接操作或者访问别一个进程空间的。每个进程空间还分为用户空间和内核（Kernel）空间，相当于把Kernel和上层的应用程序抽像的隔离开。</p><p><strong>用户空间</strong>和<strong>内核空间</strong>，用户空间是用户程序代码运行的地方，内核空间是内核代码运行的地方。为了安全，它们是隔离的，即使用户的程序崩溃了，内核也不受影响。</p><p>这里有两个隔离，一个进程间是相互隔离的，二是进程内有用户空间和内核空间的隔离。</p><p>进程间，用户空间的数据不可共享，所以用户空间 &#x3D; 不可共享空间<br>进程间，内核空间的数据可共享，所以内核空间 &#x3D; 可共享空间，所以Linux系统的内存通常是MemFree+Cache<br>所有进程共用1个内核空间。</p><h4 id="传统I-O读写流程"><a href="#传统I-O读写流程" class="headerlink" title="传统I&#x2F;O读写流程"></a><strong>传统I&#x2F;O读写流程</strong></h4><p>常规文件读写操作（调用read&#x2F;fread等函数）过程如下：</p><ul><li><p>进程发起读写文件请求。</p></li><li><p>内核通过查找进程文件符表，定位到内核已打开文件集上的文件信息，从而找到此文件的<code>inode</code>。</p></li><li><p><code>inode</code> 在 <code>address_space</code> 上查找要请求的文件页是否已经缓存在页缓存中。如果存在，则直接返回这片文件页的内容。</p></li><li><p>如果不存在，则通过 <code>inode</code> 定位到文件磁盘地址，将数据从磁盘复制到页缓存。之后再次发起读页面过程，进而将页缓存中的数据发给用户进程。</p><blockquote><p><strong>什么是 inode</strong> ?</p><p>全称为 index node，既<strong>存储文件元信息的区域</strong>，中文译名“索引节点”。<br>包含：文件权限、文件拥有者的UID、文件的大小等等。</p></blockquote></li></ul><img src="https://cdn.julis.wang/blog/img/ee519ba873acf3f80fd4ccec86ed72e7.png"><p>总结来说，常规文件操作为了提高读写效率和保护磁盘，使用了页缓存机制。这样造成读文件时需要先将文件页从磁盘拷贝到页缓存中，由于页缓存处在内核空间，不能被用户进程直接寻址访问，所以还需要将页缓存中的数据页再次拷贝到用户空间中。这样，通过了两次数据拷贝过程，才能完成<strong>进程</strong>对<strong>文件</strong>内容的访问。</p><h4 id="mmap基本概念和原理"><a href="#mmap基本概念和原理" class="headerlink" title="mmap基本概念和原理"></a><strong>mmap基本概念和原理</strong></h4><p>内存映射（mmap），就是<strong>将文件的磁盘扇区映射到进程的虚拟内存空间</strong>的过程，即将一个文件映射到进程的虚拟空间，实现文件磁盘地址和进程虚拟空间中一段虚拟地址的一一对应关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。</p><img src="https://cdn.julis.wang/blog/img/mmap_1.png"><p>由上图可知，进程的虚拟地址空间，由多个虚拟内存区域构成。每个虚拟内存区域都是进程在虚拟地址空间中的一个同质区间，即具有同样特性的连续地址范围。上图中所示的text数据段（代码段）、初始数据段、BSS数据段、堆、栈和内存映射，都是一个独立的虚拟内存区域。内存映射的地址空间处在堆栈之间的空余部分。</p><p>linux内核使用 <code>vm_area_struc</code>t 结构来表示一个独立的虚拟内存区域，由于每个不同质的虚拟内存区域功能和内部机制都不同，因此一个进程使用多个 <code>vm_area_struct</code> 结构来分别表示不同类型的虚拟内存区域。各个 <code>vm_area_struct</code> 结构使用链表或者树形结构链接，方便进程快速访问，如下图所示：</p><img src="https://cdn.julis.wang/blog/img/mmap_2_1.png"><p><code>vm_area_struct</code> 结构中包含区域起始和终止地址以及其他相关信息。这样，进程对某一虚拟内存区域的任何操作需要用要的信息，都可以从 <code>vm_area_struct</code> 中获得。mmap函数就是要创建一个新的 <code>vm_area_struct</code> 结构，并将其与文件的物理磁盘地址相连。</p><p>mmap内存映射的实现过程，总的来说可以分为三个阶段：</p><p><strong>阶段一：进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域</strong></p><ul><li>进程在用户空间调用mmap库函数</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure><p><code>addr</code>：指定映射的虚拟内存地址，可以设置为 NULL，让内核自动选择合适的虚拟内存地址</p><p><code>length</code>：映射的长度。</p><p><code>prot</code>：映射内存的保护模式，可选值如下：  </p><p><code>flags</code>：指定映射的类型</p><p><code>fd</code>：进行映射的文件句柄。</p><p><code>offset</code>：文件偏移量（从文件的何处开始映射）</p><ul><li><p>在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址</p></li><li><p>为此虚拟区分配一个 <code>vm_area_struct</code> 结构，接着对这个结构的各个域进行了初始化</p></li><li><p>将新创建的虚拟区结构 <code>vm_area_struct</code> 对象插入到进程的虚拟地址区域链表&#x2F;树中</p></li></ul><p><strong>阶段二：调用内核空间的mmap函数（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系</strong></p><ul><li><p>为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p></li><li><p>为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p></li><li><p>通过该文件的文件结构体，链接到 <code>file_operations</code> 模块，调用内核mmap函数，其原型为：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int mmap(struct file *filp, struct vm_area_struct *vma) //不同于用户空间mmap库函数</span><br></pre></td></tr></table></figure><ul><li><p>内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p></li><li><p>通过 <code>remap_pfn_range</code> 函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到物理内存(主存)中。</p></li></ul><blockquote><p>主存</p><p>主存储器（Main memory），简称主存。是计算机硬件的一个重要部件，其作用是存放指令和数据，并能由中央处理器（CPU）直接随机存取</p></blockquote><p><strong>阶段三：进程发起对这片映射地址空间的访问，引发缺页异常，实现文件内容到主存（物理内存）的拷贝</strong></p><blockquote><p>前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时</p></blockquote><ul><li><p>进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p></li><li><p>缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p></li><li><p>调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果没有则调用nopage函数把所缺的页从磁盘装入到主存中。</p></li><li><p>之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p></li></ul><blockquote><p>修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用<code>msync()</code>来强制同步, 这样所写的内容就能立即保存到文件里了</p></blockquote><p>常规文件操作需要从磁盘到内核空间页缓存再到用户空间主存的两次数据拷贝。而mmap文件映射，只需要从磁盘到用户空间主存的一次数据拷贝过程。mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同数据不通的繁琐过程，因此 mmap 效率更高。</p><p>以上是 mmap 的基本概念和原理，搞明白了这些才能看明白整个 mmkv 里面的逻辑处理</p><h3 id="mmkv-一次-put-的流程"><a href="#mmkv-一次-put-的流程" class="headerlink" title="mmkv 一次 put 的流程"></a>mmkv 一次 put 的流程</h3><p>mmkv初始化比较简单，主要涉及到一些配置的初始化，文件夹创建等，其中最重要的逻辑 mmap 调用被封装到一个 <code>MemoryFile</code>到对象里面 </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MemoryFile::mmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> oldPtr = m_ptr;</span><br><span class="line">    <span class="keyword">auto</span> mode = m_readOnly ? PROT_READ : (PROT_READ | PROT_WRITE);</span><br><span class="line">    m_ptr = (<span class="type">char</span> *) ::<span class="built_in">mmap</span>(m_ptr, m_size, mode, MAP_SHARED, m_diskFile.m_fd, <span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要记录一下一次 put 任务的流程，以 <code>mmkv.putInt(&quot;int&quot;, 1)</code>为例，进过 JNI 的调用到了</p><p><strong>native-birdge.cpp</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">MMKV_JNI jboolean <span class="title">encodeInt</span><span class="params">(JNIEnv *env, jobject obj, jlong handle, jstring oKey, jint value)</span> </span>&#123;</span><br><span class="line">    MMKV *kv = <span class="built_in">reinterpret_cast</span>&lt;MMKV *&gt;(handle);</span><br><span class="line">    <span class="keyword">if</span> (kv &amp;&amp; oKey) &#123;</span><br><span class="line">        string key = <span class="built_in">jstring2string</span>(env, oKey);</span><br><span class="line">        <span class="keyword">return</span> (jboolean) kv-&gt;<span class="built_in">set</span>((<span class="type">int32_t</span>) value, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (jboolean) <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入了<strong>MMVK.cpp</strong>的 </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MMKV::set</span><span class="params">(<span class="type">int32_t</span> value, MMKVKey_t key, <span class="type">uint32_t</span> expireDuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isKeyEmpty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> size = <span class="built_in">mmkv_unlikely</span>(m_enableKeyExpire) ? Fixed32Size + <span class="built_in">pbInt32Size</span>(value) : <span class="built_in">pbInt32Size</span>(value);</span><br><span class="line">    <span class="function">MMBuffer <span class="title">data</span><span class="params">(size)</span></span>;</span><br><span class="line">    <span class="function">CodedOutputData <span class="title">output</span><span class="params">(data.getPtr(), size)</span></span>;</span><br><span class="line">    output.<span class="built_in">writeInt32</span>(value);</span><br><span class="line">    <span class="comment">// ... 省略一些校验逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setDataForKey</span>(std::<span class="built_in">move</span>(data), key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步主要是准备一下数据，并使用 <code>MMBuffer</code> <code>CodedOutputData</code>将写入的数据进行一次包装（不仅仅是 key-value，还有数据size等等），实际调用在<code>setDataForKey</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MMKV::setDataForKey</span><span class="params">(MMBuffer &amp;&amp;data, MMKVKey_t key, <span class="type">bool</span> isDataHolder)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">checkLoadData</span>(); <span class="comment">// 状态同步相关的逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (m_crypter) &#123;</span><br><span class="line">      <span class="comment">// ... 省略加密的处理逻辑</span></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = m_dic-&gt;<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (itr != m_dic-&gt;<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="comment">// compare data before appending to file</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isCompareBeforeSetEnabled</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> basePtr = (<span class="type">uint8_t</span> *) (m_file-&gt;<span class="built_in">getMemory</span>()) + Fixed32Size;</span><br><span class="line">                MMBuffer oldValueData = itr-&gt;second.<span class="built_in">toMMBuffer</span>(basePtr);</span><br><span class="line">                <span class="keyword">if</span> (isDataHolder) &#123;</span><br><span class="line">                    <span class="function">CodedInputData <span class="title">inputData</span><span class="params">(oldValueData.getPtr(), oldValueData.length())</span></span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// read extra holder header bytes and to real MMBuffer</span></span><br><span class="line">                        oldValueData = CodedInputData::<span class="built_in">readRealData</span>(oldValueData);</span><br><span class="line">                        <span class="keyword">if</span> (oldValueData == data) &#123;</span><br><span class="line">                            <span class="comment">// MMKVInfo(&quot;[key] %s, set the same data&quot;, key.c_str());</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="built_in">catch</span> (std::exception &amp;exception) &#123;</span><br><span class="line">                        <span class="built_in">MMKVWarning</span>(<span class="string">&quot;compareBeforeSet exception: %s&quot;</span>, exception.<span class="built_in">what</span>());</span><br><span class="line">                    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">                        <span class="built_in">MMKVWarning</span>(<span class="string">&quot;compareBeforeSet fail&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> onlyOneKey = !<span class="built_in">isMultiProcess</span>() &amp;&amp; m_dic-&gt;<span class="built_in">size</span>() == <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">mmkv_likely</span>(!m_enableKeyExpire)) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                KVHolderRet_t ret;</span><br><span class="line">                <span class="keyword">if</span> (onlyOneKey) &#123;</span><br><span class="line">                    ret = <span class="built_in">overrideDataWithKey</span>(data, key, isDataHolder);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ret = <span class="built_in">appendDataWithKey</span>(data, key, isDataHolder);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ret.first) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                itr = m_dic-&gt;<span class="built_in">find</span>(key);</span><br><span class="line">                <span class="keyword">if</span> (itr != m_dic-&gt;<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    itr-&gt;second = std::<span class="built_in">move</span>(ret.second);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// in case filterExpiredKeys() is triggered</span></span><br><span class="line">                    m_dic-&gt;<span class="built_in">emplace</span>(key, std::<span class="built_in">move</span>(ret.second));</span><br><span class="line">                    <span class="built_in">mmkv_retain_key</span>(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_hasFullWriteback = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的代码逻辑很长，做了很多 if-else 的逻辑，最终走向两个大分支：</p><p>key 是新增的走 <code>appendDataWithKey</code></p><p>key 将会覆盖原来的将会走 <code>overrideDataWithKey</code></p><p>有这两个分支，主要是因为 mmkv 存储采用的  <a href="https://protobuf.com.cn/">protobuf 协议</a>，另外有一个很重要的方法也在这里执行了：<code>checkLoadData();</code>  安卓里面的多进程实现，将需要这里的一些逻辑，在 mmkv多进程原理篇进行讲解。</p><p><code>appendDataWithKey</code> 转换为 <code>MMBuffer</code>并继续向下执行</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">KVHolderRet_t <span class="title">MMKV::appendDataWithKey</span><span class="params">(<span class="type">const</span> MMBuffer &amp;data, MMKVKey_t key, <span class="type">bool</span> isDataHolder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> keyData = <span class="built_in">MMBuffer</span>((<span class="type">void</span> *) key.<span class="built_in">data</span>(), key.<span class="built_in">size</span>(), MMBufferNoCopy);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">doAppendDataWithKey</span>(data, keyData, isDataHolder, <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(keyData.<span class="built_in">length</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doAppendDataWithKey</code> 里面的代码也很长，不过也就只做一件事：将k-v值写入到文件里面做准备，真正的写入逻辑在 <code>m_output-&gt;writeData(keyData);</code>，这里先后调用了两次 <code>writeData</code>,是先写入key再写入了 value。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">KVHolderRet_t</span></span><br><span class="line"><span class="function"><span class="title">MMKV::doAppendDataWithKey</span><span class="params">(<span class="type">const</span> MMBuffer &amp;data, <span class="type">const</span> MMBuffer &amp;keyData, <span class="type">bool</span> isDataHolder, <span class="type">uint32_t</span> originKeyLength)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> isKeyEncoded = (originKeyLength &lt; keyData.<span class="built_in">length</span>());</span><br><span class="line">    <span class="keyword">auto</span> keyLength = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(keyData.<span class="built_in">length</span>());</span><br><span class="line">    <span class="keyword">auto</span> valueLength = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(data.<span class="built_in">length</span>());</span><br><span class="line">    <span class="keyword">if</span> (isDataHolder) &#123;</span><br><span class="line">        valueLength += <span class="built_in">pbRawVarint32Size</span>(valueLength);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// size needed to encode the key</span></span><br><span class="line">    <span class="type">size_t</span> size = isKeyEncoded ? keyLength : (keyLength + <span class="built_in">pbRawVarint32Size</span>(keyLength));</span><br><span class="line">    <span class="comment">// size needed to encode the value</span></span><br><span class="line">    size += valueLength + <span class="built_in">pbRawVarint32Size</span>(valueLength);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SCOPED_LOCK</span>(m_exclusiveProcessLock);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> hasEnoughSize = <span class="built_in">ensureMemorySize</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (!hasEnoughSize || !<span class="built_in">isFileValid</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="literal">false</span>, <span class="built_in">KeyValueHolder</span>());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isKeyEncoded) &#123;</span><br><span class="line">            m_output-&gt;<span class="built_in">writeRawData</span>(keyData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m_output-&gt;<span class="built_in">writeData</span>(keyData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isDataHolder) &#123;</span><br><span class="line">            m_output-&gt;<span class="built_in">writeRawVarint32</span>((<span class="type">int32_t</span>) valueLength);</span><br><span class="line">        &#125;</span><br><span class="line">        m_output-&gt;<span class="built_in">writeData</span>(data); <span class="comment">// note: write size of data</span></span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">    m_actualSize += size;</span><br><span class="line">    <span class="built_in">updateCRCDigest</span>(ptr, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="literal">true</span>, <span class="built_in">KeyValueHolder</span>(originKeyLength, valueLength, offset));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>writeData</code> 进行了两步先写入数据的 <strong>长度信息</strong>，再写入真实的数据，这里还是因为  <a href="https://protobuf.com.cn/">protobuf 协议</a>设计相关</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CodedOutputData::writeData</span><span class="params">(<span class="type">const</span> MMBuffer &amp;value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">writeRawVarint32</span>((<span class="type">int32_t</span>) value.<span class="built_in">length</span>());</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">writeRawData</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终走到了<code>writeRawData</code> 关键代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CodedOutputData::writeRawData</span><span class="params">(<span class="type">const</span> MMBuffer &amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> numberOfBytes = data.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (m_position + numberOfBytes &gt; m_size) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(m_ptr + m_position, data.<span class="built_in">getPtr</span>(), numberOfBytes);</span><br><span class="line">    m_position += numberOfBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑使用 <code>memcpy</code> 将数据直接通过 memcpy 直接在内存层面进行拷贝，而这里的 <code>m_ptr</code>就是最开始通过<code>mmap</code>创建出来的指针！！到这里一次写入基本上就结束了。</p><h3 id="mmkv-一次-get-的流程"><a href="#mmkv-一次-get-的流程" class="headerlink" title="mmkv 一次 get 的流程"></a>mmkv 一次 get 的流程</h3><p>依然先通过 JNI走到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">MMKV_JNI jint <span class="title">decodeInt</span><span class="params">(JNIEnv *env, jobject obj, jlong handle, jstring oKey, jint defaultValue)</span> </span>&#123;</span><br><span class="line">    MMKV *kv = <span class="built_in">reinterpret_cast</span>&lt;MMKV *&gt;(handle);</span><br><span class="line">    <span class="keyword">if</span> (kv &amp;&amp; oKey) &#123;</span><br><span class="line">        string key = <span class="built_in">jstring2string</span>(env, oKey);</span><br><span class="line">        <span class="keyword">return</span> (jint) kv-&gt;<span class="built_in">getInt32</span>(key, defaultValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再到 mmkv getInt32</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int32_t</span> <span class="title">MMKV::getInt32</span><span class="params">(MMKVKey_t key, <span class="type">int32_t</span> defaultValue, <span class="type">bool</span> *hasValue)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="built_in">SCOPED_LOCK</span>(m_lock);</span><br><span class="line">    <span class="built_in">SCOPED_LOCK</span>(m_sharedProcessLock);</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">getDataForKey</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="built_in">length</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="function">CodedInputData <span class="title">input</span><span class="params">(data.getPtr(), data.length())</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (hasValue != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                *hasValue = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> input.<span class="built_in">readInt32</span>();</span><br><span class="line">        &#125; </span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getRawDataForKey</code>方法，主要有两个分支，一种是加密逻辑，另一种是非加密逻辑，但他们流程都差不多从一个  map 里面根据 key 获取一个对象（这个对象暂时并不是 get 最终的返回值），那这个 map 是从哪里来的呢？</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">MMBuffer <span class="title">MMKV::getRawDataForKey</span><span class="params">(MMKVKey_t key)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">checkLoadData</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MMKV_DISABLE_CRYPT</span></span><br><span class="line">    <span class="keyword">if</span> (m_crypter) &#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = m_dicCrypt-&gt;<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (itr != m_dicCrypt-&gt;<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> basePtr = (<span class="type">uint8_t</span> *) (m_file-&gt;<span class="built_in">getMemory</span>()) + Fixed32Size;</span><br><span class="line">            <span class="keyword">return</span> itr-&gt;second.<span class="built_in">toMMBuffer</span>(basePtr, m_crypter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = m_dic-&gt;<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (itr != m_dic-&gt;<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> basePtr = (<span class="type">uint8_t</span> *) (m_file-&gt;<span class="built_in">getMemory</span>()) + Fixed32Size;</span><br><span class="line">            <span class="keyword">return</span> itr-&gt;second.<span class="built_in">toMMBuffer</span>(basePtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MMBuffer nan;</span><br><span class="line">    <span class="keyword">return</span> nan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码里面溯源<code>m_dicCrypt</code>和 <code>m_dic</code> 是在 MMKV 初始化的时候生成的，主要逻辑在 <code>MMKV_IO .cpp</code>里面的 <code>loadFromFile</code>方法内：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MMKV::loadFromFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">loadMetaInfoAndCheck</span>();</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (!m_file-&gt;<span class="built_in">isFileValid</span>()) &#123;</span><br><span class="line">        m_file-&gt;<span class="built_in">reloadFromFile</span>(m_expectedCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!m_file-&gt;<span class="built_in">isFileValid</span>()) &#123;</span><br><span class="line">        <span class="built_in">MMKVError</span>(<span class="string">&quot;file [%s] not valid&quot;</span>, m_path.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">bool</span> loadFromFile = <span class="literal">false</span>, needFullWriteback = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">checkDataValid</span>(loadFromFile, needFullWriteback);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">auto</span> ptr = (<span class="type">uint8_t</span> *) m_file-&gt;<span class="built_in">getMemory</span>();</span><br><span class="line">        <span class="comment">// loading</span></span><br><span class="line">        <span class="keyword">if</span> (loadFromFile &amp;&amp; m_actualSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">...</span><br><span class="line">            <span class="function">MMBuffer <span class="title">inputBuffer</span><span class="params">(ptr + Fixed32Size, m_actualSize, MMBufferNoCopy)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (m_crypter) &#123;</span><br><span class="line">                <span class="built_in">clearDictionary</span>(m_dicCrypt);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">clearDictionary</span>(m_dic);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needFullWriteback) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MMKV_DISABLE_CRYPT</span></span><br><span class="line">                <span class="keyword">if</span> (m_crypter) &#123;</span><br><span class="line">                    MiniPBCoder::<span class="built_in">greedyDecodeMap</span>(*m_dicCrypt, inputBuffer, m_crypter);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                &#123;</span><br><span class="line">                    MiniPBCoder::<span class="built_in">greedyDecodeMap</span>(*m_dic, inputBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MMKV_DISABLE_CRYPT</span></span><br><span class="line">                <span class="keyword">if</span> (m_crypter) &#123;</span><br><span class="line">                    MiniPBCoder::<span class="built_in">decodeMap</span>(*m_dicCrypt, inputBuffer, m_crypter);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                &#123;</span><br><span class="line">                    MiniPBCoder::<span class="built_in">decodeMap</span>(*m_dic, inputBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            m_output = <span class="keyword">new</span> <span class="built_in">CodedOutputData</span>(ptr + Fixed32Size, m_file-&gt;<span class="built_in">getFileSize</span>() - Fixed32Size);</span><br><span class="line">            m_output-&gt;<span class="built_in">seek</span>(m_actualSize);</span><br><span class="line">            <span class="keyword">if</span> (needFullWriteback) &#123;</span><br><span class="line">                <span class="built_in">fullWriteback</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// file not valid or empty, discard everything</span></span><br><span class="line">            <span class="built_in">SCOPED_LOCK</span>(m_exclusiveProcessLock);</span><br><span class="line"></span><br><span class="line">            m_output = <span class="keyword">new</span> <span class="built_in">CodedOutputData</span>(ptr + Fixed32Size, m_file-&gt;<span class="built_in">getFileSize</span>() - Fixed32Size);</span><br><span class="line">            <span class="keyword">if</span> (m_actualSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">writeActualSize</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, IncreaseSequence);</span><br><span class="line">                <span class="built_in">sync</span>(MMKV_SYNC);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">writeActualSize</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, KeepSequence);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_needLoadFromFile = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总统来说就是在初始化的时候就会将基于<code>protobuf</code>协议的本地文件里面的数据加载到内存，并将其放在一个 map 内，方便后续使用。</p><p>回到 <code>int32_t MMKV::getInt32()</code>通过 <code>getDataForKey(key)</code>获取到一个<code>MMBuffer</code>对象，并通过 <strong>CodedInputData</strong>进行反序列化操作，读取 <strong>Varint32</strong> 的 <strong>valueSize</strong> 值，随后不断循环通过 <strong>CodedInputData</strong>  读取到<strong>value</strong> 值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int32_t</span> <span class="title">MMKV::getInt32</span><span class="params">(MMKVKey_t key, <span class="type">int32_t</span> defaultValue, <span class="type">bool</span> *hasValue)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">auto</span> data = <span class="built_in">getDataForKey</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="built_in">length</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="function">CodedInputData <span class="title">input</span><span class="params">(data.getPtr(), data.length())</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (hasValue != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                *hasValue = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> input.<span class="built_in">readInt32</span>();</span><br><span class="line">        &#125; </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mmkv-与-SharedPreferences"><a href="#mmkv-与-SharedPreferences" class="headerlink" title="mmkv 与 SharedPreferences"></a>mmkv 与 SharedPreferences</h2><p>以下是 <strong>MMKV</strong> 与 <strong>SharedPreferences</strong> 的优劣势对比总结，结合性能、安全性、功能支持等核心维度进行分析：</p><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a><strong>性能对比</strong></h3><table><thead><tr><th align="left"><strong>维度</strong></th><th align="left"><strong>SharedPreferences</strong></th><th align="left"><strong>MMKV</strong></th></tr></thead><tbody><tr><td align="left"><strong>读写速度</strong></td><td align="left">慢（同步 I&#x2F;O，多次数据拷贝）</td><td align="left">快（<code>mmap</code> 零拷贝，内存直接操作）</td></tr><tr><td align="left"><strong>线程安全</strong></td><td align="left">需自行加锁（<code>apply()</code> 异步写入仍有风险）</td><td align="left">内置多线程锁（文件锁 + 内存锁）</td></tr><tr><td align="left"><strong>大数据量支持</strong></td><td align="left">性能急剧下降（全量 XML 解析&#x2F;序列化）</td><td align="left">高效（增量更新，Protobuf 编码）</td></tr></tbody></table><h3 id="安全性与稳定性"><a href="#安全性与稳定性" class="headerlink" title="安全性与稳定性"></a><strong>安全性与稳定性</strong></h3><table><thead><tr><th align="left"><strong>维度</strong></th><th align="left"><strong>SharedPreferences</strong></th><th align="left"><strong>MMKV</strong></th></tr></thead><tbody><tr><td align="left"><strong>数据加密</strong></td><td align="left">无（明文存储）</td><td align="left">支持 AES-128&#x2F;AES-256 加密</td></tr><tr><td align="left"><strong>崩溃恢复</strong></td><td align="left">可能因异常导致 XML 损坏</td><td align="left">通过 CRC 校验 + 备份文件保障完整性</td></tr><tr><td align="left"><strong>系统版本适配</strong></td><td align="left">部分版本有 ANR 问题（如 <code>apply()</code>）</td><td align="left">无系统级兼容性问题</td></tr></tbody></table><h3 id="功能支持"><a href="#功能支持" class="headerlink" title="功能支持"></a><strong>功能支持</strong></h3><table><thead><tr><th align="left"><strong>维度</strong></th><th align="left"><strong>SharedPreferences</strong></th><th align="left"><strong>MMKV</strong></th></tr></thead><tbody><tr><td align="left"><strong>多进程</strong></td><td align="left">不支持（跨进程数据不同步）</td><td align="left">支持（通过文件锁 + <code>mmap</code> 共享内存）</td></tr><tr><td align="left"><strong>数据类型</strong></td><td align="left">仅支持基本类型（int&#x2F;String 等）</td><td align="left">支持基本类型、二进制数据（MMBuffer）</td></tr><tr><td align="left"><strong>加密存储</strong></td><td align="left">明文存储（XML）</td><td align="left">支持 AES 加密（可选）</td></tr><tr><td align="left"><strong>增量更新</strong></td><td align="left">全量写入（即使只改一个键值）</td><td align="left">仅追加新数据，定期整理</td></tr></tbody></table><p>从上面的对比看看，mmkv 在很多层面都是领先 SharedPreferences 的，那么 mmkv 是否有缺陷呢？答案是有的。</p><blockquote><p>任何的操作系统、任何的软件，在往磁盘写数据的过程中如果发生了意外——例如程序崩溃，或者断电关机——磁盘里的文件就会以这种写了一半的、不完整的形式被保留。写了一半的数据怎么用啊？没法用，这就是文件的损坏。这种问题是不可能避免的，MMKV 虽然由于底层机制的原因，在程序崩溃的时候不会影响数据往磁盘的写入，但断电关机之类的操作系统级别的崩溃，MMKV 就没办法了，文件照样会损坏。对于这种文件损坏，SharedPreferences 和 DataStore 的应对方式是在每次写入新数据之前都对现有文件做一次自动备份，这样在发生了意外出现了文件损坏之后，它们就会把备份的数据恢复过来；而 MMKV，没有这种自动的备份和恢复，那么当文件发生了损坏，数据就丢了，之前保存的各种信息只能被重置。也就是说，MMKV 是唯一会丢数据的方案。</p></blockquote><p>在 mmkv 里面有 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/CRC.html">CRC</a> 校验，如果不通过的话，将会废弃掉之前所有的数据。在 mmkv 里面也有人反馈：<a href="https://github.com/Tencent/MMKV/issues/729">https://github.com/Tencent/MMKV/issues/729</a> 在写入的过程中因为一些特殊情况写入失败，会导致本地的文件损坏且不可recovery。</p><p>那有什么办法避免这个问题呢？有大佬开源另一个 KV 框架 <a href="https://github.com/BillyWei01/FastKV">FastKV</a>对这个问题进行了处理，采用通过double-write等方法确保数据的完整性，原理是数据依次写入A&#x2F;B两个文件，如果写入A过程中崩溃，B仍是完整的，如果A完整写入了，则B写入时崩溃也不要紧。这种实现方式理论上是不错的，不太清楚 mmkv 为什么没有采取这样的逻辑。不过这个库并没有经过大量业务进行验证，只能作为一个学习的方案先看看。</p><p>另外谷歌已经开发了新的KV存储框架<a href="https://cloud.google.com/datastore/docs/concepts/overview?hl=zh-cn">DataStore</a>，<code>SharedPreferences</code>也将渐渐地退出历史的舞台了。不过 DataStore 的性能目前仍然没有 mmkv 的好。关于这三者的比较可以查看： <a href="https://juejin.cn/post/7112268981163016229">《Android 的键值对存储有没有最优解？》</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章深入剖析了 <strong>MMKV</strong>（腾讯开源的高性能键值存储组件）的核心设计与实现原理，重点对比了传统 I&#x2F;O 与 <code>mmap</code> 内存映射的差异，并详细分析了 MMKV 的读写流程以及和 SharedPreferences 的各方面对比。</p><p><strong>参考</strong></p><p><a href="https://juejin.cn/post/7112268981163016229">《Android 的键值对存储有没有最优解？》</a></p><p><a href="https://yangjie2.github.io/2021/11/14/mmap%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/">《mmap原理与应用》</a></p><p><a href="https://blog.csdn.net/zhanglh046/article/details/115603788">《文件内存映射和传统I&#x2F;O机制》</a></p><p><a href="https://blog.csdn.net/luo_boke/article/details/109311432">Android 内存映射mmap浅谈</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在平时的业务中，需要用到轻量级存储业务中的数据（例如设置数据存储），绝大多数时候 Anroid 管法提供的 &lt;a href=&quot;https://developer.android.com/reference/android/content/SharedPreferences&quot;</summary>
      
    
    
    
    
    <category term="mmap" scheme="http://vompom.github.com/tags/mmap/"/>
    
  </entry>
  
  <entry>
    <title>RetroFit2 源码学习相关</title>
    <link href="http://vompom.github.com/2025/03/17/Learn-from-RetroFit/"/>
    <id>http://vompom.github.com/2025/03/17/Learn-from-RetroFit/</id>
    <published>2025-03-17T12:28:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>研究 <a href="https://github.com/square/retrofit">retrofit</a> 目标：理解动态代理、注解、反射、学习它所用到的设计模式，达到自己能手写它的核心实现。</p><p>最近终于有点精力能够去研究研究源码了， 真的是写的一个非常好的的开源库，以前刚接触安卓的时候扒拉过相关的源码，但是随着工作了几年之后，经验的积累，让我对源码里面的东西能够体会更深刻，自己也尝试去手写里面的核心实现，看完源码对整体的架构理解了之后，以为自己能很顺利的写下来，实则不然。<br>知识还是需要知行合一，这篇文章主要记录 <a href="https://github.com/square/retrofit">retrofit</a>  的一些知识点。</p><h3 id="retrofit-的设计模式"><a href="#retrofit-的设计模式" class="headerlink" title="retrofit 的设计模式"></a>retrofit 的设计模式</h3><p>retrofit 里面中使用了多种设计模式，以实现其灵活、可扩展和高性能的特性：</p><table><thead><tr><th align="left">设计模式</th><th align="left">应用场景</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong>建造者模式</strong></td><td align="left"><code>Retrofit.Builder</code></td><td align="left">灵活配置 Retrofit 实例</td></tr><tr><td align="left"><strong>工厂模式</strong></td><td align="left"><code>Converter.Factory</code>、<code>CallAdapter.Factory</code></td><td align="left">创建 Converter 和 CallAdapter 实例</td></tr><tr><td align="left"><strong>动态代理模式</strong></td><td align="left">接口方法转换为 HTTP 请求</td><td align="left">运行时生成接口代理对象</td></tr><tr><td align="left"><strong>适配器模式</strong></td><td align="left"><code>CallAdapter</code></td><td align="left">将 <code>Call</code> 适配为其他类型</td></tr><tr><td align="left"><strong>装饰器模式</strong></td><td align="left"><code>OkHttp</code> 拦截器</td><td align="left">增强 HTTP 请求和响应的功能</td></tr><tr><td align="left"><strong>观察者模式</strong></td><td align="left">与 <code>RxJava</code> 或 <code>LiveData</code> 结合</td><td align="left">实现异步数据流的订阅和通知</td></tr><tr><td align="left"><strong>策略模式</strong></td><td align="left"><code>Converter</code> 和 <code>CallAdapter</code> 选择</td><td align="left">动态选择数据转换或调用适配策略</td></tr><tr><td align="left"><strong>单例模式</strong></td><td align="left"><code>Retrofit</code> 实例共享</td><td align="left">确保全局只有一个 Retrofit 实例</td></tr><tr><td align="left"><strong>模板方法模式</strong></td><td align="left"><code>Call</code> 的实现</td><td align="left">定义 HTTP 请求的执行流程</td></tr></tbody></table><p><strong>retrofit 的动态代理模式</strong></p><p>retrofit 用了诸多的设计模式，其中最经典的莫过于动态代理模式了，在了解 retrofit 之前，我一直以为这样的网络请求形式是最直观的，参考以前写的<a href="https://julis.wang/2019/05/13/%E5%9F%BA%E4%BA%8EVolley%E6%A1%86%E6%9E%B6%E7%9A%84%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8C%83%E5%9E%8B%E5%A4%84%E7%90%86/">基于Volley框架的返回数据的范型处理</a></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Request.<span class="keyword">get</span>(</span><br><span class="line">    url = url,</span><br><span class="line">    params = param,</span><br><span class="line">    listener = <span class="keyword">object</span> : OnRequestListener&lt;Data&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(commonData: <span class="type">CommonData</span>?, <span class="keyword">data</span>: <span class="type">Data</span>?)</span></span> &#123;&#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(errorCode: <span class="type">Int</span>, errorMessage: <span class="type">String</span>?)</span></span> &#123;&#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>以为这样很直观，逻辑也很清晰，实则 代码冗余，回调嵌套，如果有多个连续的请求，代码会变得难以维护，而 retrofit 搭配上协程能这样实现：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = apiService.getXXX(params)</span><br></pre></td></tr></table></figure><p>简单到不能再简单，<code>动态代理</code>功不可没，上面的 apiService 是一个接口，由：<code> retrofit.create(ApiInterface::class.java)</code> 生成其实例，动态代理其核心实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> &#123;</span><br><span class="line">    validateServiceInterface(service);</span><br><span class="line">    <span class="keyword">return</span> (T)</span><br><span class="line">        Proxy.newProxyInstance(</span><br><span class="line">            service.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123;service&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">              <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Platform</span> <span class="variable">platform</span> <span class="operator">=</span> Platform.get();</span><br><span class="line">              <span class="keyword">private</span> <span class="keyword">final</span> Object[] emptyArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="keyword">public</span> <span class="meta">@Nullable</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">// ....</span></span><br><span class="line">                <span class="keyword">return</span> platform.isDefaultMethod(method)</span><br><span class="line">                    ? platform.invokeDefaultMethod(method, service, proxy, args)</span><br><span class="line">                    : loadServiceMethod(method).invoke(args);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>由<code>loadServiceMethod(method).invoke(args)</code> 负责将接口方法（通过 Java 反射获取的 <code>Method</code> 对象）解析并转换为一个可执行的 HTTP 请求。</p><p><code>Proxy.newProxyInstance</code> 方法，参数：</p><ul><li><p>ClassLoader loader 用于加载代理类的类加载器。</p></li><li><p>Class&lt;?&gt;[] interfaces 代理类需要实现的接口数组，代理对象将实现这些接口，并拦截对这些接口方法的调用。只能代理实现了接口的类，不能代理没有接口的类。</p></li><li><p>InvocationHandler h<br>调用处理器，负责处理代理对象上的方法调用。每次调用代理对象的方法时，都会调用 <code>InvocationHandler</code> 的 <code>invoke</code> 方法。对于 Retrofit 的接口我们并没有去“实现”它的方法，所有的逻辑都由&#96;&#96; retrofit.create()<code>方法里面返回的 </code>InvocationHandler<code>实现的 </code>invoke&#96;方法实现的。</p></li></ul><h3 id="核心实现逻辑"><a href="#核心实现逻辑" class="headerlink" title="核心实现逻辑"></a>核心实现逻辑</h3><h4 id="协程的支持"><a href="#协程的支持" class="headerlink" title="协程的支持"></a><strong>协程的支持</strong></h4><p>Retrofit 支持多种异步编程模型，包括回调、RxJava 和协程等，这里主要记录一下对协程的支持。普通方法和异步逻辑的分叉在：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isKotlinSuspendFunction) &#123;</span><br><span class="line">      <span class="keyword">return</span> new CallAdapted&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (continuationWantsResponse) &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line">      <span class="keyword">return</span> (HttpServiceMethod&lt;ResponseT, ReturnT&gt;)</span><br><span class="line">          new SuspendForResponse&lt;&gt;(</span><br><span class="line">              requestFactory,</span><br><span class="line">              callFactory,</span><br><span class="line">              responseConverter,</span><br><span class="line">              (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码关键变量<code>isKotlinSuspendFunction</code> ，用于判断是否为协程方法（suspend修饰），判断逻辑很简单，只需要判定方法最后一个参数是否为<code> Continuation.class</code> 即可。这里的分叉逻辑都继承自<code>HttpServiceMethod&lt;T&gt;</code>实现 <code>ReturnT adapt(Call&lt;ResponseT&gt; call, Object[] args)</code>这个抽象方法，这也是 retrofit 使用 <strong>适配器模式</strong>的地方，把不同的调用方式进行统一。对于协程方式的调用有实现：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object adapt(Call&lt;ResponseT&gt; call, Object[] args) &#123;</span><br><span class="line">      call = callAdapter.adapt(call);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//noinspection unchecked Checked by reflection inside RequestFactory.</span></span><br><span class="line">      Continuation&lt;Response&lt;ResponseT&gt;&gt; continuation =</span><br><span class="line">          (Continuation&lt;Response&lt;ResponseT&gt;&gt;) args[args.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// See SuspendForBody for explanation about this try/catch.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> KotlinExtensions.awaitResponse(call, continuation);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span>.suspendAndThrow(e, continuation);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Call<span class="type">&lt;T&gt;</span>.<span class="title">awaitResponse</span><span class="params">()</span></span>: Response&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> suspendCancellableCoroutine &#123; continuation -&gt;</span><br><span class="line">    continuation.invokeOnCancellation &#123;</span><br><span class="line">      cancel()</span><br><span class="line">    &#125;</span><br><span class="line">    enqueue(<span class="keyword">object</span> : Callback&lt;T&gt; &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, response: <span class="type">Response</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        continuation.resume(response)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">        continuation.resumeWithException(t)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就一切都明朗了，实现了 <code>Call</code>的扩展方法，这里的 <code>Call</code>并不是 <code>okhttp3.Call</code>，它只是 retrofit  <code>okhttp3.Call</code>为方便框架整体逻辑的处理而定义的，比如 retrofit 的 <code>Call</code> 是泛型化的，可以直接返回解析后的对象，<code>enqueue</code>同理。</p><p><code>suspendCancellableCoroutine</code>方法是实现协程方法的关键，它可以将基于回调的异步操作封装成一个挂起函数，怎么理解呢？对 扩展方法<code>awaitResponse</code>反编译可以看到方法定义是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title function_">await</span><span class="params">(<span class="meta">@NotNull</span> Call $<span class="built_in">this</span>$await, <span class="meta">@NotNull</span> Continuation $completion)</span> </span><br></pre></td></tr></table></figure><p>其实这里跟定义一个 <code>listener</code>去监听方法的回调有点像，这个方法改写成 <code>listener</code>的实现话大概就是这样：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Call<span class="type">&lt;T&gt;</span>.<span class="title">awaitResponse</span><span class="params">(listener:<span class="type">Listener</span>&lt;<span class="type">T</span>&gt;)</span></span>: Response&lt;T&gt; &#123;</span><br><span class="line">        enqueue(<span class="keyword">object</span> : Callback&lt;T&gt; &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, response: <span class="type">Response</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">                Listener.resume(response)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                Listener.resumeWithException(t)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可看到改造实现需要传递一个 <code>listener</code>，哪这个 <code>listener</code>是什么？前面其有如何判断一个方法是否为协程的方法的逻辑：判定方法最后一个参数是否为<code> Continuation.class</code> 即可。这里的  <code>listener</code> 其实可以等价于 一个 <code>Continuation</code>实例，kotlin 的协程库帮我们实现了对应的封装，对于使用我们不会直观地感受<code>Continuation</code>的存在，实际它贯穿整个协程。关于协程这里不再赘述，可以查看 <a href="https://juejin.cn/post/7142743424670629895?searchId=202503230943390124BC33C1668EC4B62B">《带着问题分析Kotlin协程原理》</a>了解。</p><h3 id="返回数据格式的解析"><a href="#返回数据格式的解析" class="headerlink" title="返回数据格式的解析"></a><strong>返回数据格式的解析</strong></h3><p>对于<strong>Converter</strong>,在协程和普通方法调用分叉逻辑的前面点：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Converter&lt;ResponseBody, ResponseT&gt; responseConverter = createResponseConverter(retrofit, method, responseType);</span><br></pre></td></tr></table></figure><p><code>createResponseConverter</code>之后一路走到</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Converter&lt;ResponseBody, T&gt; nextResponseBodyConverter(</span><br><span class="line">    <span class="meta">@Nullable</span> Converter.Factory skipPast, Type type, Annotation[] annotations) &#123;</span><br><span class="line">  Objects.requireNonNull(type, <span class="string">&quot;type == null&quot;</span>);</span><br><span class="line">  Objects.requireNonNull(annotations, <span class="string">&quot;annotations == null&quot;</span>);</span><br><span class="line"></span><br><span class="line">  int start = converterFactories.indexOf(skipPast) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (int i = start, count = converterFactories.size(); i &lt; count; i++) &#123;</span><br><span class="line">    Converter&lt;ResponseBody, ?&gt; converter =</span><br><span class="line">        converterFactories.<span class="keyword">get</span>(i).responseBodyConverter(type, annotations, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (converter != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//noinspection unchecked</span></span><br><span class="line">      <span class="keyword">return</span> (Converter&lt;ResponseBody, T&gt;) converter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>converterFactories</code> 的值就是在 retrofit 初始化的时候进行使用  <code>public Builder addConverterFactory(Converter.Factory factory)</code>添加的值。可以看到是按添加到<code>List&lt;Converter.Factory&gt; converterFactories</code>里面的顺序进行选择的，默认<code>GsonConverterFactory</code>实现了利用 <code>Gson</code>进行数据转化 ，如果我们自己实现<code>Converter.Factory</code>的接口的话，那么可以根据一定的规则判断是否要返回我们自定义的 <code>Converter</code>，如果不需要使用就返回 null，会自动匹配下一个能使用的 <code>Converter</code>。注意这里并不会因为前一个  <code>Converter</code> 解析失败而自动尝试使用下一个<code>Converter</code>（当然，你可以在自定义的<code>Converter</code>里面做类似这样的尝试策略）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>这篇文章深入剖析了 <strong>Retrofit</strong> 框架的核心设计模式、动态代理机制、协程支持以及数据解析逻辑，通过源码分析和手写实现，帮助读者更好地理解 Retrofit 的工作原理，并强调了理论与实践结合的重要性。</p></li><li><p>为加深对 retrofit 的理解，可以尝试手写核心实现，自己尝试的的代码在 <a href="https://github.com/VomPom/JProject/tree/master/app/src/main/java/wang/julis/jproject/example/source/retrofit2/learn/vmfit">vmfit</a> </p></li><li><p>附一张 retrofit 的全流程图，来源：<a href="https://cloud.tencent.com/developer/article/1683334">https://cloud.tencent.com/developer/article/1683334</a></p></li></ul><img src="https://cdn.julis.wang/blog/img/ru5ssbhumq.jpeg">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;研究 &lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;retrofit&lt;/a&gt; 目标：理解动态代理、注解、反射、学习它所用到的设计模式，达到自己能手写它的核心实现。&lt;/p&gt;
&lt;p&gt;最近终于有点精力能够去研究研究源码了， 真的是写的一</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="Android" scheme="http://vompom.github.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android屏幕刷新机制</title>
    <link href="http://vompom.github.com/2025/02/24/Android%E5%B1%8F%E5%B9%95%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/"/>
    <id>http://vompom.github.com/2025/02/24/Android%E5%B1%8F%E5%B9%95%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/</id>
    <published>2025-02-24T02:49:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究 Android 屏幕显示与渲染相关的内容，平时经常看到这些类 <code>ViewRootImpl</code>、<code>Choreographer</code>、<code>Surface</code> 、 <code>SurfaceFlinger</code>等，知道它们都用于屏幕渲染相关，但对它们细节了解较少，相关的文章也比较多，不需要自己完全重新再编写一份，于是对相关内容进行一个总结,<br>主要来源：<a href="https://juejin.cn/post/6863756420380196877">《Android屏幕刷新机制—VSyncChoreographer 全面理解》</a>，这篇博客是我认为是目前看到过最好的一篇，文章由浅入深比较好理解。不过文章里面图片链接资源已经失效，为以后复习相关知识点，在此将其整理删除冗余内容，并对图片资源进行更新。</p><h2 id="一、背景和疑问"><a href="#一、背景和疑问" class="headerlink" title="一、背景和疑问"></a><strong>一、背景和疑问</strong></h2><p>在Android中，当我们谈到 <strong>布局优化</strong>、<strong>卡顿优化</strong> 时，通常都知道 需要减少布局层级、减少主线程耗时操作，这样可以减少<strong>丢帧</strong>。如果丢帧比较严重，那么界面可能会有明显的卡顿感。我们知道 通常手机刷新是每秒60次，即每隔16.6ms刷新一次。 问题来了：</p><ol><li><strong>丢帧</strong>(掉帧) ，是说 这一帧延迟显示 还是丢弃不再显示 ？</li><li>布局层级较多&#x2F;主线程耗时 是如何造成 丢帧的呢？</li><li>16.6ms刷新一次 是啥意思？是每16.6ms都走一次 measure&#x2F;layout&#x2F;draw ？</li><li>measure&#x2F;layout&#x2F;draw 走完，界面就立刻刷新了吗?</li><li>如果界面没动静止了，还会刷新吗？</li><li>可能你知道<strong>VSYNC</strong>，这个具体指啥？在屏幕刷新中如何工作的？</li><li>可能你还听过屏幕刷新使用 <strong>双缓存</strong>、<strong>三缓存</strong>，这又是啥意思呢？</li><li>可能你还听过神秘的<strong>Choreographer</strong>，这又是干啥的？</li></ol><h2 id="二、显示系统基础知识"><a href="#二、显示系统基础知识" class="headerlink" title="二、显示系统基础知识"></a><strong>二、显示系统基础知识</strong></h2><p>在一个典型的显示系统中，一般包括CPU、GPU、Display三个部分， CPU负责计算帧数据，把计算好的数据交给GPU，GPU会对图形数据进行渲染，渲染好后放到buffer(图像缓冲区)里存起来，然后Display（屏幕或显示器）负责把buffer里的数据呈现到屏幕上。如下图：</p><img src="https://cdn.julis.wang/blog/img/0nq54q5jtq.jpeg"><p>单缓存，从缓存映射到屏幕。</p><h3 id="2-1-基础概念"><a href="#2-1-基础概念" class="headerlink" title="2.1 基础概念"></a><strong>2.1 基础概念</strong></h3><ul><li><strong>屏幕刷新频率</strong> 一秒内屏幕刷新的次数（一秒内显示了多少帧的图像），单位 Hz（赫兹），如常见的 60 Hz。<strong>刷新频率取决于硬件的固定参数</strong>（不会变的）。</li><li><strong>逐行扫描</strong> 显示器并不是一次性将画面显示到屏幕上，而是从左到右边，从上到下逐行扫描，顺序显示整屏的一个个像素点，不过这一过程快到人眼无法察觉到变化。以 60 Hz 刷新率的屏幕为例，这一过程即 1000 &#x2F; 60 ≈ 16ms。</li><li><strong>帧率</strong> （Frame Rate） 表示 <strong>GPU 在一秒内绘制操作的帧数</strong>，单位 fps。例如在电影界采用 24 帧的速度足够使画面运行的非常流畅。而 Android 系统则采用更加流程的 60 fps，即每秒钟GPU最多绘制 60 帧画面。帧率是动态变化的，例如当画面静止时，GPU 是没有绘制操作的，屏幕刷新的还是buffer中的数据，即GPU最后操作的帧数据。</li><li><strong>画面撕裂</strong>（tearing） 一个屏幕内的数据来自2个不同的帧，画面会出现撕裂感，如下图</li></ul><img src="https://cdn.julis.wang/blog/img/xxm0lvzypa.jpeg"><p>明显看出画面错位的位置，这就是画面撕裂。</p><h3 id="2-2-双缓存"><a href="#2-2-双缓存" class="headerlink" title="2.2 双缓存"></a><strong>2.2 双缓存</strong></h3><h5 id="2-2-1-画面撕裂-原因"><a href="#2-2-1-画面撕裂-原因" class="headerlink" title="2.2.1  画面撕裂 原因"></a><strong>2.2.1  画面撕裂 原因</strong></h5><p>屏幕刷新频是固定的，比如每16.6ms从buffer取数据显示完一帧，理想情况下帧率和刷新频率保持一致，即每绘制完成一帧，显示器显示一帧。但是CPU&#x2F;GPU写数据是不可控的，所以会出现buffer里有些数据根本没显示出来就被重写了，即buffer里的数据可能是来自不同的帧的， 当屏幕刷新时，此时它并不知道buffer的状态，因此从buffer抓取的帧并不是完整的一帧画面，即出现画面撕裂。</p><p>简单说就是Display在显示的过程中，buffer内数据被CPU&#x2F;GPU修改，导致画面撕裂。</p><h5 id="2-2-2-双缓存"><a href="#2-2-2-双缓存" class="headerlink" title="2.2.2  双缓存"></a><strong>2.2.2  双缓存</strong></h5><p>那咋解决画面撕裂呢？答案是使用 双缓存。</p><p>由于图像绘制和屏幕读取 使用的是同个buffer，所以屏幕刷新时可能读取到的是不完整的一帧画面。</p><p><strong>双缓存</strong>，让绘制和显示器拥有各自的buffer：GPU 始终将完成的一帧图像数据写入到 <strong>Back Buffer</strong>，而显示器使用 <strong>Frame Buffer</strong>，当屏幕刷新时，Frame Buffer 并不会发生变化，当Back buffer准备就绪后，它们才进行交换。如下图：</p><img src="https://cdn.julis.wang/blog/img/q2vukxpyvq.jpeg"><p>双缓存，CPU&#x2F;GPU写数据到Back Buffer，显示器从Frame Buffer取数据</p><h5 id="2-2-3-VSync"><a href="#2-2-3-VSync" class="headerlink" title="2.2.3  VSync"></a><strong>2.2.3  VSync</strong></h5><p>问题又来了：什么时候进行两个buffer的交换呢？</p><p>假如是 Back buffer准备完成一帧数据以后就进行，那么如果此时屏幕还没有完整显示上一帧内容的话，肯定是会出问题的。看来只能是等到屏幕处理完一帧数据后，才可以执行这一操作了。</p><p>当扫描完一个屏幕后，设备需要重新回到第一行以进入下一次的循环，此时有一段时间空隙，称为VerticalBlanking Interval(VBI)。那，这个时间点就是我们进行缓冲区交换的最佳时间。因为此时屏幕没有在刷新，也就避免了交换过程中出现 screen tearing的状况。</p><p><strong>VSync</strong>(垂直同步)是VerticalSynchronization的简写，它利用VBI时期出现的vertical sync pulse（垂直同步脉冲）来保证双缓冲在最佳时间点才进行交换。另外，交换是指各自的内存地址，可以认为该操作是瞬间完成。</p><p>所以说V-sync这个概念并不是Google首创的，它在早年的PC机领域就已经出现了。</p><h2 id="三、Android屏幕刷新机制"><a href="#三、Android屏幕刷新机制" class="headerlink" title="三、Android屏幕刷新机制"></a><strong>三、Android屏幕刷新机制</strong></h2><h3 id="3-1-Android4-1之前的问题"><a href="#3-1-Android4-1之前的问题" class="headerlink" title="3.1 Android4.1之前的问题"></a><strong>3.1 Android4.1之前的问题</strong></h3><p>具体到Android中，在Android4.1之前，屏幕刷新也遵循 上面介绍的 双缓存+VSync 机制。如下图：</p><img src="https://cdn.julis.wang/blog/img/1ax0mz0nu1.jpeg"><p>双缓存会在VSync脉冲时交换，但CPU&#x2F;GPU绘制是随机的</p><p>以时间的顺序来看下将会发生的过程：</p><ol><li>Display显示第0帧数据，此时CPU和<a href="https://cloud.tencent.com/solution/render?from_column=20065&from=20065">GPU渲染</a>第1帧画面，且在Display显示下一帧前完成</li><li>因为渲染及时，Display在第0帧显示完成后，也就是第1个VSync后，缓存进行交换，然后正常显示第1帧</li><li>接着第2帧开始处理，是直到第2个VSync快来前才开始处理的。</li><li>第2个VSync来时，由于第2帧数据还没有准备就绪，缓存没有交换，显示的还是第1帧。这种情况被Android开发组命名为“Jank”，即发生了<strong>丢帧</strong>。</li><li>当第2帧数据准备完成后，它并不会马上被显示，而是要等待下一个VSync 进行缓存交换再显示。</li></ol><p>所以总的来说，就是屏幕平白无故地多显示了一次第1帧。</p><p>原因是 第2帧的CPU&#x2F;GPU计算 没能在VSync信号到来前完成 。</p><p>我们知道，<strong>双缓存的交换 是在Vsyn到来时进行，交换后屏幕会取Frame buffer内的新数据，而实际 此时的Back buffer 就可以供GPU准备下一帧数据了。如果 Vsyn到来时  CPU&#x2F;GPU就开始操作的话，是有完整的16.6ms的，这样应该会基本避免jank的出现了</strong>（除非CPU&#x2F;GPU计算超过了16.6ms）。  那如何让 CPU&#x2F;GPU计算在 Vsyn到来时进行呢？</p><h3 id="3-2-drawing-with-VSync"><a href="#3-2-drawing-with-VSync" class="headerlink" title="3.2 drawing with VSync"></a><strong>3.2 drawing with VSync</strong></h3><p>为了优化显示性能，Google在Android 4.1系统中对Android Display系统进行了重构，实现了Project Butter（黄油工程）：系统在收到VSync pulse后，将马上开始下一帧的渲染。即<strong>一旦收到VSync通知（16ms触发一次），CPU和GPU 才立刻开始计算然后把数据写入buffer</strong>。如下图：</p><img src="https://cdn.julis.wang/blog/img/uuqflxwo53.jpeg"><p>VSync脉冲到来：双缓存交换，且开始CPU&#x2F;GPU绘制 CPU&#x2F;GPU根据VSYNC信号同步处理数据，可以让CPU&#x2F;GPU有完整的16ms时间来处理数据，减少了jank。</p><p>一句话总结，<strong>VSync同步使得CPU&#x2F;GPU充分利用了16.6ms时间，减少jank。</strong></p><p>问题又来了，如果界面比较复杂，CPU&#x2F;GPU的处理时间较长 超过了16.6ms呢？如下图：</p><img src="https://cdn.julis.wang/blog/img/po2jd1h7u8.jpeg"><p>虽然CPU&#x2F;GPU开始在VSync，但超过16.6ms</p><ol><li>在第二个时间段内，但却因 GPU 还在处理 B 帧，缓存没能交换，导致 A 帧被重复显示。</li><li>而B完成后，又因为缺乏VSync pulse信号，它只能等待下一个signal的来临。于是在这一过程中，有一大段时间是被浪费的。</li><li>当下一个VSync出现时，CPU&#x2F;GPU马上执行操作（A帧），且缓存交换，相应的显示屏对应的就是B。这时看起来就是正常的。只不过由于执行时间仍然超过16ms，导致下一次应该执行的缓冲区交换又被推迟了——如此循环反复，便出现了越来越多的“Jank”。</li></ol><p><strong>为什么 CPU 不能在第二个 16ms 处理绘制工作呢？</strong></p><p>原因是只有两个 buffer，Back buffer正在被GPU用来处理B帧的数据， Frame buffer的内容用于Display的显示，这样两个buffer都被占用，CPU 则无法准备下一帧的数据。那么，如果再提供一个buffer，CPU、GPU 和显示设备都能使用各自的buffer工作，互不影响。</p><h3 id="3-3-三缓存"><a href="#3-3-三缓存" class="headerlink" title="3.3 三缓存"></a><strong>3.3 三缓存</strong></h3><p><strong>三缓存</strong>就是在双缓冲机制基础上增加了一个 Graphic Buffer 缓冲区，这样可以最大限度的利用空闲时间，带来的坏处是多使用的一个 Graphic Buffer 所占用的内存。</p><img src="https://cdn.julis.wang/blog/img/ldq7oda57p.jpeg"><p>三缓存</p><ol><li>第一个Jank，是不可避免的。但是在第二个 16ms 时间段，CPU&#x2F;GPU 使用 <strong>第三个 Buffer</strong> 完成C帧的计算，虽然还是会多显示一次 A 帧，但后续显示就比较顺畅了，有效避免 Jank 的进一步加剧。</li><li>注意在第3段中，A帧的计算已完成，但是在第4个vsync来的时候才显示，如果是双缓冲，那在第三个vynsc就可以显示了。</li></ol><p><strong>三缓冲有效利用了等待vysnc的时间，减少了jank，但是带来了延迟。</strong> 所以，是不是 Buffer 越多越好呢？这个是否定的，Buffer 正常还是两个，当出现 Jank 后三个足以。</p><p>以上就是Android屏幕刷新的原理了。</p><h2 id="四、Choreographer"><a href="#四、Choreographer" class="headerlink" title="四、Choreographer"></a><strong>四、Choreographer</strong></h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a><strong>4.1 概述</strong></h3><p>上面讲到，Google在Android 4.1系统中对Android Display系统进行了优化：在收到VSync pulse后，将马上开始下一帧的渲染。即<strong>一旦收到VSync通知，CPU和GPU就立刻开始计算然后把数据写入buffer</strong>。本节就来讲 “drawing with VSync” 的实现——<strong>Choreographer</strong>。</p><ul><li>Choreographer，意为 舞蹈编导、编舞者。在这里就是指 对CPU&#x2F;GPU绘制的指导—— 收到VSync信号 才开始绘制，保证绘制拥有完整的16.6ms，避免绘制的随机性。</li><li>Choreographer，是一个Java类，包路径android.view.Choreographer。类注释是“协调动画、输入和绘图的计时”。</li><li>通常 应用层不会直接使用Choreographer，而是使用更高级的API，例如动画和View绘制相关的ValueAnimator.start()、View.invalidate()等。</li><li>业界一般通过Choreographer来监控应用的帧率。</li></ul><h3 id="4-2-源码分析"><a href="#4-2-源码分析" class="headerlink" title="4.2 源码分析"></a><strong>4.2 源码分析</strong></h3><p>学习 Choreographer 可以帮助理解 每帧运行的原理，也可加深对 Handler机制、View绘制流程的理解，这样再去做UI优化、卡顿优化，思路会更清晰。</p><p>好了，下面开始源码分析了~</p><h5 id="4-2-1-入口-和-实例创建"><a href="#4-2-1-入口-和-实例创建" class="headerlink" title="4.2.1 入口 和 实例创建"></a><strong>4.2.1 入口 和 实例创建</strong></h5><p>在<a href="https://juejin.cn/post/7076274407416528909">《Window和WindowManager》</a>、<a href="https://blog.csdn.net/allen_xu_2012_new/article/details/131167564">《Activity的启动过程详解》</a>中介绍过，Activity启动 走完onResume方法后，会进行<strong>window的添加</strong>。window添加过程会 调用ViewRootImpl的setView()方法，setView()方法会调用requestLayout()方法来请求绘制布局，requestLayout()方法内部又会走到scheduleTraversals()方法，最后会走到performTraversals()方法，接着到了我们熟知的测量、布局、绘制三大流程了。</p><p>另外，查看源码发现，当我们使用 ValueAnimator.start()、View.invalidate()时，最后也是走到ViewRootImpl的scheduleTraversals()方法。（View.invalidate()内部会循环获取ViewParent直到ViewRootImpl的invalidateChildInParent()方法，然后走到scheduleTraversals()，可自行查看源码 ）</p><p>即 <strong>所有UI的变化都是走到ViewRootImpl的scheduleTraversals()方法。</strong></p><p>那么问题又来了，scheduleTraversals() 到 performTraversals() 中间 经历了什么呢？是立刻执行吗？答案很显然是否定的，根据我们上面的介绍，在VSync信号到来时才会执行绘制，即performTraversals()方法。下面来瞅瞅这是如何实现的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ViewRootImpl.java</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">scheduleTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">        <span class="comment">//此字段保证同时间多次更改只会刷新一次，例如TextView连续两次setText(),也只会走一次绘制流程</span></span><br><span class="line">        mTraversalScheduled = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//添加同步屏障，屏蔽同步消息，保证VSync到来立即执行绘制</span></span><br><span class="line">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">        <span class="comment">//mTraversalRunnable是TraversalRunnable实例，最终走到run()，也即doTraversal();</span></span><br><span class="line">        mChoreographer.postCallback(</span><br><span class="line">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class="line">            scheduleConsumeBatchedInput();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyRendererOfFramePending();</span><br><span class="line">        pokeDrawLockIfNeeded();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="type">TraversalRunnable</span> <span class="variable">mTraversalRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TraversalRunnable</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//移除同步屏障</span></span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//开始三大绘制流程</span></span><br><span class="line">        performTraversals();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要有以下逻辑：</p><ol><li>首先使用mTraversalScheduled字段保证同时间多次更改只会刷新一次，例如TextView连续两次setText()，也只会走一次绘制流程。</li><li>然后把当前线程的<a href="https://cloud.tencent.com/product/message-queue-catalog?from_column=20065&from=20065">消息队列</a>Queue添加了<strong>同步屏障</strong>，这样就屏蔽了正常的同步消息，保证VSync到来后立即执行绘制，而不是要等前面的同步消息。后面会具体分析同步屏障和异步消息的代码逻辑。</li><li>调用了mChoreographer.postCallback()方法，发送一个会在下一帧执行的回调，即<strong>在下一个VSync到来时会执行TraversalRunnable–&gt;doTraversal()—&gt;performTraversals()–&gt;绘制流程</strong>。</li></ol><p>接下来，就是分析的重点——Choreographer。我们先看它的实例mChoreographer，是在ViewRootImpl的构造方法内使用Choreographer.getInstance()创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Choreographer mChoreographer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ViewRootImpl实例是在添加window时创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ViewRootImpl</span><span class="params">(Context context, Display display)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    mChoreographer = Choreographer.getInstance();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看看Choreographer.getInstance()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Choreographer <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sThreadInstance.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Choreographer&gt; sThreadInstance =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Choreographer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Choreographer <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Looper</span> <span class="variable">looper</span> <span class="operator">=</span> Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//当前线程要有looper，Choreographer实例需要传入</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The current thread must have a looper!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Choreographer</span> <span class="variable">choreographer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Choreographer</span>(looper, VSYNC_SOURCE_APP);</span><br><span class="line">        <span class="keyword">if</span> (looper == Looper.getMainLooper()) &#123;</span><br><span class="line">            mMainInstance = choreographer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> choreographer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到这里 如你对Handler机制中looper比较熟悉的话，应该知道 Choreographer和Looper一样 是线程单例的。且当前线程要有looper，Choreographer实例需要传入。接着看看Choreographer构造方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">Choreographer</span><span class="params">(Looper looper, <span class="type">int</span> vsyncSource)</span> &#123;</span><br><span class="line">    mLooper = looper;</span><br><span class="line">    <span class="comment">//使用当前线程looper创建 mHandler</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> <span class="title class_">FrameHandler</span>(looper);</span><br><span class="line">    <span class="comment">//USE_VSYNC 4.1以上默认是true，表示 具备接受VSync的能力，这个接受能力就是FrameDisplayEventReceiver</span></span><br><span class="line">    mDisplayEventReceiver = USE_VSYNC</span><br><span class="line">            ? <span class="keyword">new</span> <span class="title class_">FrameDisplayEventReceiver</span>(looper, vsyncSource)</span><br><span class="line">            : <span class="literal">null</span>;</span><br><span class="line">    mLastFrameTimeNanos = Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算一帧的时间，Android手机屏幕是60Hz的刷新频率，就是16ms</span></span><br><span class="line">    mFrameIntervalNanos = (<span class="type">long</span>)(<span class="number">1000000000</span> / getRefreshRate());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个链表类型CallbackQueue的数组，大小为5，</span></span><br><span class="line">    <span class="comment">//也就是数组中有五个链表，每个链表存相同类型的任务：输入、动画、遍历绘制等任务（CALLBACK_INPUT、CALLBACK_ANIMATION、CALLBACK_TRAVERSAL）</span></span><br><span class="line">    mCallbackQueues = <span class="keyword">new</span> <span class="title class_">CallbackQueue</span>[CALLBACK_LAST + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= CALLBACK_LAST; i++) &#123;</span><br><span class="line">        mCallbackQueues[i] = <span class="keyword">new</span> <span class="title class_">CallbackQueue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// b/68769804: For low FPS experiments.</span></span><br><span class="line">    setFPSDivisor(SystemProperties.getInt(ThreadedRenderer.DEBUG_FPS_DIVISOR, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中都有注释，创建了一个mHandler、VSync事件接收器mDisplayEventReceiver、任务链表数组mCallbackQueues。FrameHandler、FrameDisplayEventReceiver、CallbackQueue后面会一一说明。</p><h5 id="4-2-2-安排任务—postCallback"><a href="#4-2-2-安排任务—postCallback" class="headerlink" title="4.2.2 安排任务—postCallback"></a><strong>4.2.2 安排任务—postCallback</strong></h5><p>回头看mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)方法，注意到第一个参数是CALLBACK_TRAVERSAL，表示回调任务的类型，共有以下5种类型：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入事件，首先执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CALLBACK_INPUT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//动画，第二执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CALLBACK_ANIMATION</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//插入更新的动画，第三执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CALLBACK_INSETS_ANIMATION</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">//绘制，第四执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CALLBACK_TRAVERSAL</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//提交，最后执行，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CALLBACK_COMMIT</span> <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>五种类型任务对应存入对应的CallbackQueue中，每当收到 VSYNC 信号时，Choreographer 将首先处理 INPUT 类型的任务，然后是 ANIMATION 类型，最后才是 TRAVERSAL 类型。</p><p>postCallback()内部调用postCallbackDelayed()，接着又调用postCallbackDelayedInternal()，来瞅瞅：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postCallbackDelayedInternal</span><span class="params">(<span class="type">int</span> callbackType,</span></span><br><span class="line"><span class="params">        Object action, Object token, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">        <span class="comment">// 加上延迟时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dueTime</span> <span class="operator">=</span> now + delayMillis;</span><br><span class="line">        <span class="comment">//取对应类型的CallbackQueue添加任务</span></span><br><span class="line">        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dueTime &lt;= now) &#123;</span><br><span class="line">            <span class="comment">//立即执行</span></span><br><span class="line">            scheduleFrameLocked(now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//延迟运行，最终也会走到scheduleFrameLocked()</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</span><br><span class="line">            msg.arg1 = callbackType;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, dueTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先取对应类型的CallbackQueue添加任务，action就是mTraversalRunnable，token是null。<strong>CallbackQueue的addCallbackLocked()就是把 dueTime、action、token组装成CallbackRecord后 存入CallbackQueue的下一个节点</strong>，具体代码比较简单，不再跟进。</p><p>然后注意到如果没有延迟会执行scheduleFrameLocked()方法，有延迟就会使用 mHandler发送MSG_DO_SCHEDULE_CALLBACK消息，并且注意到 <strong>使用msg.setAsynchronous(true)把消息设置成异步</strong>，这是因为前面设置了同步屏障，只有异步消息才会执行。我们看下mHandler的对这个消息的处理：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FrameHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FrameHandler</span><span class="params">(Looper looper)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_DO_FRAME:</span><br><span class="line">                <span class="comment">// 执行doFrame,即绘制过程</span></span><br><span class="line">                doFrame(System.nanoTime(), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_DO_SCHEDULE_VSYNC:</span><br><span class="line">                <span class="comment">//申请VSYNC信号，例如当前需要绘制任务时</span></span><br><span class="line">                doScheduleVsync();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_DO_SCHEDULE_CALLBACK:</span><br><span class="line">                <span class="comment">//需要延迟的任务，最终还是执行上述两个事件</span></span><br><span class="line">                doScheduleCallback(msg.arg1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用doScheduleCallback方法，看看：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doScheduleCallback</span><span class="params">(<span class="type">int</span> callbackType)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (mCallbackQueues[callbackType].hasDueCallbacksLocked(now)) &#123;</span><br><span class="line">                scheduleFrameLocked(now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现也是走到这里，即延迟运行最终也会走到scheduleFrameLocked()，跟进看看：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleFrameLocked</span><span class="params">(<span class="type">long</span> now)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">        mFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//开启了VSYNC</span></span><br><span class="line">        <span class="keyword">if</span> (USE_VSYNC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;Scheduling next frame on vsync.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前执行的线程，是否是mLooper所在线程</span></span><br><span class="line">            <span class="keyword">if</span> (isRunningOnLooperThreadLocked()) &#123;</span><br><span class="line">                <span class="comment">//申请 VSYNC 信号</span></span><br><span class="line">                scheduleVsyncLocked();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 若不在，就用mHandler发送消息到原线程，最后还是调用scheduleVsyncLocked方法</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</span><br><span class="line">                msg.setAsynchronous(<span class="literal">true</span>);<span class="comment">//异步</span></span><br><span class="line">                mHandler.sendMessageAtFrontOfQueue(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果未开启VSYNC则直接doFrame方法（4.1后默认开启）</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">nextFrameTime</span> <span class="operator">=</span> Math.max(</span><br><span class="line">                    mLastFrameTimeNanos / TimeUtils.NANOS_PER_MS + sFrameDelay, now);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;Scheduling next frame in &quot;</span> + (nextFrameTime - now) + <span class="string">&quot; ms.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(MSG_DO_FRAME);</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);<span class="comment">//异步</span></span><br><span class="line">            mHandler.sendMessageAtTime(msg, nextFrameTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果系统未开启 VSYNC 机制，此时直接发送 MSG_DO_FRAME 消息到 FrameHandler。注意查看上面贴出的 FrameHandler 代码，此时直接执行 doFrame 方法。</li><li>Android 4.1 之后系统默认开启 VSYNC，在 Choreographer 的构造方法会创建一个 FrameDisplayEventReceiver，scheduleVsyncLocked 方法将会通过它申请 VSYNC 信号。</li><li>isRunningOnLooperThreadLocked 方法，其内部根据 Looper 判断是否在原线程，否则发送消息到 FrameHandler。最终还是会调用 scheduleVsyncLocked 方法申请 VSYNC 信号。</li></ol><p>到这里，<strong>FrameHandler的作用很明显里了：发送异步消息（因为前面设置了同步屏障）。有延迟的任务发延迟消息、不在原线程的发到原线程、没开启VSYNC的直接走 doFrame 方法取执行绘制。</strong></p><h5 id="4-2-3-申请和接受VSync"><a href="#4-2-3-申请和接受VSync" class="headerlink" title="4.2.3 申请和接受VSync"></a><strong>4.2.3 申请和接受VSync</strong></h5><p>好了， 接着就看 scheduleVsyncLocked 方法是如何申请 VSYNC 信号的。猜测肯定申请 VSYNC 信号后，信号到来时也是走doFrame() 方法，doFrame()后面再看。先跟进scheduleVsyncLocked():</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleVsyncLocked</span><span class="params">()</span> &#123;</span><br><span class="line">    mDisplayEventReceiver.scheduleVsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，调用mDisplayEventReceiver的scheduleVsync()方法，mDisplayEventReceiver是Choreographer构造方法中创建，是FrameDisplayEventReceiver 的实例。FrameDisplayEventReceiver是 DisplayEventReceiver 的子类，DisplayEventReceiver 是一个 abstract class：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DisplayEventReceiver</span><span class="params">(Looper looper, <span class="type">int</span> vsyncSource)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (looper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;looper must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mMessageQueue = looper.getQueue();</span><br><span class="line">    <span class="comment">// 注册VSYNC信号监听者</span></span><br><span class="line">    mReceiverPtr = nativeInit(<span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;DisplayEventReceiver&gt;(<span class="built_in">this</span>), mMessageQueue,</span><br><span class="line">            vsyncSource);</span><br><span class="line"></span><br><span class="line">    mCloseGuard.open(<span class="string">&quot;dispose&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DisplayEventReceiver 的构造方法会通过 JNI 创建一个 IDisplayEventConnection 的 VSYNC 的监听者。</p><p>FrameDisplayEventReceiver的scheduleVsync()就是在 DisplayEventReceiver中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleVsync</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mReceiverPtr == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Attempted to schedule a vertical sync pulse but the display event &quot;</span></span><br><span class="line">                + <span class="string">&quot;receiver has already been disposed.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 申请VSYNC中断信号，会回调onVsync方法</span></span><br><span class="line">        nativeScheduleVsync(mReceiverPtr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么scheduleVsync()就是使用native方法nativeScheduleVsync()去申请VSYNC信号。这个native方法就看不了了，只需要知道<strong>VSYNC信号的接受回调是onVsync()</strong>，我们直接看onVsync()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收到VSync脉冲时 回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timestampNanos VSync脉冲的时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> physicalDisplayId Stable display ID that uniquely describes a (display, port) pair.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> frame 帧号码，自增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onVsync</span><span class="params">(<span class="type">long</span> timestampNanos, <span class="type">long</span> physicalDisplayId, <span class="type">int</span> frame)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现是在FrameDisplayEventReceiver中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FrameDisplayEventReceiver</span> <span class="keyword">extends</span> <span class="title class_">DisplayEventReceiver</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mHavePendingVsync;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> mTimestampNanos;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mFrame;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FrameDisplayEventReceiver</span><span class="params">(Looper looper, <span class="type">int</span> vsyncSource)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(looper, vsyncSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onVsync</span><span class="params">(<span class="type">long</span> timestampNanos, <span class="type">long</span> physicalDisplayId, <span class="type">int</span> frame)</span> &#123;</span><br><span class="line">        <span class="comment">// Post the vsync event to the Handler.</span></span><br><span class="line">        <span class="comment">// The idea is to prevent incoming vsync events from completely starving</span></span><br><span class="line">        <span class="comment">// the message queue.  If there are no messages in the queue with timestamps</span></span><br><span class="line">        <span class="comment">// earlier than the frame time, then the vsync event will be processed immediately.</span></span><br><span class="line">        <span class="comment">// Otherwise, messages that predate the vsync event will be handled first.</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span> (timestampNanos &gt; now) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Frame time is &quot;</span> + ((timestampNanos - now) * <span class="number">0.000001f</span>)</span><br><span class="line">                    + <span class="string">&quot; ms in the future!  Check that graphics HAL is generating vsync &quot;</span></span><br><span class="line">                    + <span class="string">&quot;timestamps using the correct timebase.&quot;</span>);</span><br><span class="line">            timestampNanos = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mHavePendingVsync) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Already have a pending vsync event.  There should only be &quot;</span></span><br><span class="line">                    + <span class="string">&quot;one at a time.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mHavePendingVsync = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mTimestampNanos = timestampNanos;</span><br><span class="line">        mFrame = frame;</span><br><span class="line">        <span class="comment">//将本身作为runnable传入msg， 发消息后 会走run()，即doFrame()，也是异步消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain(mHandler, <span class="built_in">this</span>);</span><br><span class="line">        msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        mHavePendingVsync = <span class="literal">false</span>;</span><br><span class="line">        doFrame(mTimestampNanos, mFrame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onVsync()中，将接收器本身作为runnable传入异步消息msg，并使用mHandler发送msg，最终执行的就是doFrame()方法了。</p><p>注意一点是，<strong>onVsync()方法中只是使用mHandler发送消息到MessageQueue中，不一定是立刻执行，如何MessageQueue中前面有较为耗时的操作，那么就要等完成，才会执行本次的doFrame()</strong>。</p><h5 id="4-2-4-doFrame"><a href="#4-2-4-doFrame" class="headerlink" title="4.2.4 doFrame"></a><strong>4.2.4 doFrame</strong></h5><p>和上面猜测一样，申请VSync信号接收到后确实是走 doFrame()方法，那么就来看看Choreographer的doFrame()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doFrame</span><span class="params">(<span class="type">long</span> frameTimeNanos, <span class="type">int</span> frame)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> startNanos;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// no work to do</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 预期执行时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">intendedFrameTimeNanos</span> <span class="operator">=</span> frameTimeNanos;</span><br><span class="line">        startNanos = System.nanoTime();</span><br><span class="line">        <span class="comment">// 超时时间是否超过一帧的时间（这是因为MessageQueue虽然添加了同步屏障，但是还是有正在执行的同步任务，导致doFrame延迟执行了）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">jitterNanos</span> <span class="operator">=</span> startNanos - frameTimeNanos;</span><br><span class="line">        <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</span><br><span class="line">            <span class="comment">// 计算掉帧数</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">skippedFrames</span> <span class="operator">=</span> jitterNanos / mFrameIntervalNanos;</span><br><span class="line">            <span class="keyword">if</span> (skippedFrames &gt;= SKIPPED_FRAME_WARNING_LIMIT) &#123;</span><br><span class="line">                <span class="comment">// 掉帧超过30帧打印Log提示</span></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;Skipped &quot;</span> + skippedFrames + <span class="string">&quot; frames!  &quot;</span></span><br><span class="line">                        + <span class="string">&quot;The application may be doing too much work on its main thread.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">lastFrameOffset</span> <span class="operator">=</span> jitterNanos % mFrameIntervalNanos;</span><br><span class="line">            ...</span><br><span class="line">            frameTimeNanos = startNanos - lastFrameOffset;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        mFrameInfo.setVsync(intendedFrameTimeNanos, frameTimeNanos);</span><br><span class="line">        <span class="comment">// Frame标志位恢复</span></span><br><span class="line">        mFrameScheduled = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 记录最后一帧时间</span></span><br><span class="line">        mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 按类型顺序 执行任务</span></span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">&quot;Choreographer#doFrame&quot;</span>);</span><br><span class="line">        AnimationUtils.lockAnimationClock(frameTimeNanos / TimeUtils.NANOS_PER_MS);</span><br><span class="line"></span><br><span class="line">        mFrameInfo.markInputHandlingStart();</span><br><span class="line">        doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">        mFrameInfo.markAnimationsStart();</span><br><span class="line">        doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);</span><br><span class="line">        doCallbacks(Choreographer.CALLBACK_INSETS_ANIMATION, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">        mFrameInfo.markPerformTraversalsStart();</span><br><span class="line">        doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);</span><br><span class="line"></span><br><span class="line">        doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        AnimationUtils.unlockAnimationClock();</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面都有注释了很好理解，接着看任务的具体执行doCallbacks 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doCallbacks</span><span class="params">(<span class="type">int</span> callbackType, <span class="type">long</span> frameTimeNanos)</span> &#123;</span><br><span class="line">    CallbackRecord callbacks;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="comment">// 根据指定的类型CallbackkQueue中查找到达执行时间的CallbackRecord</span></span><br><span class="line">        callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(now / TimeUtils.NANOS_PER_MS);</span><br><span class="line">        <span class="keyword">if</span> (callbacks == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mCallbacksRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交任务类型</span></span><br><span class="line">        <span class="keyword">if</span> (callbackType == Choreographer.CALLBACK_COMMIT) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">jitterNanos</span> <span class="operator">=</span> now - frameTimeNanos;</span><br><span class="line">            <span class="keyword">if</span> (jitterNanos &gt;= <span class="number">2</span> * mFrameIntervalNanos) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">lastFrameOffset</span> <span class="operator">=</span> jitterNanos % mFrameIntervalNanos</span><br><span class="line">                        + mFrameIntervalNanos;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;Commit callback delayed by &quot;</span> + (jitterNanos * <span class="number">0.000001f</span>)</span><br><span class="line">                            + <span class="string">&quot; ms which is more than twice the frame interval of &quot;</span></span><br><span class="line">                            + (mFrameIntervalNanos * <span class="number">0.000001f</span>) + <span class="string">&quot; ms!  &quot;</span></span><br><span class="line">                            + <span class="string">&quot;Setting frame time to &quot;</span> + (lastFrameOffset * <span class="number">0.000001f</span>)</span><br><span class="line">                            + <span class="string">&quot; ms in the past.&quot;</span>);</span><br><span class="line">                    mDebugPrintNextFrameTimeDelta = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                frameTimeNanos = now - lastFrameOffset;</span><br><span class="line">                mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 迭代执行队列所有任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">CallbackRecord</span> <span class="variable">c</span> <span class="operator">=</span> callbacks; c != <span class="literal">null</span>; c = c.next) &#123;</span><br><span class="line">            <span class="comment">// 回调CallbackRecord的run，其内部回调Callback的run</span></span><br><span class="line">            c.run(frameTimeNanos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            mCallbacksRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">CallbackRecord</span> <span class="variable">next</span> <span class="operator">=</span> callbacks.next;</span><br><span class="line">                <span class="comment">//回收CallbackRecord</span></span><br><span class="line">                recycleCallbackLocked(callbacks);</span><br><span class="line">                callbacks = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (callbacks != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要内容就是取对应任务类型的队列，遍历队列执行所有任务，执行任务是 CallbackRecord的 run 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CallbackRecord</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> CallbackRecord next;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> dueTime;</span><br><span class="line">    <span class="keyword">public</span> Object action; <span class="comment">// Runnable or FrameCallback</span></span><br><span class="line">    <span class="keyword">public</span> Object token;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="type">long</span> frameTimeNanos)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</span><br><span class="line">            <span class="comment">// 通过postFrameCallback 或 postFrameCallbackDelayed，会执行这里</span></span><br><span class="line">            ((FrameCallback)action).doFrame(frameTimeNanos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//取出Runnable执行run()</span></span><br><span class="line">            ((Runnable)action).run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面看到mChoreographer.postCallback传的token是null，所以取出action，就是Runnable，执行run()，这里的action就是 ViewRootImpl 发起的绘制任务mTraversalRunnable了，那么<strong>这样整个逻辑就闭环了</strong>。</p><p>那么 啥时候 token &#x3D;&#x3D; FRAME_CALLBACK_TOKEN 呢？答案是Choreographer的postFrameCallback()方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postFrameCallback</span><span class="params">(FrameCallback callback)</span> &#123;</span><br><span class="line">    postFrameCallbackDelayed(callback, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postFrameCallbackDelayed</span><span class="params">(FrameCallback callback, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;callback must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//也是走到是postCallbackDelayedInternal，并且注意是CALLBACK_ANIMATION类型，</span></span><br><span class="line">    <span class="comment">//token是FRAME_CALLBACK_TOKEN，action就是FrameCallback</span></span><br><span class="line">    postCallbackDelayedInternal(CALLBACK_ANIMATION,</span><br><span class="line">            callback, FRAME_CALLBACK_TOKEN, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FrameCallback</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFrame</span><span class="params">(<span class="type">long</span> frameTimeNanos)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到postFrameCallback()传入的是FrameCallback实例，接口FrameCallback只有一个doFrame()方法。并且也是走到postCallbackDelayedInternal，FrameCallback实例作为action传入，token则是FRAME_CALLBACK_TOKEN，并且任务是CALLBACK_ANIMATION类型。</p><p><strong>Choreographer的postFrameCallback()通常用来计算丢帧情况</strong>，使用方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//Application.java</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="built_in">super</span>.onCreate();</span><br><span class="line">           <span class="comment">//在Application中使用postFrameCallback</span></span><br><span class="line">           Choreographer.getInstance().postFrameCallback(<span class="keyword">new</span> <span class="title class_">FPSFrameCallback</span>(System.nanoTime()));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FPSFrameCallback</span> <span class="keyword">implements</span> <span class="title class_">Choreographer</span>.FrameCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;FPS_TEST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">mLastFrameTimeNanos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> mFrameIntervalNanos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FPSFrameCallback</span><span class="params">(<span class="type">long</span> lastFrameTimeNanos)</span> &#123;</span><br><span class="line">        mLastFrameTimeNanos = lastFrameTimeNanos;</span><br><span class="line">        mFrameIntervalNanos = (<span class="type">long</span>)(<span class="number">1000000000</span> / <span class="number">60.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFrame</span><span class="params">(<span class="type">long</span> frameTimeNanos)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化时间</span></span><br><span class="line">        <span class="keyword">if</span> (mLastFrameTimeNanos == <span class="number">0</span>) &#123;</span><br><span class="line">            mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">jitterNanos</span> <span class="operator">=</span> frameTimeNanos - mLastFrameTimeNanos;</span><br><span class="line">        <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">skippedFrames</span> <span class="operator">=</span> jitterNanos / mFrameIntervalNanos;</span><br><span class="line">            <span class="keyword">if</span>(skippedFrames&gt;<span class="number">30</span>)&#123;</span><br><span class="line">                <span class="comment">//丢帧30以上打印日志</span></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;Skipped &quot;</span> + skippedFrames + <span class="string">&quot; frames!  &quot;</span></span><br><span class="line">                        + <span class="string">&quot;The application may be doing too much work on its main thread.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mLastFrameTimeNanos=frameTimeNanos;</span><br><span class="line">        <span class="comment">//注册下一帧回调</span></span><br><span class="line">        Choreographer.getInstance().postFrameCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-5-小结"><a href="#4-2-5-小结" class="headerlink" title="4.2.5 小结"></a><strong>4.2.5 小结</strong></h5><p>使用Choreographer的postCallback()、postFrameCallback() 作用理解：发送任务 存队列中，监听VSync信号，当前VSync到来时 会使用mHandler发送异步message，这个message的Runnable就是队列中的所有任务。</p><p>好了，Choreographer整个代码逻辑都讲完了，引用《Android 之 Choreographer 详细分析》的流程图：</p><p>原文流程图为：<a href="https://i-blog.csdnimg.cn/blog_migrate/5ff22e98afde4ff780f8a291d1081619.png">Android 之 Choreographer</a>，但并不是很形象，引用另一张流程图：</p><img src="https://cdn.julis.wang/blog/img/aab4273a0af898dcc9bb0fdcc0447b5a.png"><h2 id="六、疑问解答"><a href="#六、疑问解答" class="headerlink" title="六、疑问解答"></a><strong>六、疑问解答</strong></h2><ol><li><strong>丢帧</strong>(掉帧) ，是说 这一帧延迟显示 还是丢弃不再显示 ？ 答：延迟显示，因为缓存交换的时机只能等下一个VSync了。</li><li>布局层级较多&#x2F;主线程耗时 是如何造成 丢帧的呢？ 答：布局层级较多&#x2F;主线程耗时 会影响CPU&#x2F;GPU的执行时间，大于16.6ms时只能等下一个VSync了。</li><li>16.6ms刷新一次 是啥意思？是每16.6ms都走一次 measure&#x2F;layout&#x2F;draw ？ 答：屏幕的固定刷新频率是60Hz，即16.6ms。不是每16.6ms都走一次 measure&#x2F;layout&#x2F;draw，而是有绘制任务才会走，并且绘制时间间隔是取决于布局复杂度及主线程耗时。</li><li>measure&#x2F;layout&#x2F;draw 走完，界面就立刻刷新了吗? 答：不是。measure&#x2F;layout&#x2F;draw 走完后 会在VSync到来时进行缓存交换和刷新。</li><li>如果界面没动静止了，还会刷新吗？ 答：屏幕会固定没16.6ms刷新，但CPU&#x2F;GPU不走绘制流程。见下面的SysTrace图。</li><li>可能你知道<strong>VSYNC</strong>，这个具体指啥？在屏幕刷新中如何工作的？ 答：当扫描完一个屏幕后，设备需要重新回到第一行以进入下一次的循环，此时会出现的vertical sync pulse（垂直同步脉冲）来保证双缓冲在最佳时间点才进行交换。并且Android4.1后 CPU&#x2F;GPU的绘制是在VSYNC到来时开始。</li><li>可能你还听过屏幕刷新使用 <strong>双缓存</strong>、<strong>三缓存</strong>，这又是啥意思呢？ 答：双缓存是Back buffer、Frame buffer，用于解决画面撕裂。三缓存增加一个Back buffer，用于减少Jank。</li><li>可能你还听过神秘的<strong>Choreographer</strong>，这又是干啥的？ 答：用于实现——“CPU&#x2F;GPU的绘制是在VSYNC到来时开始”。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在研究 Android 屏幕显示与渲染相关的内容，平时经常看到这些类 &lt;code&gt;ViewRootImpl&lt;/code&gt;、&lt;code&gt;Choreographer&lt;/code&gt;、&lt;code&gt;Surface&lt;/code&gt; 、 &lt;code&gt;SurfaceFlinger&lt;/co</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="安卓" scheme="http://vompom.github.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>关于 pthread_key_t 导致的 Android Crash 的探索</title>
    <link href="http://vompom.github.com/2024/11/10/%E5%85%B3%E4%BA%8E-pthread-key-t-%E5%AF%BC%E8%87%B4%E7%9A%84-Android-Crash-%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://vompom.github.com/2024/11/10/%E5%85%B3%E4%BA%8E-pthread-key-t-%E5%AF%BC%E8%87%B4%E7%9A%84-Android-Crash-%E7%9A%84%E6%8E%A2%E7%B4%A2/</id>
    <published>2024-11-10T08:11:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前我负责的 SDK 已集成多个司内业务，一切运行正常，最近在接入到一些游戏项目中的时候发现存在比较多关于 <strong>libc.so</strong> 的 crash，在游戏中某个场景会使用SDK 进行逻辑处理，在部分手机会在短时间就直接 Crash，且集中在性能比较好的手机中。经过一番折腾，最后被定位在了一个跟 SDK 没有什么关系的地方：<code>pthread_key_t</code></p><h2 id="Crash-表现"><a href="#Crash-表现" class="headerlink" title="Crash 表现"></a>Crash 表现</h2><p>在 Crash 上报平台中收到诸多的 Crash 上报，调用的形式多种多样，异常名都是<code>signal 6 (SIGABRT)</code></p><p>但崩溃调用栈最终都停留在<br>  <code>/apex/com.android.runtime/lib64/bionic/libc.so pc (abort+168) </code></p><p>以及中间都会经过：<br><code>/apex/com.android.runtime/lib64/bionic/libc.so (pthread_once+136)</code></p><h3 id="难以复现的问题"><a href="#难以复现的问题" class="headerlink" title="难以复现的问题"></a>难以复现的问题</h3><p>由于我们的项目依赖于其他业务的SDK，最终的 SDK 打包合并在 Unity 的游戏中，我们不能直接使用游戏侧代码逻辑进行编译打包进行调试，这为问题的排查增大了一定的难度，只能在 Unity 的 demo 工程具体的表现为：</p><p>1、部分性能好的手机（如小米14 pro）才会出现 Crash，而且在对应的游戏中必现，有些游戏又不会复现</p><p>2、SDK里面同样的代码逻辑在测试 App 工程中完全不会复现</p><p>3、SDK里面同样的代码逻辑在 Unity 测试游戏 demo 中也完全不会复现</p><p>4、使用了业务方（游戏侧）的 Unity 的各种配置，依然没有复现</p><p>5、崩溃栈中有涉及到 <strong>thread</strong> 相关的关键词，怀疑是线程相关问题，但在原生层开辟N个线程也没有复现</p><p>6、其他各种尝试都没有复现：开辟大量内存、Unity 与 Android 调用方式调整……</p><h2 id="解决线索与方案"><a href="#解决线索与方案" class="headerlink" title="解决线索与方案"></a>解决线索与方案</h2><p>一开始是怀疑业务方的环境与 SDK 运行环境有冲突，毕竟 SDK 已经在诸多业务中上线并正常运行了很久，不应该是 SDK 本身代码逻辑不对导致的才对。但没过多久，我们在另一个业务中也发现了这个问题，那说明并不是一个游戏环境导致。</p><p>解决问题直接看对应的崩溃栈，其崩溃栈都是使用相关的组件导致的 Crash，询问了相关的开发大佬之后并没有得到解决办法，原因是我们使用的版本相对较老，经历了比较久的迭代，逻辑改掉了很多。二是有可能这个问题在新版本中已经修复掉了。于是我们进行了一大波改造升级，经过一段时间后，再次集成到业务方，原以为这个问题就此解决了，调用了一下创编 SDK 之后依然 crash，此时心拔凉拔凉……<br>但这时候比较能确定的是，这个 crash 跟依赖的SDK 没有直接关系，可能是由其他的环境问题什么。</p><h3 id="问题线索-pthread-key"><a href="#问题线索-pthread-key" class="headerlink" title="问题线索 pthread_key"></a>问题线索 pthread_key</h3><p>在最开始的排查问题过程中一直在关注在环境的差异上面，经过一番折腾依然没有效果，方向错误了，于是再次回到 Crash 栈中来，在崩溃栈中都含有：<code>pthread_once</code>、<code>emutls_get_address</code>、<code>cxa_get_globals</code>、<code>emutls_init</code>相关的关键词，由于平时完全没有接触过这几个函数，对他们的了解比较少。但经过一番搜索之后，他们都有提到一个关键的术语：<strong>TLS (thread-local storage)</strong></p><p>以及对几个函数调用的源码进行查看，发现这几个函数最终涉及到的都是 <code>pthread</code>  使用或者创建相关的</p><p>其中在 cs.android的 <a href="https://cs.android.com/android/platform/superproject/main/+/main:external/compiler-rt/lib/builtins/emutls.c?q=emutls_init&ss=android/platform/superproject/main">emutls.c</a> 源码里有：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">emutls_init</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">pthread_key_create</span>(&amp;emutls_pthread_key, emutls_key_destructor) != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里基本上可以和崩溃栈对应上了，正是这里执行的 <code>abort()</code>，那么原因是否是由 <code>pthread_key_create()</code>引起的呢？继续对 <code>pthread_key_create</code> 研究，原来在 Bionic 中，能够被开发者所使用的 Pthread Key 数量，是 <code>PTHREAD_KEYS_MAX</code> 宏所定义的 128 个。</p><p>那我们遇到的问题是否也是同一个问题呢？得到答案最好的方式是验证，想办法做一个验证，用代码把系统能提供的 pthread_key 耗尽然后再使用我们创编SDK的功能，使用如下代码创建 <code>PTHREAD_KEYS_MAX</code>个 <code>pthread_key_t</code>，再直接使用创编 SDK，果不其然 Crash了，而且 crash 栈与上报的数据比较的一致（没有完全一致，毕竟一些场景还是会有点差异）。</p><p>以下的代码会耗尽目前程序中的 key，只创建 pthread_key，而不释放掉</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">available_key</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PTHREAD_KEYS_MAX; i++) &#123;</span><br><span class="line">        <span class="type">pthread_key_t</span> key;</span><br><span class="line">        <span class="type">int</span> result = pthread_key_create(&amp;key, detachDestructor);</span><br><span class="line">        <span class="keyword">if</span> (result == JNI_OK) &#123;</span><br><span class="line">            __android_log_print(ANDROID_LOG_ERROR, <span class="string">&quot;--julis&quot;</span>, <span class="string">&quot;create thread key Success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            __android_log_print(ANDROID_LOG_ERROR, <span class="string">&quot;--julis&quot;</span>, <span class="string">&quot;create thread key failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从打印的日志里面看，在 Unity demo App 里面大概创建到 60 多的时候就创建失败了，也就是说Unity 本身可能就使用了很多 key，留给应用层开发的就只有几十个 key 了。</p><p>虽然尝试是Crash了，但怎么能证明这个就是导致业务方 Crash 就是这个原因呢？以及怎么解释有的手机为什么会Crash，有的手机不会Crash呢？</p><p>我们继续，从目前的推论来看，我们的创编SDK需要使用 <code>pthread_key_t</code>, 可能数量不够了，也就说创编SDK需要使用一定数量的key，那我们将刚才代码里面的<code> i &lt; PTHREAD_KEYS_MAX;</code> 进行调整，我们预留足够的 key 空间给创编SDK，<code>i &lt; target_number;</code> 于是在之前 crash 的手机和未 crash 的手机做了一次对比。</p><p>以下是对部手机的测试结果，记录日志前面的数字就是代码里面的 <code>target_number</code></p><img src="https://cdn.julis.wang/blog/img/j51nlsfd.jpg"><p>从对比结果看，两部手机他们可以供应用层使用的 key 的数量是不同的，之前会 crash 的手机它可以使用的 key 明显是少于之前未 crash 手机的数量的，这也就能解释为什么有的手机为什么会 crash，有的手机不会 crash 了。以及，可以推测出来创编SDK使用了5个key左右。</p><p>这里提一下在解决问题之初，我们发现 crash 的手机基本上都是市面上比较好的手机，且手机的 GPU 都集中于 Adreno 比较新的型号，一度误以为是相关底层 SDK 未进行兼容性适配导致。为什么性能更好的手机使用的 <code>pthread_key_t</code> 会更多？猜测可能是好的手机 Unity 运行相关的东西或者优化(这里的优化指的是游戏特效或者功能玩法)更多，所以消耗的资源就更多一点，当然这里只是个人猜测，具体原因还需要深入了解。</p><p>还剩下一个问题：业务方的 App 为什么会Crash？于是将上面的 <code>available_key()</code>方法进行一次包装，并将其打包集成进游戏侧测试，从日志里面看到留给我们创编SDK使用的 key 只有3个了！而我们的 SDK 需要5个左右，问题原因基本就是这个了，那如何解决呢？</p><h3 id="方案解决"><a href="#方案解决" class="headerlink" title="方案解决"></a>方案解决</h3><p>究其根本原因是 Android 系统的 <code>pthread_key_t</code> 的使用数量的限制，那么最直接的解决方式那就是降低对 <code>pthread_key_t</code> 的使用，但是由于我们依赖使用其他地方的 SDK，对其项目直接优化更改可能成本相对较高，直接修改源码解决的话一时半会儿无法解决。这里先对 <code>pthread_key_t</code> 数量限制相关的问题进行一些研究总结：</p><p>在 Android 官方源码 <a href="https://android.googlesource.com/platform/bionic/+/master/libc/include/pthread.h">pthread.h#pthread_key_create()</a> 里面有提到：</p><blockquote><p>There is a limit of <code>PTHREAD_KEYS_MAX</code> keys per process, but most callers should just use the C or C++ <code>thread_local</code> storage specifier anyway. When targeting new enough OS versions, the compiler will automatically use ELF TLS; when targeting old OS versions the emutls implementation will multiplex pthread keys behind the scenes, using one per library rather than one per thread-local variable. If you are implementing the runtime for a different language, you should consider similar implementation choices and avoid a direct one-to-one mapping from thread locals to pthread keys.<br>Returns 0 on success and returns an error number on failure.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int pthread_key_create(pthread_key_t* _Nonnull **key_ptr, void (* _Nullable **key_destructor)(void* _Nullable));</span><br></pre></td></tr></table></figure><p>可以看到官方建议使用 <code>thread_local</code> 去实现 TLS，以及在新的系统版本中会使用 <code>ELF TLS</code> 对 <code>pthread_key_t</code> 将不直接依赖，<br>但条件相对比较高，参考官方更新：需要 miniSDK&gt;29 和NDK r26</p><blockquote><p>ELF TLS (Available for API level &gt;&#x3D; 29)<br>Android supports <a href="https://android.googlesource.com/platform/bionic/+/HEAD/docs/elf-tls.md">ELF TLS</a> starting at API level 29. Since NDK r26, clang will automatically enable ELF TLS for <code>minSdkVersion 29</code> or higher. Otherwise, the existing emutls implementation (which uses <code>pthread_key_create()</code> behind the scenes) will continue to be used. This means that convenient C&#x2F;C++ thread-local syntax is available at any API level; at worst it will perform similarly to “roll your own” thread locals using <code>pthread_key_create()</code> but at best you’ll get the performance benefit of ELF TLS, and the NDK will take care of the details.</p></blockquote><p>最后我们的解决方式是依据上面 <code>pthread_key_create</code> 提到的</p><blockquote><p>There is a limit of <code>PTHREAD_KEYS_MAX</code> keys per process…..</p></blockquote><p>重点是：<strong>per process</strong>，每个进程有 <code>PTHREAD_KEYS_MAX</code>,这个<code>PTHREAD_KEYS_MAX</code>被定义在 <a href="https://android.googlesource.com/platform/bionic/+/refs/heads/main/libc/include/limits.h">limits.h</a>  现在的 Android 基本上都是定义为128。那那我们将我们的SDK 使用的时候放在一个单独的进程不就ok了？事实是的，由于我们的SDK向业务只是提供一个 素材输入&#x3D;&gt;视频输出的功能，中间过程是一个黑盒，那么这个场景使用多进程是完全OK的，使用多进程还有一个好处就是能与游戏进程相独立，尽量减少两者之间的依赖。但多进程也带来了一些门槛，但这相比与改渲染 SDK 底层的源码来说是相对简单很多的，最终经过一番折腾我们将创编SDK得渲染放在了一个单独的进程，后试验运行在之前 Crash 过的游戏业务上一切正常。</p><h3 id="pthread-key-检测工具"><a href="#pthread-key-检测工具" class="headerlink" title="pthread_key 检测工具"></a>pthread_key 检测工具</h3><p>为了以后接入其他游戏前不再发生类似的Crash问题，在接入业务前做一些技术评估，<code>pthread_key_t</code> 可用数量可能也需要成为一个考量指标，可用数的不同，可能需要不同的技术方案，我专门写了一个小工具，可方便查询业务项目目前使用了多少 pthread_key_t，能帮助项目排查当前问题是否是由于 <code>pthread_key_t</code> 占满导致的相关问题。</p><p>不过我更想做一个能够检测项目里面有消耗过 pthread_key_t 的地方，将其 hook 住，打印出来对应的调用栈，这样就能方便业务排查。未来，随着 Android 业务的复杂化，这种问题可能会变成更多大型项目将会遇到。调研发现 Tencent 对外开源项目 <a href="https://github.com/Tencent/matrix?tab=readme-ov-file">Tencent&#x2F;matrix</a> 已经有针对 pthread_key 做了相关的hook，业务侧也可以直接使用 matrix 进行检测，但其项目相对比较庞大，以及使用的方式较复杂。于是将其精简到一个小工具内，整体大小只有1MB 不到。</p><p>源码地址：<a href="https://github.com/VomPom/PthreadKeyDetect">PthreadKeyDetect</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要记录了i创作SDK出现大佬了关于 <code>libc.so</code> 的 Crash，经过调查，问题被定位在 <code>pthread_key_t</code> 资源耗尽的问题上，并对其进行了相关研究，最后并解决了该问题的过程。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://android.googlesource.com/platform/bionic/+/HEAD/android-changes-for-ndk-developers.md#elf-tls-available-for-api-level-29">Android linker changes for NDK developers</a></p><p><a href="https://github.com/android/ndk/issues/789">thread specific key leakage</a></p><p><a href="https://juejin.cn/post/6987921143487283236">pthread_key_create用法导致的崩溃修复</a></p><p><a href="https://github.com/flutter/flutter/issues/127079">Crash issue caused by pthread_key_create failed: 11 when integrating Flutter into our project #127079</a></p><p><a href="https://muc.lists.netbsd.tech.userlevel.narkive.com/gFAi2gse/increase-pthread-keys-max">Increase PTHREAD_KEYS_MAX</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前我负责的 SDK 已集成多个司内业务，一切运行正常，最近在接入到一些游戏项目中的时候发现存在比较多关于 &lt;strong&gt;libc.so&lt;/strong&gt; 的 crash，在游戏中某个场景会使用SDK 进行逻辑处理，在部分手机会在短时间就直接 Crash，且集中在性能比较</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="Android" scheme="http://vompom.github.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[译]软件开发人员的常青技能</title>
    <link href="http://vompom.github.com/2024/07/09/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E5%B8%B8%E9%9D%92%E6%8A%80%E8%83%BD/"/>
    <id>http://vompom.github.com/2024/07/09/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E5%B8%B8%E9%9D%92%E6%8A%80%E8%83%BD/</id>
    <published>2024-07-08T23:27:19.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Github 看到这一篇将程序员一直需要使用的非技术核心能力进行了总结，深受里面内容的启发，语言、框架都是会过时的，但有些技能无论是什么语言或者框架都是通用的，如果要在这个行业持续深根，那么这些非技术能力是必备的且实用的。本文在原文上进行翻译，并对文中提到部分专业术语进行了解释，以及对指向外部链接的文档内容作了一些简单的概述，希望能帮助到查看此文档的人。</p><p>原文地址：<a href="https://github.com/romenrg/evergreen-skills-developers.git">evergreen-skills-developers</a></p><p>中英双文地址：<a href="https://github.com/VomPom/evergreen-skills-developers/blob/master/README_en_cn.md">[译]evergreen-skills-developers</a></p><h2 id="原文翻译："><a href="#原文翻译：" class="headerlink" title="原文翻译："></a>原文翻译：</h2><p>这个仓库包括了一份“常青技能”清单，这份清单应该可以作为对技术精湛的软件工程师&#x2F;开发者客观评价。</p><p>这份工作的是为了在招聘软件开发者&#x2F;工程师时，提供一个替代的技术面试的方案。文档关注的是软开发最佳实践、跨框架原则和通用的技能；而不是我们在行业中经常看到的语言层面，或者特定技术框架的内容。</p><p>编程语言不断进化，公司也不断改变他们的技术栈，框架很快就会过时，有经验的工程师使用搜索引擎能在几分钟就能解决语法相关的问题。因此，在面试候选人时关注这些方面是否有意义呢？</p><p>另一方面，技术框架以外的原理和非技术的技能是在谷歌上查不到的，这些技能是“常青”的，并且对工程师的表现有巨大的影响。这些更能反映出软件开发者&#x2F;工程师为团队带来的真正价值。</p><p>这个仓库是基于以下文章的一个衍生作品：”<a href="https://www.romenrg.com/blog/2018/12/29/what-makes-a-great-software-engineer">是什么造就了一位伟大的软件工程师</a>“。</p><p>这是一个正在进行中的工作。重要的知识可能缺失，现有的条目可能可以改进，更好的分组策略也可能被发现。因此，任何贡献（即PR或问题）都是受欢迎的。请随时按照<a href="https://gptx.woa.com/CONTRIBUTING.md">贡献指南</a>提出修改建议。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%8A%80%E8%83%BD">非技术技能</a></p><ul><li><a href="#%E6%A0%B8%E5%BF%83%E6%8A%80%E8%83%BD%EF%BC%88%E5%8F%88%E7%A7%B0%E2%80%9C%E8%BD%AF%E6%8A%80%E8%83%BD%E2%80%9D%EF%BC%89">核心技能</a><ul><li><a href="#%E4%BA%A4%E6%B5%81">交流</a></li><li><a href="#%E5%9B%A2%E9%98%9F">团队</a></li></ul></li><li><a href="#%E5%88%9B%E6%96%B0%E5%92%8C%E8%87%AA%E6%88%91%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD">创新和自我管理技能</a><ul><li><a href="#%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B">开发流程</a></li><li><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%83%BD%E5%8A%9B">问题解决能力</a></li><li><a href="#%E5%BF%83%E6%80%81">心态</a></li></ul></li></ul></li><li><p><a href="#%E6%8A%80%E8%83%BD%E8%83%BD%E5%8A%9B">技能能力</a></p><ul><li><a href="#%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF%E8%83%BD%E5%8A%9B">通用技术能力</a></li><li><a href="#%E7%BC%96%E7%A8%8B%E5%87%86%E5%88%99">编程准则</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a> </li><li><a href="#%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81">代码整洁</a></li><li><a href="#%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86">源码管理</a></li><li><a href="#%E6%8A%80%E6%9C%AF%E5%90%88%E4%BD%9C">技术合作</a></li><li><a href="#DevOps%E5%AE%9E%E8%B7%B5">DevOps实践</a></li><li><a href="%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86">通用技术知识</a><ul><li><a href="#%E8%AF%AD%E8%A8%80%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86">语言理论知识</a></li><li><a href="#%E4%BC%98%E5%8C%96">优化</a></li><li><a href="#%E5%B9%B6%E5%8F%91">并发</a></li></ul></li></ul></li></ul></li><li><p><a href="#%E7%89%B9%E5%AE%9A%E9%A2%86%E5%9F%9F%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86">特定领域技术知识</a></p><ul><li><p><a href="#%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91">前端开发</a></p></li><li><p><a href="#%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91">后端开发</a></p></li><li><p><a href="#%E6%9E%B6%E6%9E%84">架构</a></p></li><li><p><a href="#%E5%9F%BA%E7%A1%80%E5%BB%BA%E8%AE%BE">基础建设</a></p></li><li><p><a href="#%E5%AE%89%E5%85%A8">安全</a></p></li></ul></li></ul><h2 id="非技术技能"><a href="#非技术技能" class="headerlink" title="非技术技能"></a>非技术技能</h2><p>以下非技术能力可能是开发者最重要的能力。尽管一个人可能具备很强的技术能力，但在公司中没有良好的沟通、团队合作态度、开发流程、解决问题的能力和学习的心态的话，一切会变得非常糟糕。</p><h3 id="核心技能（又称“软技能”）"><a href="#核心技能（又称“软技能”）" class="headerlink" title="核心技能（又称“软技能”）"></a>核心技能（又称“软技能”）</h3><h4 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h4><ul><li>遵循邮件使用的最佳策略(例： <a href="https://www.grammarly.com/blog/email-etiquette-rules-to-know/">some e-mail etiquette rules</a>)</li></ul><ul><li><p>遵循沟通的最佳策略 (e.g. <a href="https://slack.com/intl/en-es/help/articles/115000769927-Use-threads-to-organize-discussions-">use threads to organize discussions</a> and <a href="https://blog.rescuetime.com/slack-focus-guide/">other best-practices from Slack</a>)</p><p>两份链接指向的 slack 的一则使用文档和一份 slack 使用技巧文档</p></li><li><p><a href="https://jaxenter.com/aaaand-gone-true-cost-interruptions-128741.html">最小化干扰</a></p><p>链接指向的文章是一篇关于程序员在工作中，因被其他事项而中断程序开发的影响，一般人，在工作过程中断打扰后大约需要23分钟才能恢复到之前的状态，而程序员需要更久，文中强调了工作中断对程序员工作效率和心情的影响，并讨论了有计划和非计划性中断的不同影响。</p></li><li><p>保持礼貌</p></li></ul><h4 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h4><ul><li><p><a href="https://simpleprogrammer.com/empathy-software-developers">练习同理心</a></p></li><li><p>保持谦逊和低调</p></li><li><p>做一个积极倾听的人</p></li><li><p>做一个好的导师</p></li><li><p>知识分享</p></li><li><p>得有见地</p></li></ul><h3 id="创新和自我管理技能"><a href="#创新和自我管理技能" class="headerlink" title="创新和自我管理技能"></a>创新和自我管理技能</h3><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><ul><li><p>了解<a href="https://agilemanifesto.org/principles.html">《敏捷开发原则》</a></p></li><li><p>适应迭代和增量开发</p></li><li><p>自组织的能力</p><p>指的是个体或系统能够自发地、无需外部强制指挥，根据内部规则和相互作用来组织自身结构和行为的能力。这种能力在多个层面都有体现，包括个人自我管理、团队协作以及更广泛的社会和生态系统</p></li><li><p>避免产生错误的预估（比如：工时预估）</p></li><li><p>关注优先级和业务价值</p></li></ul><h4 id="问题解决能力"><a href="#问题解决能力" class="headerlink" title="问题解决能力"></a>问题解决能力</h4><ul><li><p>使用科学方法(<a href="https://en.wikipedia.org/wiki/Scientific_method">Scientific Method</a>)</p><blockquote><p>科学方法是一种有系统地寻求知识的程序，涉及了以下三个步骤：问题的认知与表述、实验数据的收集、假说的构成与测试。</p></blockquote></li><li><p>检索能力</p></li><li><p>横向思维</p><blockquote><p>横向思维，指使用间接的、具有创造力的、不是一望而知的推理方式来解决问题</p></blockquote></li><li><p>抽象化能力</p></li><li><p>创造力</p></li><li><p><a href="http://en.wikipedia.org/wiki/5_Whys">五问法</a></p><blockquote><p>五问法关键所在就是，鼓励解决问题的人要努力避开主观或自负的假设和逻辑陷阱，从结果着手，沿着因果关系链条，顺藤摸瓜，穿越不同的抽象层面，直至找出原有问题的根本原因。简而言之，就是鼓励解决问题的人要有“打破砂锅问到底”的精神。</p></blockquote></li><li><p>风险管理</p></li></ul><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><ul><li><p>不要害怕变化</p></li><li><p>敢于失败</p></li><li><p>终生学习</p></li><li><p><a href="https://en.wikipedia.org/wiki/Critical_thinking">批判性思维</a> （保持理性，质疑决定，“让事实说话”）</p></li></ul><h2 id="技能能力"><a href="#技能能力" class="headerlink" title="技能能力"></a>技能能力</h2><h3 id="通用技术能力"><a href="#通用技术能力" class="headerlink" title="通用技术能力"></a>通用技术能力</h3><p>有一些技术知识是永恒的，对任何软件工程师都有关，尽管他们将要从事的具体领域各不相同。为了深入了解他们的资历并了解他们的工程实践有多扎实，你可以和他们就编程原理、数据结构、清晰的代码、源代码管理、技术协作或者DevOps实践等主题进行交谈。如果这些基础扎实，他们可能能够毫无问题地学习你们特定领域的东西。</p><h4 id="编程准则"><a href="#编程准则" class="headerlink" title="编程准则"></a>编程准则</h4><ul><li><p>基本流程结构和逻辑代数</p></li><li><p>面向对象编程</p></li><li><p><a href="https://en.wikipedia.org/wiki/SOLID">SOLID</a>, <a href="https://en.wikipedia.org/wiki/GRASP_(object-oriented_design)">GRASP</a>面向对象设计</p><blockquote><p><strong>SOLID</strong>（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转）</p></blockquote></li></ul><blockquote><table><thead><tr><th align="center"></th><th></th><th></th></tr></thead><tbody><tr><td align="center">S</td><td><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">单一功能原则</a></td><td>认为“对象应该仅具有一种单一功能”的概念。</td></tr><tr><td align="center">O</td><td><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">开闭原则</a></td><td>认为“软件应该是对于扩展开放的，但是对于修改封闭的”的概念。</td></tr><tr><td align="center">L</td><td><a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a></td><td>认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念。参考契约式设计。</td></tr><tr><td align="center">I</td><td><a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99">接口隔离原则</a></td><td>认为“多个特定客户端接口要好于一个宽泛用途的接口”的概念。</td></tr><tr><td align="center">D</td><td><a href="https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99">依赖反转原则</a></td><td>认为一个方法应该遵从“依赖于抽象而不是一个实例”的概念。 依赖注入是该原则的一种实现方式。</td></tr></tbody></table><p><strong>GRASP</strong>中提到的模式和原则包括有控制器（controller）、创建者（creator）、中介（indirection）、信息专家（information expert）、低耦合性（low coupling）、高内聚性（high cohesion）、多态（polymorphism）、保护变化（protected variations）和纯虚构（pure Fabrication）[2]</p></blockquote><ul><li><p>函数式编程（纯函数、不变性、递归……）</p></li><li><p><a href="http://amzotti.github.io/programming%20paradigms/2015/02/13/what-is-the-difference-between-procedural-function-imperative-and-declarative-programming-paradigms/">声明式与命令式编程</a></p><blockquote><p>声明式和命令式编程范例只不过是描述在不同抽象层次上编码的流行词。声明式编程关注的是“做什么，而不是如何做”，而命令式编程则关注的是“如何做，而不是做什么”。声明式编程是在比命令式编程更高的抽象层次上进行编程。两者都有其适用的地方，例如在网页开发中使用框架时需要声明式编程，而在设计算法和其他底层需求时则需要命令式编程。</p></blockquote></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>基本数据结构（基本类型、数组、矩阵、对象…）</p></li><li><p>缓存和 memoization</p><p>memoization 没有一个很好的词能翻译，大概意思就是通过存储函数调用的结果，并在再次使用相同输入调用函数时直接返回已存储的结果，从而加速计算逻辑。斐波那契数列就是一个使用 memoization 的例子</p></li><li><p>Hash codes、 tokens、编码（比如 Base64）</p></li><li><p><a href="https://stackoverflow.com/a/80113/1213497">栈与堆内存</a> </p><p>链接指向一则在 <a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113">stackoverflow</a>  提出堆栈相关的诸多疑问，最高数回答解释了堆栈两种内存分配方式的基本概念、操作方式和性能差异，其中栈内存分配方式由于其后进先出的特性和近距离的存取模式，使得其在内存分配和回收上更加高效；而堆内存分配方式由于其动态和灵活的特性，对内存的管理相对复杂，但能够满足更多的内存需求</p></li></ul><h4 id="代码整洁"><a href="#代码整洁" class="headerlink" title="代码整洁"></a>代码整洁</h4><ul><li><p>懂得命名对代码的可读性的重要性</p></li><li><p>避免过长的方法和类，确保职责被划分到各个方法或者类中</p></li><li><p>遵循约定来管理项目结构</p></li><li><p>将复杂的布尔条件提取到命名良好的函数中</p></li><li><p>尽量编写尽可能自解释的代码（即通过阅读代码就能容易理解代码的功能）</p></li><li><p>良好的命名和轻量的文档而不是行内注释</p><p><a href="https://www.codeproject.com/Articles/872073/Code-Comments-are-Lies">代码注释通常可能会误导人</a>，因为它们经常被用作一种捷径，用来解释一段混乱的代码块的功能，而不是投入时间去重构它以提高其可读性。</p><p>链接的文章主张编写清晰、自解释和可维护的代码，而不是过度依赖注释，同时也承认在某些特殊情况下，注释是有其必要性和价值的。</p></li><li><p>将文档编写为代码，理想情况下与代码一起，以便于维护（例如，在仓库中的“docs”文件夹中的 markdown 文件）</p></li><li><p>使用文档来描述“为什么”和“怎么做”（例如，目标、用例、组件、高级架构概述等）</p></li><li><p>在面向对象编程中，组合优于继承</p></li><li><p><a href="https://semver.org/">Follow 语义化</a></p></li><li><p>了解TDD及其实践（例如，“红色，绿色，重构”）</p><blockquote><p><strong>TDD</strong>(测试驱动开发)是戴两顶帽子思考的开发方式：先戴上实现功能的帽子，在测试的辅助下，快速实现其功能；再戴上测试驱动开发的帽子，在测试的保护下，通过去除冗余的代码，提高代码品质。测试驱动着整个开发过程：首先，驱动代码的设计和功能的实现；其后，驱动代码的再设计和重构。</p><ul><li><p>红色：首先编写一个针对新功能的测试用例，此时由于功能尚未实现，测试用例将无法通过（失败，显示红色）</p></li><li><p>绿色：接下来编写功能代码，使得测试用例能够通过（成功，显示绿色）。在这个阶段，重点是让测试通过，而不是编写完美的代码。</p></li><li><p>重构：在测试用例通过后，对功能代码进行优化和重构，提高代码质量，同时确保测试用例仍然能够通过。</p></li></ul></blockquote></li></ul><h4 id="源码管理能力"><a href="#源码管理能力" class="headerlink" title="源码管理能力"></a>源码管理能力</h4><ul><li><p>CVS（控制版本系统）&#x2F; SCM（源代码管理）基础知识：分支、标签、集中式与分散式等</p></li><li><p>SCM与仓库管理&#x2F;托管的区别（即<a href="https://stackoverflow.com/a/13321586">Git与GitHub之间的区别</a>）</p></li><li><p>理解版本化的重要性</p></li><li><p>Commit 最佳实践</p><ul><li><p><a href="https://lucasr.org/2011/01/29/micro-commits/">微提交</a> &#x2F;原子提交，良好的描述等</p></li><li><p><a href="https://www.conventionalcommits.org/en/v1.0.0/">常规提交</a></p></li></ul></li><li><p>功能分支（短期）</p></li><li><p>基于主干的开发</p></li><li><p>依赖管理（包管理器的重要性，依赖地狱的风险等）</p></li></ul><h4 id="技术合作"><a href="#技术合作" class="headerlink" title="技术合作"></a>技术合作</h4><ul><li><p><a href="https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/">代码 review 最佳实践</a></p><ul><li>一句话来说就是：在执行代码审查时关注相关部分。目的是学习，而不是指责。</li></ul></li><li><p><a href="https://martinfowler.com/articles/on-pair-programming.html">结对编程</a></p><p>这篇文章主要讨论了结对编程（Pair Programming）的相关主题，包括其风格、时间管理、轮换策略、日常规划、物理环境设置、远程配对等方面。还探讨了结对编程的好处和挑战，以及如何说服管理者和同事采用这种方法。此外，文章还涉及了一些与配对编程相关的细节和常见问题</p></li></ul><h4 id="DevOps-实践"><a href="#DevOps-实践" class="headerlink" title="DevOps 实践"></a>DevOps 实践</h4><ul><li><p>自动化构建</p></li><li><p>构件仓库和镜像注册表</p></li><li><p>编写自动化测试</p></li><li><p>单元、集成和端到端（e2e）测试之间的区别</p></li><li><p>测试金字塔</p></li><li><p>持续集成</p></li><li><p>持续交付与持续部署</p></li><li><p>功能 Flag 和功能开关</p></li></ul><h4 id="通用技术知识"><a href="#通用技术知识" class="headerlink" title="通用技术知识"></a>通用技术知识</h4><h5 id="语言理论知识"><a href="#语言理论知识" class="headerlink" title="语言理论知识"></a>语言理论知识</h5><ul><li><p>正则表达式（regex）</p></li><li><p>编译型与解释型语言</p></li><li><p><a href="https://medium.com/@cpave3/understanding-types-static-vs-dynamic-strong-vs-weak-88a4e1f0ed5f">动态与静态 &amp; 弱类型与强类型语言类型</a></p></li></ul><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><ul><li><p>懒加载</p></li><li><p><a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)">性能分析</a></p></li></ul><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><ul><li><p>竞态条件</p></li><li><p>死锁</p></li><li><p>互斥</p></li></ul><h3 id="特定领域技术知识"><a href="#特定领域技术知识" class="headerlink" title="特定领域技术知识"></a>特定领域技术知识</h3><p>在某些情况下，您可能希望工程师已经了解某些特定领域，例如前端、后端、架构、基础设施或安全方面。在这些情况下，还有一些跨框架的概念和原则，可用于推动针对每个领域的特定技术知识的内容。</p><h4 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h4><ul><li><p>API通信（不同的架构标准，数据如何传输…）</p></li><li><p>DOM（定义，理解，虚拟DOM…）</p></li><li><p>浏览器事件</p></li><li><p>响应式设计（目的，优点，渐进增强…）</p></li><li><p>客户端渲染（CSR）与服务器端渲染（SSR）</p></li><li><p>分页</p></li><li><p>状态管理（相关问题，无状态方法…）</p></li><li><p>MVC 和相关的衍生品</p></li><li><p>WebSockets 网络通信协议</p></li></ul><h4 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h4><ul><li><p>API设计（不同的架构标准，数据如何传输…）</p></li><li><p><a href="https://en.wikipedia.org/wiki/Message_broker">消息代理</a></p></li><li><p>关系型数据库（它们是如何工作的，基本概念…）</p></li><li><p>非关系型数据库</p></li><li><p>数据库设计</p></li><li><p>ORM（对象关系映射）</p></li><li><p>批处理进程 &#x2F; 定时任务</p></li><li><p>会话处理</p></li><li><p><a href="https://lti.umuc.edu/contentadaptor/topics/byid/db0a8c4f-f738-4674-9f60-b75323cdb07f">错误处理、审查、日志记录</a></p></li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><ul><li><p>API</p><ul><li><p>标准协议：REST &#x2F; SOAP </p></li><li><p>安全性（例如拦截机器人，控制账户接管攻击等）</p></li><li><p>针对第三方服务故障的弹性橱窗（例如断路器）</p></li></ul></li><li><p>外部可配置化</p></li><li><p><a href="https://www.romenrg.com/blog/2019/12/31/everything-as-code/">万物皆代码（即配置即代码，基础设施即代码，文档即代码…）</a></p></li><li><p>单体应用与微服务</p></li><li><p>领域驱动设计（DDD）</p></li><li><p>六边形架构</p></li><li><p>服务 Mesh</p></li><li><p>相关的互联网协议及其用法（如 HTTP, HTTPS, TCP, UDP, LDAP, SSH, SMTP…）</p></li><li><p><a href="https://en.wikipedia.org/wiki/Data_modeling">数据建模</a></p></li></ul><h4 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h4><ul><li><p>虚拟机与容器</p></li><li><p>进程与线程</p></li><li><p>控制器-代理&#x2F;主副本模式</p></li><li><p>C&#x2F;S模式</p></li><li><p>IAAS, PAAS, SASS</p></li><li><p>Web服务器</p></li><li><p>反向代理</p></li><li><p>负载均衡</p></li><li><p>冗余</p></li><li><p>延迟</p></li><li><p>监控</p></li><li><p><a href="https://docs.honeycomb.io/learning-about-observability/intro-to-observability/">可监控性</a></p></li></ul><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ul><li><p>身份和访问管理（IAM）</p><ul><li><p>认证（JWT, SSO）</p></li><li><p>授权（RBAC, ABAC）</p></li></ul></li><li><p>公钥密码系统（例如RSA）</p></li><li><p>加密协议（TLS, SSL）</p></li><li><p>最小权限原则</p></li><li><p>DoS &#x2F; DDoS</p></li><li><p>SQL 注入</p></li><li><p>中间人攻击</p></li><li><p>XSS（跨站脚本攻击） 和 CSRF（跨站请求伪造）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在 Github 看到这一篇将程序员一直需要使用的非技术核心能力进行了总结，深受里面内容的启发，语言、框架都是会过时的，但有些技能无论是什么语言或者框架都是通用的，如果要在这个行业持续深根，那么这些非技术能力是必备的且实用的。本文在原文上进行翻译，并对文中提到部分专业术</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UTF-8字符编码相关</title>
    <link href="http://vompom.github.com/2024/04/11/%E5%85%B3%E4%BA%8EWindows%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B9%B1%E7%A0%81/"/>
    <id>http://vompom.github.com/2024/04/11/%E5%85%B3%E4%BA%8EWindows%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E4%B9%B1%E7%A0%81/</id>
    <published>2024-04-11T06:23:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Windows 上开发一些逻辑的时候遇到一些关于中文的坑，中文路径会乱码，是由于 Window 系统默认的编码格式是 <strong>GBK</strong>，而传入的参数编码格式是 <strong>UTF-8</strong>，导致整个程序出错。后续使用了&#96;&#96;MultiByteToWideChar<code> 和</code>WideCharToMultiByte&#96; 方法对编码进行一次改变，从而避免了这个问题的产生。但不了解相关原因，经过一番学习，对相关的概念进行一些简单的总结，并对一些 api  的实现源码进行分析。</p><h3 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h3><p> ASCII ( American Standard Code for Information Interchange)<br> 256个符号，从 00000000 到 11111111    </p><h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><p>ANSI（American National Standards Institute，美国国家标准协会）编码：ANSI 编码是一种基于 8 位的字符编码。它包含了 128 个美国英语字符和其他 128 个特殊字符，共 256 个字符。ANSI 编码主要用于表示英语字符，但它的局限性在于无法表示其他语言的字符。为了解决这个问题，各国家和地区分别制定了自己的 ANSI 编码标准，但这又引入了新的问题，即不同编码之间的互不兼容。</p><p>​       美国和西欧：Windows-1252<br>​       中文（简体）：GB2312 或 GBK<br>​       中文（繁体）：Big5<br>​       日文：Shift-JIS<br>​       韩文：EUC-KR   </p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>为了解决字符编码之间的兼容性问题，Unicode 标准应运而生。Unicode 是一种包含世界上大多数字符的编码方案，它为每个字符分配一个唯一的数字（称为码点），无论在任何平台、程序或语言中，都可以表示这些字符。Unicode 有多种实现方式，如 UTF-8、UTF-16 和 UTF-32。UTF-8 是最常用的 Unicode 实现方式，它是一种变长编码，可以使用 1 到 4 个字节来表示一个字符，这使得它在存储和传输方面更加高效</p><p>  “FE FF” 是 Unicode 字符串的字节顺序标记（Byte Order Mark，简称 BOM），用于表示字符串的字节顺序<br>  Unicode Little-Endian，”FF FE”<br>  Unicode Big-Endian，”FE FF”</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8 是 Unicode 的实现方式之一  ，是一种变长编码，它使用 1 到 4 个字节（8 位）来表示一个字符</p><p><strong>单字节</strong>   所有的ASCII 字符<br><strong>二字节</strong>  带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码                </p><p><strong>三字节</strong> 基本等同于GBK，含21000多个汉字 </p><p><strong>四字节</strong> 中日韩超大字符集里面的汉字，有5万多个</p><p><strong>UTF-8编码对照表</strong></p><table><thead><tr><th>Unicode 符号范围   (十六进制)</th><th>UTF-8编码方式（二进制）</th></tr></thead><tbody><tr><td>0000 0000 ~ 0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080 ~ 0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800 ~ 0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000 ~ 0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><h3 id="源码阅读：Java-String-toUtf8"><a href="#源码阅读：Java-String-toUtf8" class="headerlink" title="源码阅读：Java String toUtf8"></a>源码阅读：Java String toUtf8</h3><p> Java 的 String 默认用 UTF-16 存储数据，String 类的方法<code>.getBytes(StandardCharsets.UTF_8)</code> 将指定的字符集将字符串编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p><p>其主要逻辑在:<a href="https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/libcore/util/CharsetUtils.java#46">CharsetUtils.java#toUtf8Bytes</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">byte</span>[] toUtf8Bytes(String s, <span class="type">int</span> offset, <span class="type">int</span> length);</span><br></pre></td></tr></table></figure><p>对应的最终实现：<a href="https://android.googlesource.com/platform/libcore/+/3e8abdd9bdca823a635aac3adacf71ef227b18e1/luni/src/main/native/java_nio_charset_Charsets.cpp#183">java_nio_charset_Charsets.cpp#Charsets_toUtf8Bytes</a> </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jbyteArray <span class="title">Charsets_toUtf8Bytes</span><span class="params">(JNIEnv* env, jclass, jcharArray javaChars, jint offset, jint length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....此处省略 一些检查逻辑</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> end = offset + length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = offset; i &lt; end; ++i) &#123;</span><br><span class="line">        jint ch = chars[i];</span><br><span class="line">        <span class="keyword">if</span> (ch &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">            <span class="comment">// 单字节直接放进去</span></span><br><span class="line">            <span class="keyword">if</span> (!out.<span class="built_in">append</span>(ch)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">            <span class="comment">// 双字节</span></span><br><span class="line">            <span class="keyword">if</span> (!out.<span class="built_in">append</span>((ch &gt;&gt; <span class="number">6</span>) | <span class="number">0xc0</span>) || !out.<span class="built_in">append</span>((ch &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">U16_IS_SURROGATE</span>(ch)) &#123;</span><br><span class="line">          <span class="comment">// ....此处省略 UTF-16 代理字符串相关的逻辑</span></span><br><span class="line">            ch = <span class="built_in">U16_GET_SUPPLEMENTARY</span>(high, low);</span><br><span class="line">            <span class="comment">// 四字节 </span></span><br><span class="line">            jbyte b1 = (ch &gt;&gt; <span class="number">18</span>) | <span class="number">0xf0</span>;</span><br><span class="line">            jbyte b2 = ((ch &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>;</span><br><span class="line">            jbyte b3 = ((ch &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>;</span><br><span class="line">            jbyte b4 = (ch &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>;</span><br><span class="line">            <span class="keyword">if</span> (!out.<span class="built_in">append</span>(b1) || !out.<span class="built_in">append</span>(b2) || !out.<span class="built_in">append</span>(b3) || !out.<span class="built_in">append</span>(b4)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 三字节.</span></span><br><span class="line">            jbyte b1 = (ch &gt;&gt; <span class="number">12</span>) | <span class="number">0xe0</span>;</span><br><span class="line">            jbyte b2 = ((ch &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>;</span><br><span class="line">            jbyte b3 = (ch &amp; <span class="number">0x3f</span>) | <span class="number">0x80</span>;</span><br><span class="line">            <span class="keyword">if</span> (!out.<span class="built_in">append</span>(b1) || !out.<span class="built_in">append</span>(b2) || !out.<span class="built_in">append</span>(b3)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out.<span class="built_in">toByteArray</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体的逻辑非常的好理解：判断输入值的区间，并分成单双三四字节的处理逻辑，其中有处理 UTF-16 代理字符串相关的逻辑此处忽略，可以了解<a href="https://learn.microsoft.com/zh-cn/windows/win32/intl/surrogates-and-supplementary-characters">代理项和增补字符</a>。对应单字节符号处理，直接将原始值返回即可，其他的字节就一个一个地获取，这里分析一下对于双字节的逻辑处理。获取第一个字节的逻辑为：<code>(ch &gt;&gt; 6) | 0xc0 </code>第二个字节逻辑为 <code>(ch &amp; 0x3f) | 0x80</code> </p><ul><li><p><code>(ch &gt;&gt; 6) | 0xc0</code></p><p>第一个字节的前两位是 <code>11</code>（十六进制中的 <code>0xc0</code>），后面的 5 位是 Unicode 码点的高 5 位</p></li><li><p><code>(ch &amp; 0x3f) | 0x80</code></p><p>第二个字节的前两位是 <code>10</code>（十六进制中的 <code>0x80</code>），后面的 6 位是 Unicode 码点的低 6 位</p></li></ul><p>举例，希腊符号  <code>ε</code>(epsilon) 在 UTF-8 编码里面是用双字节表示， Unicode 为 <code>0x03B5</code>  对应二进制数据：<code>0000001110110101</code>，计算流程如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ε 0x03B5 to UTF-8 </span><br><span class="line"></span><br><span class="line"># 第一个字节 (ch &gt;&gt; 6) | 0xc0</span><br><span class="line">0000001110110101 &gt;&gt; 6</span><br><span class="line">      0000001110 | 0xc0 (11000000)</span><br><span class="line">        11000000</span><br><span class="line">             ||</span><br><span class="line">        11001110</span><br><span class="line">            0xCE</span><br><span class="line"></span><br><span class="line"># 第二个字节 (ch &amp; 0x3f) | 0x80</span><br><span class="line">0000001110110101 &amp; 0x3f (111111)</span><br><span class="line">          111111</span><br><span class="line">          110101 | 0x80 (10000000)</span><br><span class="line">        10000000</span><br><span class="line">              ||</span><br><span class="line">        10110101</span><br><span class="line">            0xB5</span><br></pre></td></tr></table></figure><p>从而计算出  <code>ε</code> 对应的 UTF-8 Encoding为<code>0xCE 0xB5</code></p><h3 id="“锟斤拷”和“烫”"><a href="#“锟斤拷”和“烫”" class="headerlink" title="“锟斤拷”和“烫”"></a>“锟斤拷”和“烫”</h3><p><code>“锟斤拷”</code>通常发生在UTF-8 到 GBK 编码的转换中，在 UTF-8 编码中，”0xEF 0xBF 0xBD” 是一个特殊的字符，表示 REPLACEMENT CHARACTER（替换字符），当解码器在解码字节序列时遇到无法识别的字节或无效的编码时，通常会用 REPLACEMENT CHARACTER（U+FFFD）替换这些无效的字节 ，”0xEF 0xBF 0xBD” 在 GBK 里面则编码成 “锟斤拷”。</p><p><code>“烫”</code> 则是由于在 Windows 操作系统中，开发者在使用调试器调试程序时，会发现未初始化的内存通常会被填充为0xCC，而”0xCC” 在 GBK 里面则编码成“烫”。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要讨论了字符编码的一些基本概念和原理，包括 ASCII、ANSI、Unicode 和 UTF-8 编码，文章分析了 Java String 类的<code>.getBytes(StandardCharsets.UTF_8)</code>方法的实现源码，解释了将 Unicode 字符串转换为 UTF-8 编码字节序列的过程，最后介绍了一下 “锟斤拷”和”烫”为什么会被展示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在 Windows 上开发一些逻辑的时候遇到一些关于中文的坑，中文路径会乱码，是由于 Window 系统默认的编码格式是 &lt;strong&gt;GBK&lt;/strong&gt;，而传入的参数编码格式是 &lt;strong&gt;UTF-8&lt;/strong&gt;，导致整个程序出错。后续使用了&amp;#96</summary>
      
    
    
    
    
    <category term="UTF-8" scheme="http://vompom.github.com/tags/UTF-8/"/>
    
  </entry>
  
  <entry>
    <title>实现一个自定义 FFmpeg Filter</title>
    <link href="http://vompom.github.com/2024/03/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89FFmpeg-Filter/"/>
    <id>http://vompom.github.com/2024/03/07/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89FFmpeg-Filter/</id>
    <published>2024-03-07T02:58:00.000Z</published>
    <updated>2025-09-15T13:07:48.846Z</updated>
    
    <content type="html"><![CDATA[<p>此前在做  ffmpeg+某个第三库作为 filter 的集成，第三库是做AE特效相关的，与 ffmpeg 结合能让视频渲染效果大大提升。整体流程将第三方库作为 ffmpeg 的一个filter 形式进行结合，其中就涉及到 ffmpeg 的 filter 开发，本文即 对ffmpeg 的滤镜开发流程作一个总结。本文以实现一个视频垂直翻转的 filter 为例，ffmpeg 源码基于<a href="https://github.com/FFmpeg/FFmpeg/tree/release/6.1">FFmpeg6.1</a> </p><h2 id="实现自定义-Filter-流程"><a href="#实现自定义-Filter-流程" class="headerlink" title="实现自定义 Filter 流程"></a>实现自定义 Filter 流程</h2><ul><li><p>编写 filter.c 文件</p><p>一般视频滤镜以 vf_ 为前缀，视频滤镜以 af_ 为前缀，放在libavfilter目录下，参考其他 filter 代码逻辑，模块化配置相关参数，本文例以 vf_flip.c 实现视频的上下翻转</p></li><li><p>在 <code>libavfilter/allfilters.c</code> 注册</p><p>例如：extern const AVFilter ff_vf_flip;  <code>ff_vf_flip</code>就是在 <code>vf_flip.c</code>的 filter 注册名称</p></li><li><p>修改 <code>libavfilter/Makefile</code> 添加编译配置： </p><p>例如：OBJS-$(CONFIG_FLIP_FILTER)                   +&#x3D; vf_flip.o</p></li><li><p>编译打包</p></li></ul><h2 id="编写-filter-c-文件"><a href="#编写-filter-c-文件" class="headerlink" title="编写 filter.c 文件"></a>编写 filter.c 文件</h2><h3 id="AVFilter主体"><a href="#AVFilter主体" class="headerlink" title="AVFilter主体"></a>AVFilter主体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVFilter</span> &#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *description;</span><br><span class="line">  <span class="type">const</span> AVFilterPad *inputs;</span><br><span class="line">  <span class="type">const</span> AVFilterPad *outputs;</span><br><span class="line">  <span class="type">const</span> AVClass *priv_class;</span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line">  <span class="type">int</span> (*preinit)(AVFilterContext *ctx);</span><br><span class="line">  <span class="type">int</span> (*init)(AVFilterContext *ctx);</span><br><span class="line">  <span class="type">int</span> (*init_dict)(AVFilterContext *ctx, AVDictionary **options);</span><br><span class="line">  <span class="type">void</span> (*uninit)(AVFilterContext *ctx);</span><br><span class="line">  <span class="type">int</span> (*query_formats)(AVFilterContext *);</span><br><span class="line">  <span class="type">int</span> priv_size;   </span><br><span class="line">  <span class="type">int</span> flags_internal; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">AVFilter</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="type">int</span> (*process_command)(AVFilterContext *, <span class="type">const</span> <span class="type">char</span> *cmd, <span class="type">const</span> <span class="type">char</span> *arg, <span class="type">char</span> *res, <span class="type">int</span> res_len, <span class="type">int</span> flags);</span><br><span class="line">  <span class="type">int</span> (*init_opaque)(AVFilterContext *ctx, <span class="type">void</span> *opaque);</span><br><span class="line">  <span class="type">int</span> (*activate)(AVFilterContext *ctx);</span><br><span class="line">&#125; AVFilter;</span><br></pre></td></tr></table></figure><p>具体里面的属性作用可以参考：<a href="https://www.cnblogs.com/TaigaCon/p/10171464.html">[ffmpeg] 定制滤波器</a>，可以根据需求实现里面的相关函数，接下来以一个最简单的 Filter 和一个较复杂一点的 Filter 举例。</p><h3 id="最简单的-AVFilter"><a href="#最简单的-AVFilter" class="headerlink" title="最简单的 AVFilter"></a>最简单的 AVFilter</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> AVClass *<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">&#125; NoopContext;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">filter_frame</span><span class="params">(AVFilterLink *link, AVFrame *frame)</span> &#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;filter frame pts:%lld\n&quot;</span>, frame-&gt;pts);</span><br><span class="line">    NoopContext *noopContext = link-&gt;dst-&gt;priv;</span><br><span class="line">    <span class="keyword">return</span> ff_filter_frame(link-&gt;dst-&gt;outputs[<span class="number">0</span>], frame);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> AVFilterPad noop_inputs[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name         = <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                .type         = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">                .filter_frame = filter_frame,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> AVFilterPad noop_outputs[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                .type = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> AVFilter ff_vf_noop = &#123;</span><br><span class="line">        .name          = <span class="string">&quot;noop&quot;</span>,</span><br><span class="line">        .description   = NULL_IF_CONFIG_SMALL(<span class="string">&quot;Pass the input video unchanged.&quot;</span>),</span><br><span class="line">        .priv_size     = <span class="keyword">sizeof</span>(NoopContext),</span><br><span class="line">        FILTER_INPUTS(noop_inputs),</span><br><span class="line">        FILTER_OUTPUTS(noop_outputs),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>命令行运行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -vf &quot;noop&quot; noop.mp4</span><br></pre></td></tr></table></figure><p> 正常输出文件（对原片没有做任何更改）,这个 filter 的作用是将输入的视频帧不做任何处理地传递给下一个过滤器，在处理每帧的时候会打印处理的 PTS，麻雀虽小五脏俱全，它包含了一个 AVFilter 基础的结构：</p><ol><li><p><strong><code>NoopContext</code></strong></p><p>这是一个简单的结构体，包含一个指向 AVClass 的指针。在这个例子中，实际上没有使用到 NoopContext 结构体的任何成员，因为这个过滤器没有需要存储的私有数据。</p></li><li><p><strong><code>filter_frame</code></strong> </p><p>这个函数的作用是处理输入的视频帧。在这个例子中，它只是打印帧的 PTS（Presentation Time Stamp，显示时间戳）并将帧传递给下一个过滤器，不对帧做任何修改。</p></li><li><p><strong><code>noop_inputs</code> 和 <code>noop_outputs</code></strong></p><p>这两个数组定义了过滤器的输入和输出 Pad。在这个例子中，输入 Pad 类型为 AVMEDIA_TYPE_VIDEO，并关联了 <code>filter_frame</code> 函数。输出 Pad 也是 AVMEDIA_TYPE_VIDEO 类型，但没有关联任何函数，因为输出直接由 <code>filter_frame</code> 函数处理。</p></li><li><p><strong><code>ff_vf_noop</code></strong></p><p>这是一个 AVFilter 结构体实例，包含了过滤器的名称、描述、私有数据大小以及输入和输出 Pad。在这个例子中，过滤器的名称为 “noop”，描述为 “Pass the input video unchanged.”，这也就是在执行：<code>ffmpeg -filters</code> 看到的 Filter描述内容。</p></li></ol><p>接下来看一个稍微复杂的一个 AVFilter，实现一个视频的上下翻转</p><h3 id="复杂一点的-AVFilter"><a href="#复杂一点的-AVFilter" class="headerlink" title="复杂一点的 AVFilter"></a>复杂一点的 AVFilter</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">FlipContext</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> AVClass *<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">    <span class="type">int</span> duration;</span><br><span class="line">&#125; FlipContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET(x) offsetof(FlipContext, x)</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> AVOption flip_options[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;duration&quot;</span>, <span class="string">&quot;set flip duration&quot;</span>, OFFSET(duration), AV_OPT_TYPE_INT, &#123;.i64 = <span class="number">0</span>&#125;, <span class="number">0</span>, INT_MAX, .flags = AV_OPT_FLAG_FILTERING_PARAM&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> av_cold <span class="type">int</span> <span class="title function_">flip_init</span><span class="params">(AVFilterContext *ctx)</span> &#123;</span><br><span class="line">    FlipContext *context = ctx-&gt;priv;</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Input duration: %d.\n&quot;</span>, context-&gt;duration);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> av_cold <span class="type">void</span> <span class="title function_">flip_uninit</span><span class="params">(AVFilterContext *ctx)</span> &#123;</span><br><span class="line">    FlipContext *context = ctx-&gt;priv;</span><br><span class="line">    <span class="comment">// no-op 本例无需释放滤镜实例分配的内存、关闭文件、资源等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对输入的 AVFrame 进行翻转</span></span><br><span class="line"><span class="type">static</span> AVFrame *<span class="title function_">flip_frame</span><span class="params">(AVFilterContext *ctx, AVFrame *in_frame)</span> &#123;</span><br><span class="line"> AVFilterLink *inlink = ctx-&gt;inputs[<span class="number">0</span>];</span><br><span class="line">    FlipContext *s = ctx-&gt;priv;</span><br><span class="line">    <span class="type">int64_t</span> pts = in_frame-&gt;pts;</span><br><span class="line">    <span class="comment">// 将时间戳（pts）转化以秒为单位的时间戳</span></span><br><span class="line">    <span class="type">float</span> time_s = TS2T(pts, inlink-&gt;time_base);</span><br><span class="line">    <span class="keyword">if</span> (time_s &gt; s-&gt;duration) &#123;</span><br><span class="line">        <span class="comment">// 超过对应的时间则直接输出in_frame</span></span><br><span class="line">        <span class="keyword">return</span> in_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建输出帧并分配内存</span></span><br><span class="line">    AVFrame *out_frame = av_frame_alloc();</span><br><span class="line">    <span class="keyword">if</span> (!out_frame) &#123;</span><br><span class="line">        av_frame_free(&amp;in_frame);</span><br><span class="line">        <span class="keyword">return</span> out_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置输出帧的属性</span></span><br><span class="line">    out_frame-&gt;format = in_frame-&gt;format;</span><br><span class="line">    out_frame-&gt;width = in_frame-&gt;width;</span><br><span class="line">    out_frame-&gt;height = in_frame-&gt;height;</span><br><span class="line">    out_frame-&gt;pts = in_frame-&gt;pts;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配输出帧的数据缓冲区</span></span><br><span class="line">    <span class="type">int</span> ret = av_frame_get_buffer(out_frame, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        av_frame_free(&amp;in_frame);</span><br><span class="line">        av_frame_free(&amp;out_frame);</span><br><span class="line">        <span class="keyword">return</span> out_frame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个示例仅适用于 YUV 格式的视频。对于其他格式（如 RGB）</span></span><br><span class="line">    <span class="comment">// 翻转输入帧的数据到输出帧</span></span><br><span class="line">    <span class="comment">// 翻转了 Y 分量，然后翻转了 U 和 V 分量</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">uint8_t</span> *src_y = in_frame-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *src_u = in_frame-&gt;data[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *src_v = in_frame-&gt;data[<span class="number">2</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *dst_y = out_frame-&gt;data[<span class="number">0</span>] + (in_frame-&gt;height - <span class="number">1</span>) * out_frame-&gt;linesize[<span class="number">0</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *dst_u = out_frame-&gt;data[<span class="number">1</span>] + (in_frame-&gt;height / <span class="number">2</span> - <span class="number">1</span>) * out_frame-&gt;linesize[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *dst_v = out_frame-&gt;data[<span class="number">2</span>] + (in_frame-&gt;height / <span class="number">2</span> - <span class="number">1</span>) * out_frame-&gt;linesize[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; in_frame-&gt;height; i++) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(dst_y, src_y, in_frame-&gt;width);</span><br><span class="line">        src_y += in_frame-&gt;linesize[<span class="number">0</span>];</span><br><span class="line">        dst_y -= out_frame-&gt;linesize[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; in_frame-&gt;height / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(dst_u, src_u, in_frame-&gt;width / <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(dst_v, src_v, in_frame-&gt;width / <span class="number">2</span>);</span><br><span class="line">            src_u += in_frame-&gt;linesize[<span class="number">1</span>];</span><br><span class="line">            src_v += in_frame-&gt;linesize[<span class="number">2</span>];</span><br><span class="line">            dst_u -= out_frame-&gt;linesize[<span class="number">1</span>];</span><br><span class="line">            dst_v -= out_frame-&gt;linesize[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out_frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">activate</span><span class="params">(AVFilterContext *ctx)</span> &#123;</span><br><span class="line">    AVFilterLink *inlink = ctx-&gt;inputs[<span class="number">0</span>];</span><br><span class="line">    AVFilterLink *outlink = ctx-&gt;outputs[<span class="number">0</span>];</span><br><span class="line">    AVFrame *in_frame = <span class="literal">NULL</span>;</span><br><span class="line">    AVFrame *out_frame = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取输入帧</span></span><br><span class="line">    ret = ff_inlink_consume_frame(inlink, &amp;in_frame);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有输入帧，进行翻转处理</span></span><br><span class="line">    <span class="keyword">if</span> (in_frame) &#123;</span><br><span class="line">        <span class="comment">// 对输出帧进行上下翻转处理</span></span><br><span class="line">        out_frame = flip_frame(ctx, in_frame);</span><br><span class="line">        <span class="comment">// 将处理后的帧放入输出缓冲区</span></span><br><span class="line">        ret = ff_filter_frame(outlink, out_frame);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            av_frame_free(&amp;out_frame);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有输入帧，尝试请求一个新的输入帧</span></span><br><span class="line">    <span class="keyword">if</span> (!in_frame) &#123;</span><br><span class="line">        ff_inlink_request_frame(inlink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">int64_t</span> pts;</span><br><span class="line">    ret = ff_inlink_acknowledge_status(inlink, &amp;status, &amp;pts);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (status == AVERROR_EOF) &#123;</span><br><span class="line">        <span class="comment">// 输入链接已经结束，设置输出链接的状态为 EOF</span></span><br><span class="line">        ff_outlink_set_status(outlink, AVERROR_EOF, pts);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AVFILTER_DEFINE_CLASS(flip);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> AVFilterPad flip_inputs[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                .type = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> AVFilterPad flip_outputs[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                .type = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> AVFilter ff_vf_flip = &#123;</span><br><span class="line">        .name = <span class="string">&quot;flip&quot;</span>,</span><br><span class="line">        .description = NULL_IF_CONFIG_SMALL(<span class="string">&quot;Flip the input video.&quot;</span>),</span><br><span class="line">        .priv_size = <span class="keyword">sizeof</span>(FlipContext),</span><br><span class="line">        .priv_class = &amp;flip_class,</span><br><span class="line">        .activate      = activate,</span><br><span class="line">        .init = flip_init,</span><br><span class="line">        .uninit = flip_uninit,</span><br><span class="line">        FILTER_INPUTS(flip_inputs),</span><br><span class="line">        FILTER_OUTPUTS(flip_outputs),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>命令行运行：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -filter_complex &quot;[0:v]flip=duration=5[out];&quot; -map &quot;[out]&quot; flip.mp4</span><br></pre></td></tr></table></figure><p> 得到渲染好的视频，前5s是上下翻转的，后面的内容正常。</p><p>相比于最简单的 AVFilter 多了几个实现：</p><ol><li><p><strong><code>AVOption flip_options</code></strong></p><p>用于设置翻转持续时间的选项，外部命令配置可选输入<code>duration=5</code>，会自动对数据合法性进行校验。参数类型为 <code>AV_OPT_TYPE_INT</code>，默认值为 0，取值范围为 0 到 <code>INT_MAX</code>。<code>.flags</code> 设置为 <code>AV_OPT_FLAG_FILTERING_PARAM</code>，表示这是一个过滤参数。</p></li><li><p><strong><code>.priv_class</code></strong>  </p><p>配置的<code>flip_class</code>实际是通过 <code>AVFILTER_DEFINE_CLASS(flip);</code> 宏实现的一个声明：见：<a href="https://github.com/FFmpeg/FFmpeg/blob/release/6.1/libavfilter/internal.h#L311">internal.h#AVFILTER_DEFINE_CLASS_EXT</a></p></li><li><p><strong><code>**init</code>&amp; <code>uninit</code></strong></p><p>滤镜在初始化或者释放资源的时候将会调用</p></li><li><p><strong><code>activate</code></strong></p><p>这个函数首先获取输入帧，然后调用 <code>flip_frame</code> 函数进行翻转操作，并将处理后的帧放入输出链接。如果没有输入帧，它会请求一个新的输入帧。最后，它会确认输入链接的状态，并根据需要设置输出链接的状态。</p></li></ol><p>这个例子相比最简单的 filter 使用了 <code>activate</code> 函数 用于帧渲染，而不是使用 <code>filter_frame</code>去渲染，这两个方法有什么区别于联系呢？查看：<a href="##filter_frame()%E5%92%8Cactivate()%E5%87%BD%E6%95%B0">filter_frame和activate方法</a></p><p>也能通过 <code>filter_frame</code>实现，对代码部分逻辑更新更改：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> AVFilterPad flip_inputs[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                .type = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">                .filter_frame = filter_frame, <span class="comment">//添加filter_frame 实现</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> AVFilter ff_vf_flip = &#123;</span><br><span class="line">       ……</span><br><span class="line">        .priv_class = &amp;flip_class,</span><br><span class="line">       <span class="comment">// .activate      = activate,</span></span><br><span class="line">        .init = flip_init,</span><br><span class="line">       ……</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">filter_frame</span><span class="params">(AVFilterLink *inlink, AVFrame *in)</span> &#123;</span><br><span class="line">    AVFilterContext *ctx = inlink-&gt;dst;</span><br><span class="line">    FlipContext *s = ctx-&gt;priv;</span><br><span class="line">    AVFilterLink *outlink = ctx-&gt;outputs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int64_t</span> pts = in-&gt;pts;</span><br><span class="line">    <span class="comment">// 将时间戳（pts）转化以秒为单位的时间戳</span></span><br><span class="line">    <span class="type">float</span> time_s = TS2T(pts, inlink-&gt;time_base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (time_s &gt; s-&gt;duration) &#123;</span><br><span class="line">        <span class="comment">// 超过对应的时间则直接输出in_frame</span></span><br><span class="line">        <span class="keyword">return</span> ff_filter_frame(outlink, in);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;time_s s: %f.\n&quot;</span>, time_s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVFrame *out = flip_frame(ctx, in);</span><br><span class="line">    <span class="comment">// 释放输入帧</span></span><br><span class="line">    av_frame_free(&amp;in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将输出帧传递给下一个滤镜</span></span><br><span class="line">    <span class="keyword">return</span> ff_filter_frame(outlink, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行运行，得到的输出结果是一样的。</p><h2 id="filter-frame-和activate-函数"><a href="#filter-frame-和activate-函数" class="headerlink" title="filter_frame()和activate()函数"></a>filter_frame()和activate()函数</h2><p>对于这点查了相关资料，看看源码相关的实现</p><p>参考：<a href="https://www.ffmpeg.org/doxygen/5.0/filter__design_8txt.html">https://www.ffmpeg.org/doxygen/5.0/filter__design_8txt.html</a></p><blockquote><p>The purpose of these rules is to ensure that frames flow in the filter graph without getting stuck and accumulating somewhere. Simple filters that output one frame for each input frame should not have to worry about it. There are two design for filters:one using the  <a href="https://www.ffmpeg.org/doxygen/5.0/vsink__nullsink_8c.html#aaa9a0e0f9de1464941d86a984cf77d37">filter_frame</a>() and <a href="https://www.ffmpeg.org/doxygen/5.0/vsrc__mptestsrc_8c.html#a72949c8fcad3f201712a3569fc6888cb">request_frame</a>() callbacks and the other using the activate() callback. The design using filter_frame() and request_frame() is legacy, but it is suitable for filters that have a single input and process one frame at a time. New filters with several inputs, that treat several frames at a time or that require a special treatment at EOF should probably use the design using activate(). activate ——– This method is called when something must be done in a filter</p></blockquote><p>大意，实现滤镜有两种实现方式：</p><ul><li><p><strong><code>filter_frame()</code></strong></p><p>可以被认为是历史遗留产物。在早期的 AVFilter 设计中，<code>filter_frame()</code> 和 <code>request_frame()</code> 是主要用于处理输入帧和请求输出帧的回调函数。这种设计适用于简单的过滤器，例如单输入且每次处理一个帧的过滤器。</p></li><li><p><strong><code>activate()</code></strong></p><p>随着 ffmpeg 和 AVFilter 的发展，处理需求变得越来越复杂，例如需要处理多个输入、一次处理多个帧或在文件结束（EOF）时进行特殊处理等。为了满足这些需求，引入了 <code>activate()</code> 函数，它提供了更灵活和强大的处理能力。因此，虽然 <code>filter_frame()</code> 在某些简单场景下仍然可以使用，但对于新的或复杂的过滤器，建议使用 <code>activate()</code> 函数。</p></li></ul><p>如果两个方法都实现了，那他们谁会先执行呢？</p><p>对应的源码处理逻辑： <a href="https://github.com/FFmpeg/FFmpeg/blob/release/6.1/libavfilter/avfilter.c#L1322">avfilter.c</a></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ff_filter_activate</span><span class="params">(AVFilterContext *filter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">……</span><br><span class="line">    ret = filter-&gt;filter-&gt;activate ? filter-&gt;filter-&gt;activate(filter) :</span><br><span class="line">          ff_filter_activate_default(filter);</span><br><span class="line">  ……</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配置了activate() 函数则执行，否则执行 ff_filter_activate_default()-&gt;ff_filter_frame_to_filter()-&gt;ff_filter_frame_framed() 最终执行到配置的 filter_frame() 方法。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ff_filter_frame_framed</span><span class="params">(AVFilterLink *link, AVFrame *frame)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*filter_frame)(AVFilterLink *, AVFrame *);</span><br><span class="line">    AVFilterContext *dstctx = link-&gt;dst;</span><br><span class="line">    AVFilterPad *dst = link-&gt;dstpad;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(filter_frame = dst-&gt;filter_frame))</span><br><span class="line">        filter_frame = default_filter_frame;</span><br><span class="line">    ……</span><br><span class="line">    ret = filter_frame(link, frame);  <span class="comment">// 最终调用到的地方</span></span><br><span class="line">    link-&gt;frame_count_out++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">fail:</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 FFmpeg 滤镜开发的整体流程，如何编写 filter.c 文件，并以一个最简单的 AVFilter 和一个较为复杂的 AVFilter 为例，解析了滤镜开发的具体步骤和代码实现，并介绍了 filter_frame() 和 activate() 函数的区别与联系。</p><p>在滤镜开发过程中，需要注意的是，filter_frame() 和 activate() 函数的使用取决于滤镜的复杂性。对于简单的滤镜，可以使用 filter_frame() 函数；而对于需要处理多个输入、一次处理多个帧或在文件结束（EOF）时进行特殊处理的复杂滤镜，建议使用 activate() 函数。</p><p>文中的源码可以查看：<a href="https://github.com/VomPom/FFmpeg/commit/9176f58ae60e0b70e5708b25017f374deac9fae7">add most simplest  AVFilter and a simple video flip filter.</a></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.cnblogs.com/TaigaCon/p/10171464.html">https://www.cnblogs.com/TaigaCon/p/10171464.html</a></p><p><a href="https://www.cnblogs.com/ranson7zop/p/7728639.html">https://www.cnblogs.com/ranson7zop/p/7728639.html</a></p><p><a href="https://www.ffmpeg.org/doxygen/5.0/filter__design_8txt.html">https://www.ffmpeg.org/doxygen/5.0/filter__design_8txt.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前在做  ffmpeg+某个第三库作为 filter 的集成，第三库是做AE特效相关的，与 ffmpeg 结合能让视频渲染效果大大提升。整体流程将第三方库作为 ffmpeg 的一个filter 形式进行结合，其中就涉及到 ffmpeg 的 filter 开发，本文即 对f</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="FFmpeg" scheme="http://vompom.github.com/tags/FFmpeg/"/>
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView自定义LayoutManager从0到1实践</title>
    <link href="http://vompom.github.com/2023/10/31/%E8%87%AA%E5%AE%9A%E4%B9%89LayoutManager%E4%BB%8E0%E5%88%B01%E5%AE%9E%E8%B7%B5/"/>
    <id>http://vompom.github.com/2023/10/31/%E8%87%AA%E5%AE%9A%E4%B9%89LayoutManager%E4%BB%8E0%E5%88%B01%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-10-31T11:19:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前大部分涉及到 RecyclerView 页面的 LayoutManager基本上用系统提供的 LinearLayoutManager 、GridLayoutManager 就能解决，但在一些特殊场景上还是需要我们自定义  LayoutManager。之前基本上没有自己写过，在网上看各种源码各种文章，刚开始花了好多时间去理解整体流程，因为它们都给我一种非常非常复杂的感觉，包括相关的博客文章也是。经过一段时间摸索，也慢慢能理解为什么要那么复杂了，这的确不是特别容易入门。所以对整体的流程进行了一个拆解，尽量原子化一点，对自己学习的一个总结，也希望能帮助到一部分人能对  LayoutManager 入门。</p><p>本文最终实现一个简单的 LinearLayoutManager（只支持 VERTICAL）方向，适合对 LayoutManager 整体流程的学习与理解，整体代码分为多个文件，每个文件都是对前一段代码的补充，方便理解，整体项目源码已提交 Github: <a href="https://github.com/VomPom/LayoutManagerGradually">LayoutManagerGradually</a>，代码里面写了很多很多注释，如果不想浪费时间，可以直接看代码运行，跳过这篇文章，把每一个 LayoutManager 都跑一下体验结合代码看看。</p><h2 id="自定义-LayoutManager-的必要元素"><a href="#自定义-LayoutManager-的必要元素" class="headerlink" title="自定义 LayoutManager 的必要元素"></a>自定义 LayoutManager 的必要元素</h2><ul><li><p>继承 <code>RecyclerView.LayoutManager</code> 并实现 <code>generateDefaultLayoutParams() </code>方法</p></li><li><p>重写<code>onLayoutChildren</code> 第一次数据填充的时候数据添加</p></li><li><p>重写 <code>canScrollHorizontally()</code> 和<code>canScrollVertically()</code>方法设定支持滑动的方向</p></li><li><p>重写 <code>scrollHorizontallyBy()</code>和<code>scrollVerticallyBy()</code>方法，在滑动的时候对屏幕以外的 View 进行回收，以及填充即将滑动进入屏幕范围内的 View 进行填充</p></li><li><p>重写 <code>scrollToPosition()</code>和<code>smoothScrollToPosition()</code>方法支持</p></li></ul><p>其中<code>onLayoutChildren</code> 和 <code>scrollHorizontallyBy/scrollVerticallyBy</code> 是最核心且最复杂的方法，这里稍微拎出来讲一下</p><h3 id="onLayoutChildren"><a href="#onLayoutChildren" class="headerlink" title="onLayoutChildren"></a>onLayoutChildren</h3><p>这个方法类似于自定义 ViewGroup 的 onLayout() 方法，RecyclerView 的 LayoutManager.onLayoutChildren 在以下几个时机会被触发：</p><ul><li>当 <code>RecyclerView</code> 首次附加到窗口时</li><li>当<code>Adapter</code>  的数据集发生变化</li><li>当 <code>RecyclerView</code> 被 执行 <code>RequetLayout</code>的时候</li><li>当 <code>LayoutManager</code> 发生变化时</li></ul><h3 id="scrollHorizontallyBy-scrollVerticallyBy"><a href="#scrollHorizontallyBy-scrollVerticallyBy" class="headerlink" title="scrollHorizontallyBy&#x2F;scrollVerticallyBy"></a>scrollHorizontallyBy&#x2F;scrollVerticallyBy</h3><p>方法的主要作用包括：</p><ol><li><p>更新 ItemView 的位置：根据传入的垂直滚动距离（dy 参数），更新子视图在屏幕上的位置。通常调用 <code>offsetChildrenVertical</code> 方法。</p></li><li><p>回收不可见的 ItemView：在滚动过程中，一些 ItemView 可能会离开屏幕，变得不可见。<code>scrollVerticallyBy</code> 方法需要负责回收这些子视图并将它们放入回收池，以便稍后复用。</p></li><li><p>添加新的 ItemView：在滚动过程中，新的 ItemView 可能需要显示在屏幕上。<code>scrollVerticallyBy</code> 方法需要从回收池中获取可复用的视图并将它们添加到屏幕上。这通常涉及到调用 <code>RecyclerView.Recycler</code> 的 <code>getViewForPosition</code> 方法。</p></li><li><p>返回实际滚动距离：由于 ItemView 的数量有限，滚动可能会受到限制。例如，当滚动到列表顶部或底部时，滚动可能会停止。在这种情况下，实际滚动的距离可能会小于传入的 <code>dy</code> 参数。<code>scrollVerticallyBy</code> 方法需要返回实际滚动的距离，以便 <code>RecyclerView</code> 可以正确地更新滚动条和触发滚动事件。</p></li></ol><p>概念就简单讲这么多， talk is cheap show me the code，直接看代码理解会比较深刻</p><h2 id="逐步实现"><a href="#逐步实现" class="headerlink" title="逐步实现"></a>逐步实现</h2><p>要实现一个可用的 LayoutManger 通常我们需要实现以下流程</p><ul><li>数据填充并且只需要填充屏幕范围内的 ItemView</li><li>回收掉屏幕以外的 ItemView</li><li>屏幕外 ItemView 再回到屏幕后，需要重新填充</li><li>对滑动边界边界进行处理</li><li>对 scrollToPosition 和 smoothScrollToPosition进行支持</li></ul><p>我们不用一上来就实现最终的效果，而是一步一步来，看看 LayoutManger 是怎么渐渐地变化，最终能跑起来的。</p><h3 id="0-最简单的-LayoutManager"><a href="#0-最简单的-LayoutManager" class="headerlink" title="0 最简单的 LayoutManager"></a>0 最简单的 LayoutManager</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/MostSimpleLayoutManager.kt">MostSimpleLayoutManager</a>，我们关注 <code>onLayoutChildren</code> 方法:</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayoutChildren</span><span class="params">(recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>?)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 垂直方向的偏移量</span></span><br><span class="line">    <span class="keyword">var</span> offsetTop = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 实际业务中最好不要这样一次性加载所有的数据，这里只是最简单地演示一下整体是如何工作的</span></span><br><span class="line">    <span class="keyword">for</span> (itemIndex <span class="keyword">in</span> <span class="number">0</span> until itemCount) &#123;</span><br><span class="line">        <span class="comment">// 从适配器获取与给定位置关联的视图</span></span><br><span class="line">        <span class="keyword">val</span> itemView = recycler.getViewForPosition(itemIndex)</span><br><span class="line">        <span class="comment">// 将视图添加到 RecyclerView 中</span></span><br><span class="line">        addView(itemView)</span><br><span class="line">        <span class="comment">// 测量并布局视图</span></span><br><span class="line">        measureChildWithMargins(itemView, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 拿到宽高（包括ItemDecoration）</span></span><br><span class="line">        <span class="keyword">val</span> width = getDecoratedMeasuredWidth(itemView)</span><br><span class="line">        <span class="keyword">val</span> height = getDecoratedMeasuredHeight(itemView)</span><br><span class="line">        <span class="comment">// 对要添加的子 View 进行布局</span></span><br><span class="line">        layoutDecorated(itemView, <span class="number">0</span>, offsetTop, width, offsetTop + height)</span><br><span class="line">        offsetTop += height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码主要演示了，如何利用<code>addView</code> <code>layoutDecorated</code>等方法，将 ItemView 添加到 RecyclerView 上。代码可见是 将所有的 ItemView（即使它在屏幕上不可见）一次性全部加载到了 RecyclerView上， 这里一般不这么做，只是这里这里只是最简单地演示一下整体是如何工作的。</p><p>运行在手机上能看到这样的效果：Item数据已经被全部添加到界面上了，并且各个方向的滑动都支持。</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_0.gif?imageView2/2/w/300"><h3 id="1-更合理的数据添加方式"><a href="#1-更合理的数据添加方式" class="headerlink" title="1 更合理的数据添加方式"></a>1 更合理的数据添加方式</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager1">LinearLayoutManager1.kt</a></p><p>对最开始的代码进行优化，只在屏幕范围内的区域进行数据的添加，这样就不需要一次性将所有数据就添加上去，如果 Adapter 的 ItemCount 足够巨大，for all addView 的话，很容易就 OOM。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayoutChildren</span><span class="params">(recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 垂直方向上的的空间大小</span></span><br><span class="line">    <span class="keyword">var</span> remainSpace = height - paddingTop</span><br><span class="line">    <span class="comment">//垂直方向的偏移量</span></span><br><span class="line">    <span class="keyword">var</span> offsetTop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> currentPosition = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (remainSpace &gt; <span class="number">0</span> &amp;&amp; currentPosition &lt; state.itemCount) &#123;</span><br><span class="line">        <span class="comment">// 从适配器获取与给定位置关联的视图</span></span><br><span class="line">        <span class="keyword">val</span> itemView = recycler.getViewForPosition(currentPosition)</span><br><span class="line">        <span class="comment">// 将视图添加到 RecyclerView 中</span></span><br><span class="line">        addView(itemView)</span><br><span class="line">        <span class="comment">// 测量并布局视图</span></span><br><span class="line">        measureChildWithMargins(itemView, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 拿到宽高（包括ItemDecoration）</span></span><br><span class="line">        <span class="keyword">val</span> itemWidth = getDecoratedMeasuredWidth(itemView)</span><br><span class="line">        <span class="keyword">val</span> itemHeight = getDecoratedMeasuredHeight(itemView)</span><br><span class="line">        <span class="comment">// 对要添加的子 View 进行布局</span></span><br><span class="line">        layoutDecorated(itemView, <span class="number">0</span>, offsetTop, itemWidth, offsetTop + itemHeight)</span><br><span class="line">        offsetTop += itemHeight</span><br><span class="line">        currentPosition++</span><br><span class="line">        <span class="comment">// 可用空间减少</span></span><br><span class="line">        remainSpace -= itemHeight</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-对屏幕外的View回收"><a href="#2-对屏幕外的View回收" class="headerlink" title="2 对屏幕外的View回收"></a>2 对屏幕外的View回收</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager2.kt">LinearLayoutManager2</a></p><p>RecylerView 没有 recycler 怎么行呢？当 RecylerView 的 ItemView 滑出屏幕后我们需要对齐进行回收，实现的话需要在 <code>scrollVerticallyBy</code>中，比较复杂的逻辑就是怎么去判断：ItemView 在屏幕以外，最后利用：<code>removeAndRecycleView</code>方法进行回收</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollVerticallyBy</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">      <span class="comment">// 在这里处理上下的滚动逻辑，dy 表示滚动的距离</span></span><br><span class="line">      <span class="comment">// 平移所有子视图</span></span><br><span class="line">      offsetChildrenVertical(-dy)</span><br><span class="line">      <span class="comment">// 如果实际滚动距离与 dy 相同，返回 dy；如果未滚动，返回 0</span></span><br><span class="line">      recycleInvisibleView(dy, recycler)</span><br><span class="line">      <span class="keyword">return</span> dy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回收掉在界面上看不到的 ItemView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> recycler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">recycleInvisibleView</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> totalSpace = orientationHelper.totalSpace</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将要回收View的集合</span></span><br><span class="line">    <span class="keyword">val</span> recycleViews = hashSetOf&lt;View&gt;()</span><br><span class="line">    <span class="comment">// 从下往上滑</span></span><br><span class="line">    <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until childCount) &#123;</span><br><span class="line">            <span class="keyword">val</span> child = getChildAt(i)!!</span><br><span class="line">            <span class="comment">// 从下往上滑从最上面的 item 开始计算</span></span><br><span class="line">            <span class="keyword">val</span> top = getDecoratedTop(child)</span><br><span class="line">            <span class="comment">// 判断最顶部的 item 是否已经完全不可见，如何可见，那说明底下的 item 也是可见</span></span><br><span class="line">            <span class="keyword">val</span> height = top - getDecoratedBottom(child)</span><br><span class="line">            <span class="keyword">if</span> (height - top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            recycleViews.add(child)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &lt; <span class="number">0</span>) &#123;   <span class="comment">// 从上往下滑</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> childCount - <span class="number">1</span> downTo <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> child = getChildAt(i)!!</span><br><span class="line">            <span class="comment">// 从上往下滑从最底部的 item 开始计算</span></span><br><span class="line">            <span class="keyword">val</span> bottom = getDecoratedBottom(child)</span><br><span class="line">            <span class="comment">// 判断最底部的 item 是否已经完全不可见，如何可见，那说明上面的 item 也是可见</span></span><br><span class="line">            <span class="keyword">val</span> height = bottom - getDecoratedTop(child)</span><br><span class="line">            <span class="keyword">if</span> (bottom - totalSpace &lt; height) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            recycleViews.add(child)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真正把 View 移除掉的逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (view <span class="keyword">in</span> recycleViews) &#123;</span><br><span class="line">        <span class="comment">// [removeAndRecycleView]</span></span><br><span class="line">        <span class="comment">// 用于从视图层次结构中删除某个视图，并将其资源回收，以便在需要时重新利用</span></span><br><span class="line">        removeAndRecycleView(view, recycler)</span><br><span class="line">    &#125;</span><br><span class="line">    recycleViews.clear()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行在手机上能看到这样的效果：滑出屏幕外的ItemView 被回收掉了</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_2.gif?imageView2/2/w/300"><h3 id="3-向上滑动的时View的填充"><a href="#3-向上滑动的时View的填充" class="headerlink" title="3 向上滑动的时View的填充"></a>3 向上滑动的时View的填充</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager3.kt">LinearLayoutManager3</a></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollVerticallyBy</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 填充 view</span></span><br><span class="line">    fillView(dy, recycler)</span><br><span class="line">    <span class="comment">// 移动 view</span></span><br><span class="line">    offsetChildrenVertical(-dy)</span><br><span class="line">    <span class="comment">// 回收 View</span></span><br><span class="line">    recycleInvisibleView(dy, recycler)</span><br><span class="line">    <span class="keyword">return</span> dy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 填充重新进入屏幕内的 ItemView</span></span><br><span class="line"><span class="comment"> *     getChildCount():childCount-&gt; 当前屏幕内RecyclerView展示的 ItemView 数量</span></span><br><span class="line"><span class="comment"> *     getItemCount():itemCount-&gt; 最大的 ItemView 数量，也就是 Adapter 传递的数据的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">fillView</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> verticalSpace = orientationVerticalHelper.totalSpace</span><br><span class="line">    <span class="keyword">var</span> remainSpace = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> nextFillPosition = <span class="number">0</span></span><br><span class="line">    <span class="comment">//垂直方向的偏移量</span></span><br><span class="line">    <span class="keyword">var</span> offsetTop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> offsetLeft = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 从下往上滑，那么需要向底部添加数据</span></span><br><span class="line">    <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> anchorView = getChildAt(childCount - <span class="number">1</span>) ?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">val</span> anchorPosition = getPosition(anchorView)</span><br><span class="line">        <span class="keyword">val</span> anchorBottom = getDecoratedBottom(anchorView)</span><br><span class="line">        <span class="keyword">val</span> anchorLeft = getDecoratedLeft(anchorView)</span><br><span class="line">        remainSpace = verticalSpace - anchorBottom</span><br><span class="line">        <span class="comment">// 垂直可用的数据为&lt;0，意外着这时候屏幕底部的位置刚好在最底部的 ItemView 上，还需要向上滑动一点点...我们才能添加 View</span></span><br><span class="line">        <span class="keyword">if</span> (remainSpace &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        nextFillPosition = anchorPosition + <span class="number">1</span></span><br><span class="line">        offsetTop = anchorBottom</span><br><span class="line">        offsetLeft = anchorLeft</span><br><span class="line">        <span class="keyword">if</span> (nextFillPosition &gt;= itemCount) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &lt; <span class="number">0</span>) &#123;  <span class="comment">// 从上往下滑，那么需要向顶部添加数据</span></span><br><span class="line">        <span class="comment">//no-op 暂时不实现从上往下滑的底部数据填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (remainSpace &gt; <span class="number">0</span> &amp;&amp; nextFillPosition &lt; itemCount) &#123;</span><br><span class="line">        <span class="comment">// 从适配器获取与给定位置关联的视图</span></span><br><span class="line">        <span class="keyword">val</span> itemView = recycler.getViewForPosition(nextFillPosition)</span><br><span class="line">        <span class="comment">// 将视图添加到 RecyclerView 中</span></span><br><span class="line">        addView(itemView)</span><br><span class="line">        <span class="comment">// 测量并布局视图</span></span><br><span class="line">        measureChildWithMargins(itemView, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 拿到宽高（包括ItemDecoration）</span></span><br><span class="line">        <span class="keyword">val</span> itemWidth = getDecoratedMeasuredWidth(itemView)</span><br><span class="line">        <span class="keyword">val</span> itemHeight = getDecoratedMeasuredHeight(itemView)</span><br><span class="line">        <span class="comment">// 对要添加的子 View 进行布局，相比onLayoutChildren 里面的实现添加了：offsetLeft（因为我们没有禁止掉 左右的滑动）</span></span><br><span class="line">        <span class="comment">// 试着把 offsetLeft 改成0，也就是最原始的样子，然后左右上下滑滑，你会有意外收获</span></span><br><span class="line">        layoutDecorated(itemView, offsetLeft, offsetTop, itemWidth + offsetLeft, offsetTop + itemHeight)</span><br><span class="line">        offsetTop += itemHeight</span><br><span class="line">        nextFillPosition++</span><br><span class="line">        <span class="comment">// 可用空间减少</span></span><br><span class="line">        remainSpace -= itemHeight</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行在手机上能看到这样的效果：向上滑动的时候，底部陆续有元素填充，但向下滑动的时候没有填充数据</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_3.gif?imageView2/2/w/300"><h3 id="4-两个方向的View填充"><a href="#4-两个方向的View填充" class="headerlink" title="4 两个方向的View填充"></a>4 两个方向的View填充</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager4.kt">LinearLayoutManager4</a></p><p>补齐从上往下滑之后添加的逻辑</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">fillView</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> verticalSpace = orientationVerticalHelper.totalSpace</span><br><span class="line">    <span class="keyword">var</span> remainSpace = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> nextFillPosition = <span class="number">0</span></span><br><span class="line">    <span class="comment">//垂直方向的偏移量</span></span><br><span class="line">    <span class="keyword">var</span> offsetTop = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> offsetLeft = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从下往上滑，那么需要向底部添加数据</span></span><br><span class="line">    <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &lt; <span class="number">0</span>) &#123;  <span class="comment">// 从上往下滑，那么需要向顶部添加数据</span></span><br><span class="line">        <span class="keyword">val</span> anchorView = getChildAt(<span class="number">0</span>) ?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">val</span> anchorPosition = getPosition(anchorView)</span><br><span class="line">        <span class="keyword">val</span> anchorTop = getDecoratedTop(anchorView)</span><br><span class="line">        offsetLeft = getDecoratedLeft(anchorView)</span><br><span class="line">        remainSpace = anchorTop</span><br><span class="line">        <span class="comment">// 垂直可用的数据为&lt;0，意外着这时候屏幕顶部的位置刚好在最底部的 ItemView 上，还需要向下滑动一点点...我们才能添加 View</span></span><br><span class="line">        <span class="keyword">if</span> (anchorTop &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        nextFillPosition = anchorPosition - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (nextFillPosition &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> itemHeight = getDecoratedMeasuredHeight(anchorView)</span><br><span class="line">        <span class="comment">// 新的布局的itemView 的顶部位置应该以 anchorTop - itemHeight 开始</span></span><br><span class="line">        offsetTop = anchorTop - itemHeight</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (remainSpace &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        ((nextFillPosition &lt; itemCount) &amp;&amp; (nextFillPosition &gt;= <span class="number">0</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// 从适配器获取与给定位置关联的视图</span></span><br><span class="line">        <span class="keyword">val</span> itemView = recycler.getViewForPosition(nextFillPosition)</span><br><span class="line">        <span class="comment">// 将视图添加到 RecyclerView 中k，从顶部添加的话，需要加到最前的位置</span></span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            addView(itemView)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addView(itemView, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            offsetTop += itemHeight</span><br><span class="line">            nextFillPosition++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            offsetTop -= itemHeight</span><br><span class="line">            nextFillPosition--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可用空间减少</span></span><br><span class="line">        remainSpace -= itemHeight</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行在手机上能看到这样的效果：向上或者滑动的时候，底部陆续都有元素填充</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_4.gif?imageView2/2/w/300"><h3 id="5-对顶部和底部滑动边界处理"><a href="#5-对顶部和底部滑动边界处理" class="headerlink" title="5 对顶部和底部滑动边界处理"></a>5 对顶部和底部滑动边界处理</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager5.kt">LinearLayoutManager5</a></p><p>对于前面的实现会发现会：不停地下滑或者上滑会留出来巨大的空白。这里对填充 View 的逻辑进行改造，需要进行边界检测。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollVerticallyBy</span><span class="params">(dy: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 填充 view</span></span><br><span class="line">    <span class="keyword">val</span> adjustedDy = fillView(dy, recycler)</span><br><span class="line">    <span class="comment">// 移动 view</span></span><br><span class="line">    offsetChildrenVertical(-adjustedDy)</span><br><span class="line">    <span class="comment">// 回收 View</span></span><br><span class="line">    recycleInvisibleView(adjustedDy, recycler)</span><br><span class="line">    <span class="comment">// 由于需要对边界进行限制，所以需要对原始的 dy 进行修正，这里不再直接返回 dy</span></span><br><span class="line">    <span class="keyword">return</span> adjustedDy</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的整体注释我写在了代码里面，可以看图稍微理解一下，以向上滑动为例：假设这一次滑动的距离非常非常大(想象成10000像素)，如果直接滑动的话，我们有50个元素，每个元素高度100像素，最大高度也只有50x100&#x3D;5000，那么滑动后一定会留下大量空区域。需要对当前传入的这 10000 像素做调整：只给到可滑动的最大距离，如果不能滑动了就返回0。</p><img src="https://cdn.julis.wang/blog/img/5_scroll_limit.png"><p>运行在手机上能看到这样的效果：向上或者滑动的时候，达到最大的位置时候是不能再滑动的。</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_5.gif?imageView2/2/w/300"><h3 id="6-实现-scrollToPosition"><a href="#6-实现-scrollToPosition" class="headerlink" title="6 实现 scrollToPosition"></a>6 实现 scrollToPosition</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager6.kt">LinearLayoutManager6</a></p><p>到这里这个 LinearLayoutManager 看着已经能正常运行了，但一般还需要支持<code>scrollToPosition</code> 和 <code>smoothScrollToPositio</code></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mPendingScrollPosition = RecyclerView.NO_POSITION</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollToPosition</span><span class="params">(position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.scrollToPosition(position)</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= itemCount) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    mPendingScrollPosition = position</span><br><span class="line">    requestLayout()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayoutChildren</span><span class="params">(recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">var</span> currentPosition = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (mPendingScrollPosition != RecyclerView.NO_POSITION) &#123;</span><br><span class="line">        currentPosition = mPendingScrollPosition</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (remainSpace &gt; <span class="number">0</span> &amp;&amp; currentPosition &lt; state.itemCount) &#123;</span><br><span class="line">      …… <span class="comment">// 填充View 的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scrollToPosition</code> 的实现比较简单，如上代码所示：在 <code>scrollToPosition</code>  的时候记录一次目标position，再 requestLayout 一波，还记得之前有提到过：<code>onLayoutChildren</code> 会在 <code>requestLayout</code> 的时候调用一次，于是再将<code>onLayoutChildren</code>逻辑改写，不再从第0个元素开始，而是从目标位置进行布局。</p><p>运行在手机上能看到这样的效果：点击 scrollTo30 将会滑动到 第30个位置。</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_6.gif?imageView2/2/w/300"><h3 id="7-实现-smoothScrollToPosition"><a href="#7-实现-smoothScrollToPosition" class="headerlink" title="7 实现 smoothScrollToPosition"></a>7 实现 smoothScrollToPosition</h3><p>代码查看：<a href="https://github.com/VomPom/LayoutManagerGradually/tree/main/layoutmanager/src/main/java/com/julis/layoutmanager/series/LinearLayoutManager7.kt">LinearLayoutManager7</a>  </p><p>要实现自定义的 smoothScrollToPosition 动画效果，这一块如果要完全自己实现的话比较复杂，可以直接使用系统提供的 LinearSmoothScroller改造,也可以继承 RecyclerView.SmoothScroller 自定义，也可以完全不使用 SmoothScroller， 照着 SmoothScroller 的实现使用类似 ValueAnimator 自定义动画，添加动画 UpdateListener，在 onAnimationUpdate 的时候动态计算布局从而实现滑动动画,这里拿 LinearSmoothScroller 举例:</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">smoothScrollToPosition</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    recyclerView: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    state: <span class="type">RecyclerView</span>.<span class="type">State</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    position: <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt;= itemCount || position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> scroller: LinearSmoothScroller = <span class="keyword">object</span> : LinearSmoothScroller(recyclerView.context) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个方法用于计算滚动到目标位置所需的滚动向量。滚动向量是一个二维向量，包含水平和垂直方向上的滚动距离</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> targetPosition 滑动的目标位置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>  返回一个 PointF 对象，表示滚动向量。</span></span><br><span class="line"><span class="comment">         *              PointF.x 表示水平方向上的滚动距离，</span></span><br><span class="line"><span class="comment">         *              PointF.y 表示垂直方向上的滚动距离</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">computeScrollVectorForPosition</span><span class="params">(targetPosition: <span class="type">Int</span>)</span></span>: PointF &#123;</span><br><span class="line">            <span class="comment">// 查找到屏幕里显示的第 1 个元素与</span></span><br><span class="line">            <span class="keyword">val</span> firstChildPos = getPosition(getChildAt(<span class="number">0</span>)!!)</span><br><span class="line">            <span class="keyword">val</span> direction = <span class="keyword">if</span> (targetPosition &lt; firstChildPos) -<span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            <span class="comment">// x 左右滑动，由于我们只实现了垂直的滑动，所以 x方向为0即可</span></span><br><span class="line">            <span class="comment">// 整数代表正向移动，负数代表反向移动，这里的数值大小不重要，源码里面最终都会 normalize 归一化处理</span></span><br><span class="line">            <span class="keyword">return</span> PointF(<span class="number">0f</span>, direction.toFloat())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算每像素速度</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> displayMetrics</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 返回每一像素的耗时，单位ms，假设返回值是1.0 代表着：1ms 内会滑动 1像素，1s会滑动1000像素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateSpeedPerPixel</span><span class="params">(displayMetrics: <span class="type">DisplayMetrics</span>?)</span></span>: <span class="built_in">Float</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.calculateSpeedPerPixel(displayMetrics)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 滑动速度的插值（实现滑动速度随着滑动时间的变化）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> dx</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateTimeForDeceleration</span><span class="params">(dx: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.calculateTimeForDeceleration(dx)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 很多方法可以使用，不再一一列举</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    scroller.targetPosition = position</span><br><span class="line">    <span class="comment">// 执行默认动画的逻辑</span></span><br><span class="line">    startSmoothScroll(scroller)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行在手机上能看到这样的效果：点击 smoothScrollTo30 将会有个动画效果滑动到第30个位置。</p><img src="https://cdn.julis.wang/blog/img/layoutmanager_gradually_7.gif?imageView2/2/w/300"><p>以上基本上一个自定义 LayoutManager 的雏形就已经完成了，虽然只实现了一个方向的滑动，但是其原理都是一样的，剩下的就是各种细节的打磨了，可以加各种自己想要的效果，比如：指定位置 放大一定的系数，或者更炫酷的滑动动画…</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要整理了自定义 LayoutManager 的必要元素，以及其核心方法 scrollHorizontallyBy&#x2F;scrollVerticallyBy、onLayoutChildren 的作用与调用时机，接下对实现一个简单的 LinearLayoutManger 进行逻辑拆解，从最简单的不滑动回收和填充以及不含滑动边界检测，到最终一个具备基本功能的 LayoutManger</p><p>源码：<a href="https://github.com/VomPom/LayoutManagerGradually">https://github.com/VomPom/LayoutManagerGradually</a></p><p>参考：</p><p><a href="https://juejin.cn/post/6870770285247725581?searchId=202310181005138A6D82B1DEE9C47A9797#heading-23">《看完这篇文章你还不会自定义LayoutManager，我吃X！》</a></p><p><a href="https://github.com/MycroftWong/FlowLayoutManager/blob/master/LayoutManager%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5.md">《&#x2F;LayoutManager分析与实践》</a></p><p><a href="https://wiresareobsolete.com/2014/09/building-a-recyclerview-layoutmanager-part-1/">Building a RecyclerView LayoutManager – Part 1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前大部分涉及到 RecyclerView 页面的 LayoutManager基本上用系统提供的 LinearLayoutManager 、GridLayoutManager 就能解决，但在一些特殊场景上还是需要我们自定义  LayoutManager。之前基本上没有自己写</summary>
      
    
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/tags/technology/"/>
    
  </entry>
  
  <entry>
    <title>Android 基于 J2V8 运行 JavasScript  实践</title>
    <link href="http://vompom.github.com/2023/09/30/Android-J2V8-%E5%AE%9E%E8%B7%B5/"/>
    <id>http://vompom.github.com/2023/09/30/Android-J2V8-%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-09-30T13:11:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>V8 引擎是由 Google 开源的 JavaScript 引擎，Chrome 就是基于 V8 开发，V8 是跨平台的，J2V8 基于 V8 进行开发，使得 js 代码能够在 Android 平台上脱离 WebView 运行。目前，也有很多关于 Android J2V8 的文章，不过讲解不是特别细（可能也是我太菜了，看完了之后，依然遇到很多问题），自己在调研的过程中遇到很多坑，所以这里记录一下，本文主要记录整个 J2V8 框架的使用方法，以及一些坑。</p><h2 id="一、Webpack-打包"><a href="#一、Webpack-打包" class="headerlink" title="一、Webpack 打包"></a>一、Webpack 打包</h2><p>通常业务逻辑的 js 文件是有多个的，我们需要借助一些打包工具将多个文件打包成一个 js 文件供 J2V8 使用，我们可以使用 Gulp、Webpack、Browserify，本文主要讲 Webpack 的使用。<br>主要流程如下：</p><p><strong>编写基础逻辑并通过 <code>module.exports</code> 对外部提供</strong></p><p><strong>编写 <code>index.js</code> 入口文件</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  simpleFunc, complexFunc</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>** 编写<code>webpack.config</code>打包配置**</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/example/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;libExample&#x27;</span>,                 <span class="comment">// j2v8 加载该lib</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;example.js&#x27;</span>,                <span class="comment">// 导出指定命名的 js 文件 </span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>执行 <code>webpack</code> 打包命令</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><h2 id="二、运行-JavaScript"><a href="#二、运行-JavaScript" class="headerlink" title="二、运行 JavaScript"></a>二、运行 JavaScript</h2><p>到这里我们已经有一份通过 Webpack 打包好的 js 文件了，要在 j2v8 中运行 JavaScript 文件，使用以下步骤：</p><p><strong>1、创建一个 V8 实例</strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">V8 v8 = V8.createV8Runtime();</span><br></pre></td></tr></table></figure><p><strong>2、读取 JavaScript 文件</strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scriptStr = String(Files.readAllBytes(Paths.<span class="keyword">get</span>(<span class="string">&quot;example.js&quot;</span>)))</span><br></pre></td></tr></table></figure><p><strong>3、在 V8 实例中执行 JavaScript 代码</strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">v8.executeScript(scriptStr);</span><br></pre></td></tr></table></figure><p>这一步已经让整个 js 文件运行起来，但我们还不能调用我们的方法</p><p><strong>4、读取指定模块</strong></p><p>由于是通过 Webpack 打包，在 Webpack 的 <code>output.library</code> 配置，选项用于将打包后的代码作为一个库(library)暴露出去，以便其他应用程序或模块可以使用它。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rootLib =v8.getObject(libName); <span class="comment">// 这里的 libName 就是 output.library 配置的名字</span></span><br></pre></td></tr></table></figure><p>如果是访问模块的导出对象中的子对象，那么继续：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> subLib =rootLib.getObject(subLibName); <span class="comment">// 这里的 subLibName 是 index 文件中 module.exports 里面的模块名</span></span><br></pre></td></tr></table></figure><p> 如果子对象还有子对象，继续<code>.getObject</code> 即可</p><p><strong>5、运行指定方法</strong></p><p>接下来就简单了，直接通过如下方法执行 js 中的指定方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeVoidFunction</span><span class="params">(String name, V8Array parameters)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">executeStringFunction</span><span class="params">(String name, V8Array parameters)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">executeDoubleFunction</span><span class="params">(String name, V8Array parameters)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeIntegerFunction</span><span class="params">(String name, V8Array parameters)</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><code>V8Object</code> 提供了很多数据格式调用，不过都差不多，主要是在返回值那里帮你实现了数据的转化，如果不想用转化好的格式，希望自己来操作的话，使用<code>public V8Object executeObjectFunction() </code> 拿到返回值，自己去转化即可</p><p><strong>6、释放资源</strong></p><p>由于 V8 运行消耗较多的资源，执行结束的时候要将在过程中创建的所有的资源释放，避免导致内存泄漏。<br>V8提供了close方法，如果只使用 v8.close() 进行释放，或者未关闭过程中有用到 v8 runtime 的变量都会报如下错误，正确的做法是将所有资源进行关闭。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: <span class="number">3</span> Object(s) still exist in runtime</span><br></pre></td></tr></table></figure><h2 id="三、进阶"><a href="#三、进阶" class="headerlink" title="三、进阶"></a>三、进阶</h2><p>通过以上的方式已经能执行很多逻辑了，但在实践过过程中发现：如何 js 的返回值是 Promise 的话不会等到最终的结果给我们，而是直接返回了一个 Promise 对象，以及看不到 <code>console.log</code> 打印的日志…… 诸如此类的问题需要解决，这里主要讲讲这两种方法的实现。</p><p><strong>注册 Native 插件</strong></p><p>J2V8 是一个基于 V8 引擎的 Java 库，它允许在 Java 中执行 JavaScript 代码。由于 J2V8 是在 Java 中运行的，它没有直接访问浏览器或控制台的能力，因此无法直接使用 console.log 函数来输出日志，总结 <strong>J2V8 不能实现以下功能：</strong></p><blockquote><ul><li>浏览器 API：j2v8 是在 Java 中运行的，因此无法直接访问浏览器 API，如 DOM、BOM 等。这意味着 j2v8 无法直接操作网页内容、处理事件等</li><li>文件系统访问：j2v8 在 Java 中运行，无法直接访问文件系统。如果需要访问文件系统，需要使用 Java 提供的文件操作 API。</li><li>定时器：JavaScript 中有多种定时器函数，如 setTimeout、setInterval 等，可以在指定时间后执行代码。但 j2v8 无法实现这些定时器函数，因为它无法直接访问系统的计时器。</li><li>Web Worker：Web Worker 是 JavaScript 中的一个特殊对象，可以在后台线程中执行代码，以避免阻塞主线程。但 j2v8 无法实现 Web Worker，因为它无法直接访问操作系统的线程。</li><li>Node.js API：j2v8 主要是为了在 Java 中执行浏览器端的 JavaScript 代码而设计的，因此无法直接访问 Node.js API。如果需要在 Java 中执行 Node.js 代码，可以考虑使用 Nashorn 等其他工具。</li></ul></blockquote><p>这里是 <code>console.log</code>的一个简单实现：</p><p><code>V8Object</code> 是 J2V8 中的一个类，它代表了一个 JavaScript 对象，对于 <code>console.log</code> 我们可以将 <code>console</code> 看作一个对象，其有一个叫 <code>log</code> 的方法，要实现在 js 中打印日志到 Android Studio 控制台，如下即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConsolePlugin</span> &#123;</span><br><span class="line">    </span><br><span class="line">    fun <span class="title function_">log</span><span class="params">(message: Any)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ConsolePlugin&quot;</span>, message.toString())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun <span class="title function_">register</span><span class="params">(v8: V8)</span> &#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">v8Console</span> <span class="operator">=</span> V8Object(v8)</span><br><span class="line">        <span class="comment">// 第一个 log 表示 在 Java 中该方法的名字，第二个 log 表示在 JavaScript 中调用的名字 </span></span><br><span class="line">        v8Console.registerJavaMethod(<span class="built_in">this</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;log&quot;</span>, arrayOf&lt;Class&lt;*&gt;&gt;(Any::class.java))</span><br><span class="line">        v8Console.setWeak()</span><br><span class="line">        <span class="comment">// 将含有叫&quot;log&quot;方法的一个对象加到运行环境中，该对象被命名为 &quot;console&quot;</span></span><br><span class="line">        v8.add(<span class="string">&quot;console&quot;</span>, v8Console)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConsolePlugin().register(v8)</span><br></pre></td></tr></table></figure><p>具体代码可参考:<a href="https://github.com/VomPom/J2V8_tutorial">J2V8_tutorial</a></p><h4 id="执行返回值是-Promise-类型的方法"><a href="#执行返回值是-Promise-类型的方法" class="headerlink" title="执行返回值是 Promise 类型的方法"></a>执行返回值是 Promise 类型的方法</h4><p>之前将的方法调用都是返回数据为基础类型，由于在 Java&#x2F;kotlin 中没有<code>Promise</code>类型的方法，所以对于 <code>Promise</code> 方法我们需要进行一些特殊处理，我们通过使用 <code>CountDownLatch</code> 可以来实现一个 “异步变同步” 的操作，我们需要考虑的是如何接受到 <code>resolve</code> <code>rejcet</code>的调用，js 中 Promise 的方法使用如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PromiseMethod</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// success got result</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// error...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 J2V8中一样的实现</p><p><strong>获取返回的 Promise 对象</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">promiseObj</span> <span class="operator">=</span> v8.executeFunction(functionName, v8Array) as V8Object</span><br></pre></td></tr></table></figure><p>**执行 Promise 对象的 then 和 catch 方法 **</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jsPromise.apply &#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">onResolveParameter</span> <span class="operator">=</span> V8Array(v8).push(onResolve)</span><br><span class="line">        <span class="type">val</span> <span class="variable">onRejectParameter</span> <span class="operator">=</span> V8Array(v8).push(onReject)</span><br><span class="line">        executeVoidFunction(<span class="string">&quot;then&quot;</span>, onResolveParameter)</span><br><span class="line">        executeVoidFunction(<span class="string">&quot;catch&quot;</span>, onRejectParameter)</span><br><span class="line">        ....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其中 onResolve</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">onResolve</span> <span class="operator">=</span> V8Function(jsRuntime) &#123; receiver, parameters -&gt;</span><br><span class="line">        ……</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>具体代码可参考:<a href="https://github.com/VomPom/J2V8_tutorial">J2V8_tutorial</a></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上基本上能解决大部分 Android 调用 js的代码逻辑了，这里对整体执行的流程进行一个总结</p><p>1、通过 webpack 对多个 .js 文件打包<br>2、初始化 V8 环境并加载 .js 文件<br>3、注册 Java 方法，供 js 进行调用<br>4、读取指定的模板<br>5、执行目标 js 方法，并释放 v8 执行过程中产生的资源</p><h3 id="踩过的一些坑"><a href="#踩过的一些坑" class="headerlink" title="踩过的一些坑"></a>踩过的一些坑</h3><p>1、<code>java.lang.UnsupportedOperationException: StartNodeJS Not Supported.</code></p><p>这个库有一个 <code>NodeJS.createNodeJS()</code>方法，以为是完美结合 NodeJs 的，查了下不太支持 Android，不过也有人提出解决方法：<a href="https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8">https://stackoverflow.com/questions/42574824/how-to-use-nodejs-in-android-using-j2v8</a></p><p>2、<code>java.lang.IllegalStateException: 3 Object(s) still exist in runtime</code></p><p>这是调用 &#96;v8.close&#96;&#96; 总是会遇到的问题，一定需要确保使用了 v8 Runtime 过程变量有被释放掉，可能有时候不知道具体哪个变量没有被释放</p><p>3、<code>setTimeout、setInterval</code> 无效</p><p>这是我最开始遇到的问题，简单想着“既然能执行js代码，那 setTimeout、setInterval 这些方法都是 js 最普通的方法应该没问题吧”，如果有一些平时在 js 很常见的操作如果无法执行，最好 check 一下 J2V8 是否支持</p><p>4、Undefined 相关</p><p>虽然源码里面通过了一个 Undefined 的类，但是不能直接使用，如果方法返回的 Undefined，通过 <code>V8Object</code> 的 <code>isUndefined()</code> 去判断</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>[1]J2V8 <a href="https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/">https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/</a></p><p>[2] Registering Java Callbacks with J2V8 <a href="https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/">https://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/</a></p><p>[3] Simple JS in Node.js <a href="https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html">https://yenhuang.gitbooks.io/android-development-note/content/wrap-js-library/simple-js-with-nodejs.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;V8 引擎是由 Google 开源的 JavaScript 引擎，Chrome 就是基于 V8 开发，V8 是跨平台的，J2V8 基于 V8 进行开发，使得 js 代码能够在 Android 平台上脱离 WebView 运行。目前，也有很多关于 Android J2V8 的</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="JavaScript" scheme="http://vompom.github.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[转]《数字化视频技术概述》</title>
    <link href="http://vompom.github.com/2023/09/15/%E8%BD%AC-%E3%80%8A%E6%95%B0%E5%AD%97%E5%8C%96%E8%A7%86%E9%A2%91%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%E3%80%8B/"/>
    <id>http://vompom.github.com/2023/09/15/%E8%BD%AC-%E3%80%8A%E6%95%B0%E5%AD%97%E5%8C%96%E8%A7%86%E9%A2%91%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%E3%80%8B/</id>
    <published>2023-09-15T12:11:00.000Z</published>
    <updated>2025-09-15T13:23:07.518Z</updated>
    
    <content type="html"><![CDATA[<p>文章内容结构清晰，从最基础的图像概念开始，逐步深入到视频、编解码器、传输和流媒体。主要内容包括：<br>图像基础： 介绍了图像是如何被计算机理解和存储的，包括像素、分辨率、色彩空间（如 RGB 和 YUV）以及色度采样（如 4:2:0）。<br>视频： 将视频定义为一系列帧在时间上的连续，并引出了帧率（FPS）的概念。<br>编解码器（Codec）： 详细介绍了视频压缩的原理，包括帧内预测、帧间预测（I、P、B 帧）、运动补偿、宏块、熵编码、量化和变换。文章特别提到了 FFmpeg，并提供了如何使用它进行视频编码和转码的实例。<br>容器格式（Container）： 解释了容器格式（如 MP4、MKV）的作用，它们用于封装视频流、音频流和元数据。</p><p>原文链接:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章内容结构清晰，从最基础的图像概念开始，逐步深入到视频、编解码器、传输和流媒体。主要内容包括：&lt;br&gt;图像基础： 介绍了图像是如何被计算机理解和存储的，包括像素、分辨率、色彩空间（如 RGB 和 YUV）以及色度采样（如 4:2:0）。&lt;br&gt;视频： 将视频定义为一系列帧</summary>
      
    
    
    
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>[转]OpenGL黑屏及渲染不出来的常见原因总结</title>
    <link href="http://vompom.github.com/2023/01/15/%E8%BD%AC-OpenGL%E9%BB%91%E5%B1%8F%E5%8F%8A%E6%B8%B2%E6%9F%93%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://vompom.github.com/2023/01/15/%E8%BD%AC-OpenGL%E9%BB%91%E5%B1%8F%E5%8F%8A%E6%B8%B2%E6%9F%93%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-15T04:18:00.000Z</published>
    <updated>2025-09-15T13:25:10.075Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做 Unitiy 与原生渲染相关的研究学习，对于OpenGL这块自己也是接触不多，有很多的坑需要自己去踩，做的过程中遇到最多的问题是：<strong>渲染黑屏</strong> 在掘金上搜到这篇文章<a href="https://juejin.cn/post/6844903910742687751">《OpenGL黑屏及渲染不出来的常见原因总结》</a>很不错，于是记录转载过来，方便日后学习以及问题排查。</p><p>原文链接：<br><a href="https://juejin.cn/post/6844903910742687751">https://juejin.cn/post/6844903910742687751</a></p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>做OpenGL开发的同学，想必一定碰到过黑屏的问题，特别是刚接触OpenGL的同学，可能会觉得黑屏问题让人相当头疼，因为OpenGL的查错没有一般编程时那么简单，我们通常是利用glGetError()这个API来获取错误码，但这个方法获取的错误是调用这个方法时，已经产生的错误，它有可能是很久之前产生的，这样查越来还是比较不方便的，而且，有些黑屏以及渲染不出来的情况下，glGetError()也不会报任何错。</p><p>在给大家总结常见的黑屏原因之前，我们先来铺垫一下基础知识，其实屏幕也是一块frame buffer，但它比较特殊，是0号<code>frame buffer</code>，我们如果自己申请frame buffer的话，得到的id是大于0的。那么frame buffer它就会有自己的颜色，如果不特意设置的话，它就是黑色的，因此如果我们渲染操作未正确执行，什么也没渲染出来，自然看到了底色的黑色。</p><p>我们也可以通过<code>glClearColor()+glClear()</code>来设置消除颜色及执行消除操作，来将一个frame buffer清成某种颜色。因此，如果你将frame buffer清成了别的颜色，但其它渲染操作未正确执行，你有可能也不是黑屏，而是你设置的消除颜色，这里也一并总结了，统成为黑屏，同时也包括其它一些不正确的情形。<br>如果不是渲染到屏幕上，是渲染到一个离屏的frame buffer上，同样也会遇到各种黑掉或者渲染不出来的情况，有些原因会同时导致上屏和离屏都黑，有些只影响其中一种情况。</p><p>下面给大家总结一下：</p><ul><li><strong>调用线程的Context不正确</strong></li></ul><p>OpenGL的API在调用时需要有正确的上下文，在Android中称为<code>EGL Context</code>，IOS中是<code>EAGL Context</code>，其它平台有其它平台的叫法，但原理类似。一个线程需要跟EGL Context绑定才能正确使用OpenGL的API，否则调用不会有任何效果，具体可参考我的一篇文章：<a href="https://juejin.cn/post/6844903858380996616">《OpenGL ES 高级进阶：EGL及GL线程》</a>。</p><blockquote><p>【转载注】这也是我碰到的第一个坑，因为从 Unity 调用到 Android 侧的时候，gl渲染环境没有在一个地方。我花了很大的精力去排查前面shader相关的渲染问题，一直没有注意这个问题，所以浪费了大量时间。我个人认为这个问题需要像使用一门新语言的时候要先确保它能打印出”Hello World”一样，是整个流程的前提。</p></blockquote><ul><li><strong>GL Program不正确</strong></li></ul><p>OpenGL渲染需要通过GL Program，它就是一个程序，和我们的普通程序是一个道理，只不过它是运行在GPU上的，如果它不正确了，那自然就渲染不出正确的结果，常见的不正确原因为shader编译失败，通常是因为语法错误，可以用glGetShaderInfoLog()来在编译之后查看相关shader信息，以及在Link后用glGetProgramInfoLog()查看相关program信息，如果得到的信息为空，则说明没有错。</p><ul><li><strong>没有use program</strong></li></ul><p>渲染前需要通过glUseProgran设置本次渲染所用的program，如果未设置则无法执行到对应的shader，自然无法渲染出来。</p><ul><li><strong>未调用glDrawXXX()</strong></li></ul><p>要渲染出来东西，必须调用glDrawXXX()，一般很少出现没调的情况，一般都是低级失误，最好也排查一下。</p><p>对于底层是多buffer实现的surface，渲染后未进行swap buffer<br>常见的是双buffer，此时有一个back buffer和一个front buffer，front buffer是正在显存的这个，back buffer是正在渲染的，如果draw call后没有swap buffer，那back buffer不会呈现出来，因此渲染不出来，这里是特定上屏，如果渲染不是要上屏，则无需考虑这个问题。</p><ul><li><strong>frame buffer的attachment不正确</strong></li></ul><p>在离屏渲染情况下，当我们要渲染到一个frame buffer上，这个frame buffer必须正确绑定了attachment，否则相当于frame buffer是个空壳，它没有任何可用于承载渲染结果的空间。</p><ul><li><strong>顶点attribute值设置错误</strong></li></ul><p>顶点关系到渲染到什么位置，如果设置错误导致渲染的位置在可视范围之外，那么就看不到了，这里的范围是什么呢？如果直接用NDC坐标渲染，那就是-1~1,如果是用世界坐标来渲染，那就要看具体设置的投影矩阵，详细原理可参考我的另一篇文章《OpenGL 3D渲染技术：坐标系及矩阵变换》。</p><p>attribute未启用<br>我们通过想要设置一个attribute的值，需要获取这个attribute的location，并通过glVertexAttribPointer()给它设置值，但别忘了需要使用glGetAttribLocation()来启用这个location，不然设置了也没有用，默认是不启用的。</p><ul><li><strong>VAO&#x2F;VBO未绑定或者绑定错误</strong></li></ul><p>如果是用VAO&#x2F;VBO的方式渲染，在渲染前要绑定正确的VAO&#x2F;VBO，否则等于没指定或者指定错了顶点，就渲染不出来了。</p><ul><li><strong>VAO&#x2F;VBO方式渲染之后未重置，后面接着用非VAO&#x2F;VBO方式渲染</strong></li></ul><p>在用VAO&#x2F;VBO方式渲染之后如果未重置，那么顶点绑定的还是VAO&#x2F;VBO指定的顶点，此时如果再用普通的glVertexAttribPointer()的方式指定顶点渲染，那用法上会冲突，因为VAO&#x2F;VBO的方式要求glVertexAttribPointer()函数不指定顶点数据，而普通用法中glVertexAttribPointer()又要指定顶点数据，此时容易造成顶点混乱，渲染结果不正确。</p><p>View Port设置错误<br>View Port即视口，可以理解成我们通过一个窗口去看见OpenGL世界坐标系里渲染的景物，就像我们通过窗口看到室外的景物一样，如果这个窗口没设置或者设置不正确，也会导致看不到东西，一般情况下，我们会将它设置为surface的大小，这样渲染出来的东西就刚好填满这个surface。</p><ul><li><strong>没有渲染到0号frame buffer</strong></li></ul><p>有时候渲染操作有很多步，想做完这些步骤后，再将做好的结果显示的屏幕上，这时就会用一些frame buffer来做离屏渲染，但在最后一步渲染到屏幕上时，需要将frame buffer绑定回0号，才能上屏。</p><ul><li><strong>渲染了一个不正确的纹理</strong></li></ul><p>例如我们希望对一个纹理做一些处理然后渲染出来，但如果这个纹理本身是不正确的，例如前面的步骤出了一些错，导致给过来的纹理id不正确，比如是0，或者纹理id是正确的，但这个纹理是全黑的或者空的，也会导致黑屏。</p><ul><li><strong>glDrawXXX()方法传递的顶点数不正确</strong></li></ul><p>我们在调用glDrawXXX()，会设置顶点数组的开始位置和数量，如果设置不正确，导致传递的顶点是0个，也会导致渲染不出来任何东西。</p><ul><li><strong>顶点buffer的position不正确</strong></li></ul><p>这一点主要是针对java及kotlin，glVertexAttribPointer()接受数据时是通过一个buffer，而我们往buffer是put数据后，buffer的position会相应地往后移动，因此在调用glVertexAttribPointer()之前，记得将position设回到0，否则它将从末尾开始取数据，当然就取不到了。</p><ul><li><strong>面剔除的原因</strong></li></ul><p>如果开启了cull face，那么会按你指定的cull方式来剔除指定顶点旋转顺序的三角面片，如果视线方向看过去的刚好被剔除了，自然就看不见了。</p><ul><li><strong>未开启颜色混合渲染了有透明度的纹理</strong></li></ul><p>OpenGL默认是不开启颜色混合的，这会导致透明的部分通常会被渲染成黑色，而不是透出下面的颜色，具体可以参数我的一篇文章：《OpenGL ES 高级进阶：颜色混合》。</p><p>作者：程序员kenney</p><p>链接：<a href="https://juejin.cn/post/6844903910742687751">https://juejin.cn/post/6844903910742687751</a></p><p>来源：稀土掘金</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在做 Unitiy 与原生渲染相关的研究学习，对于OpenGL这块自己也是接触不多，有很多的坑需要自己去踩，做的过程中遇到最多的问题是：&lt;strong&gt;渲染黑屏&lt;/strong&gt; 在掘金上搜到这篇文章&lt;a href=&quot;https://juejin.cn/post/684</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="OpenGL" scheme="http://vompom.github.com/tags/OpenGL/"/>
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg.so 编译总结</title>
    <link href="http://vompom.github.com/2023/01/09/FFmpeg-so-%E7%BC%96%E8%AF%91%E6%95%B4%E7%90%86/"/>
    <id>http://vompom.github.com/2023/01/09/FFmpeg-so-%E7%BC%96%E8%AF%91%E6%95%B4%E7%90%86/</id>
    <published>2023-01-09T02:36:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前项目一直使用的 FFmpeg.so 是我从其他团队项目中直接复制过来的，但原来的项目团队不再维护这个库，其中 x264 模块由于一些版权问题需要剔除，所以需要自己重新编译。在编译的过程中踩了很多坑，以及编译 congfigure 有太多的配置，如何减少整体编译出来的大小也是需要花点精力的，本文主要记录编译流程以及相关配置介绍。</p><h2 id="编译介绍"><a href="#编译介绍" class="headerlink" title="编译介绍"></a>编译介绍</h2><p>自己编译主要参考<a href="https://github.com/Timdk857/Android-Architecture-knowledge-2-/blob/master/Android%20%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/Android-%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-(%E5%9B%9B)-%E4%B8%80%E9%94%AE%E7%BC%96%E8%AF%91-32-64-%E4%BD%8D-FFmpeg-4-2-2.md">《一键编译32_64位FFmpeg.4.2.2》</a>，最开始的时候自己一直在 Mac M1 上编译，各种流程也是一比一复刻，但是仍然会有各种问题出现，最常见的就是：</p><blockquote><p>aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</p></blockquote><p>我反复检查了自己的 NDK 的配置，确保是正确的，文章也有提及处理方式，但是尝试下来都无效，在网上搜了一大篇解决方式，也都无效。不过我看他们很多都是用 Linux 系统进行的编译，遂改为使用 Linux 编译，再重新尝试，似乎没有那些个奇奇怪怪的错误了，也打出了最终的包，最后的 so 大小也符合要求。</p><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li>CentOS 7</li><li><a href="https://ffmpeg.org/releases/ffmpeg-4.2.2.tar.bz2">ffmpeg-4.2.2</a></li><li><a href="https://github.com/android/ndk/wiki/Unsupported-Downloads">android-ndk-r20b-linux-x86_64.zip</a></li></ul><h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p>这是我的一份编译脚本，我的需求是进行本地视频抽帧，所以不需要像滤镜、编码、音频相关的配置，只需要视频解码相关的配置，具体配置在下一节有讲解。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">export NDK=.../android<span class="literal">-ndk-r20b</span></span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/llvm/prebuilt/linux<span class="literal">-x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_android</span></span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">./configure \ </span><br><span class="line"><span class="literal">--prefix</span>=<span class="variable">$PREFIX</span> \ </span><br><span class="line"><span class="literal">--enable-neon</span> \ </span><br><span class="line"><span class="literal">--disable-x86asm</span> \ </span><br><span class="line"><span class="literal">--disable-hwaccels</span> \ </span><br><span class="line"><span class="literal">--disable-gpl</span> \ </span><br><span class="line"><span class="literal">--disable-nonfree</span> \ </span><br><span class="line"><span class="literal">--disable-version3</span> \ </span><br><span class="line"><span class="literal">--disable-postproc</span> \ </span><br><span class="line"><span class="literal">--disable-bsfs</span> \ </span><br><span class="line"><span class="literal">--disable-protocols</span> \ </span><br><span class="line"><span class="literal">--enable-protocol</span>=file \ </span><br><span class="line"><span class="literal">--disable-indevs</span> \ </span><br><span class="line"><span class="literal">--disable-outdevs</span> \ </span><br><span class="line"><span class="literal">--disable-debug</span> \ </span><br><span class="line"><span class="literal">--enable-small</span> \ </span><br><span class="line"><span class="literal">--enable-jni</span> \ </span><br><span class="line"><span class="literal">--disable-mediacodec</span> \ </span><br><span class="line"><span class="literal">--disable-decoder</span>=h264_mediacodec \ </span><br><span class="line"><span class="literal">--enable-swscale</span> \ </span><br><span class="line"><span class="literal">--enable-static</span> \ </span><br><span class="line"><span class="literal">--disable-shared</span> \ </span><br><span class="line"><span class="literal">--disable-filters</span> \ </span><br><span class="line"><span class="literal">--disable-avfilter</span> \ </span><br><span class="line"><span class="literal">--disable-encoders</span> \ </span><br><span class="line"><span class="literal">--disable-muxers</span> \ </span><br><span class="line"><span class="literal">--disable-demuxers</span> \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=avi \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=flv \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=h261 \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=h263 \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=h264 \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=hevc \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=mov \ </span><br><span class="line"><span class="literal">--enable-demuxer</span>=m4v \ </span><br><span class="line"><span class="literal">--disable-decoders</span> \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=h263 \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=h263i \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=h263p \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=h264 \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=hevc \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=flv \ </span><br><span class="line"><span class="literal">--enable-decoder</span>=mpeg4 \ </span><br><span class="line"><span class="literal">--disable-parsers</span> \ </span><br><span class="line"><span class="literal">--enable-parser</span>=h264 \ </span><br><span class="line"><span class="literal">--enable-parser</span>=h261 \ </span><br><span class="line"><span class="literal">--enable-parser</span>=h263 \ </span><br><span class="line"><span class="literal">--enable-parser</span>=mpeg4video \ </span><br><span class="line"><span class="literal">--enable-parser</span>=mpegvideo \ </span><br><span class="line"><span class="literal">--disable-htmlpages</span> \ </span><br><span class="line"><span class="literal">--disable-manpages</span> \ </span><br><span class="line"><span class="literal">--disable-podpages</span> \ </span><br><span class="line"><span class="literal">--disable-txtpages</span> \ </span><br><span class="line"><span class="literal">--disable-vaapi</span> \ </span><br><span class="line"><span class="literal">--disable-v4l2-m2m</span> \ </span><br><span class="line"><span class="literal">--disable-nvdec</span> \ </span><br><span class="line"><span class="literal">--disable-nvenc</span> \ </span><br><span class="line"><span class="literal">--disable-ffnvcodec</span> \ </span><br><span class="line"><span class="literal">--disable-dxva2</span> \ </span><br><span class="line"><span class="literal">--disable-d3d11va</span> \ </span><br><span class="line"><span class="literal">--disable-cuvid</span> \ </span><br><span class="line"><span class="literal">--disable-cuda-llvm</span> \ </span><br><span class="line"><span class="literal">--disable-cuda-nvcc</span> \ </span><br><span class="line"><span class="literal">--disable-audiotoolbox</span> \ </span><br><span class="line"><span class="literal">--disable-amf</span> \ </span><br><span class="line"><span class="literal">--disable-iconv</span> \ </span><br><span class="line"><span class="literal">--disable-libxcb</span> \ </span><br><span class="line"><span class="literal">--disable-libxcb-shm</span> \ </span><br><span class="line"><span class="literal">--disable-libxcb-xfixes</span> \ </span><br><span class="line"><span class="literal">--disable-libxcb-shape</span> \ </span><br><span class="line"><span class="literal">--disable-lzma</span> \ </span><br><span class="line"><span class="literal">--disable-sdl2</span> \ </span><br><span class="line"><span class="literal">--disable-securetransport</span> \ </span><br><span class="line"><span class="literal">--disable-xlib</span> \ </span><br><span class="line"><span class="literal">--disable-zlib</span> \ </span><br><span class="line"><span class="literal">--disable-programs</span> \ </span><br><span class="line"><span class="literal">--disable-ffmpeg</span> \ </span><br><span class="line"><span class="literal">--disable-ffplay</span> \ </span><br><span class="line"><span class="literal">--disable-ffprobe</span> \ </span><br><span class="line"><span class="literal">--disable-avdevice</span> \ </span><br><span class="line"><span class="literal">--disable-symver</span> \ </span><br><span class="line"><span class="literal">--cross-prefix</span>=<span class="variable">$CROSS_PREFIX</span> \ </span><br><span class="line"><span class="literal">--target-os</span>=android \ </span><br><span class="line"><span class="literal">--arch</span>=<span class="variable">$ARCH</span> \ </span><br><span class="line"><span class="literal">--cpu</span>=<span class="variable">$CPU</span> \ </span><br><span class="line"><span class="literal">--cc</span>=<span class="variable">$CC</span> \ </span><br><span class="line"><span class="literal">--cxx</span>=<span class="variable">$CXX</span> \ </span><br><span class="line"><span class="literal">--enable-cross-compile</span> \ </span><br><span class="line"><span class="literal">--sysroot</span>=<span class="variable">$SYSROOT</span> \ </span><br><span class="line"><span class="literal">--extra-cflags</span>=<span class="string">&quot;-Os -fpic <span class="variable">$OPTIMIZE_CFLAGS</span>&quot;</span> \ </span><br><span class="line"><span class="literal">--extra-ldflags</span>=<span class="string">&quot;<span class="variable">$ADDI_LDFLAGS</span>&quot;</span></span><br><span class="line"></span><br><span class="line">make clean</span><br><span class="line">make <span class="literal">-j16</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#arm64-v8a</span></span><br><span class="line">ARCH=arm64</span><br><span class="line">CPU=armv8<span class="literal">-a</span></span><br><span class="line">API=<span class="number">21</span></span><br><span class="line">CC=<span class="variable">$TOOLCHAIN</span>/bin/aarch64<span class="literal">-linux-android</span><span class="variable">$API</span><span class="literal">-clang</span></span><br><span class="line">CXX=<span class="variable">$TOOLCHAIN</span>/bin/aarch64<span class="literal">-linux-android</span><span class="variable">$API</span><span class="literal">-clang</span>++</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/toolchains/llvm/prebuilt/linux<span class="literal">-x86_64</span>/sysroot</span><br><span class="line">CROSS_PREFIX=<span class="variable">$TOOLCHAIN</span>/bin/aarch64<span class="literal">-linux-android-</span></span><br><span class="line">PREFIX=<span class="variable">$</span>(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">OPTIMIZE_CFLAGS=<span class="string">&quot;-march=<span class="variable">$CPU</span>&quot;</span></span><br><span class="line"></span><br><span class="line">build_android</span><br><span class="line"></span><br><span class="line"><span class="comment">#armv7-a</span></span><br><span class="line">ARCH=arm</span><br><span class="line">CPU=armv7<span class="literal">-a</span></span><br><span class="line">API=<span class="number">21</span></span><br><span class="line">CC=<span class="variable">$TOOLCHAIN</span>/bin/armv7a<span class="literal">-linux-androideabi</span><span class="variable">$API</span><span class="literal">-clang</span></span><br><span class="line">CXX=<span class="variable">$TOOLCHAIN</span>/bin/armv7a<span class="literal">-linux-androideabi</span><span class="variable">$API</span><span class="literal">-clang</span>++</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/toolchains/llvm/prebuilt/linux<span class="literal">-x86_64</span>/sysroot</span><br><span class="line">CROSS_PREFIX=<span class="variable">$TOOLCHAIN</span>/bin/arm<span class="literal">-linux-androideabi-</span></span><br><span class="line">PREFIX=<span class="variable">$</span>(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">OPTIMIZE_CFLAGS=<span class="string">&quot;-mfloat-abi=softfp -mfpu=vfp -marm -march=<span class="variable">$CPU</span> &quot;</span></span><br><span class="line"></span><br><span class="line">build_android</span><br></pre></td></tr></table></figure><h2 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h2><p>通过执行 <code>./configure --help</code> 能得到所有的配置选项，整个配置也非常好理解，通过 list-xxx 可以知道有哪些子选项，然后再通过 <code>--disable-xxx</code>,或者 <code>--enable-xxx</code> 进行关闭或者打开。以解码为例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--disable-decoders</span>       <span class="comment"># 先关闭所有的解码器</span></span><br><span class="line"><span class="literal">--enable-decoder</span>=flv     <span class="comment"># 然后只打开flv、mpeg4 的支持</span></span><br><span class="line"><span class="literal">--enable-decoder</span>=mpeg4 </span><br></pre></td></tr></table></figure><p>对于<code>--enable-decoder=xxx</code>中的xxx可以通过 <code>./configure --list-decoders</code> 进行查看，同理 <code>encoders</code> <code>demuxers</code> <code>muxers</code> 等都是类似的处理，通过 <code>--help</code> 可以通过 <code>list--xxx</code> 查看不同功能的可以支持的配置，主要有以下：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--list-decoders</span>          show all available decoders</span><br><span class="line"><span class="literal">--list-encoders</span>          show all available encoders</span><br><span class="line"><span class="literal">--list-hwaccels</span>          show all available hardware accelerators</span><br><span class="line"><span class="literal">--list-demuxers</span>          show all available demuxers</span><br><span class="line"><span class="literal">--list-muxers</span>            show all available muxers</span><br><span class="line"><span class="literal">--list-parsers</span>           show all available parsers</span><br><span class="line"><span class="literal">--list-protocols</span>         show all available protocols</span><br><span class="line"><span class="literal">--list-bsfs</span>              show all available bitstream filters</span><br><span class="line"><span class="literal">--list-indevs</span>            show all available input devices</span><br><span class="line"><span class="literal">--list-outdevs</span>           show all available output devices</span><br><span class="line"><span class="literal">--list-filters</span>           show all available filters</span><br></pre></td></tr></table></figure><p>其他的配置就是一些实际性的开关配置，列一些常用的配置：</p><p>配置产物为静态库(.a)或者动态库(.so)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--enable-static         do not build static libraries [no]</span><br><span class="line">--enable-shared         build shared libraries [no]</span><br></pre></td></tr></table></figure><p>配置减少包大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--enable-small           optimize for size instead of speed</span><br></pre></td></tr></table></figure><p><code>--enable-small</code> 的配置项，其实是在config.h里声称了CONFIG_SMALL选项，然后代码内根据CONFIG_SMALL做了一些调整，比如某些string类型就被省掉了，还有一些内置生成的table, 体积也被裁减掉了，用速度换体积。比如这里：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_SMALL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRC_TABLE_SIZE 257</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRC_TABLE_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>配置FFmpeg协议，由于我们使用本地文件，需要再加一个： <code>--enable-protocol=file</code>，要不然解码会报协议相关错误</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--disable-protocols</span>      disable all protocols</span><br></pre></td></tr></table></figure><p>我们只需要在代码中使用 FFmpeg，所以直接禁用命令行工具</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--disable-programs</span>       <span class="keyword">do</span> not build command line programs</span><br><span class="line"><span class="literal">--disable-ffmpeg</span>         disable ffmpeg build</span><br><span class="line"><span class="literal">--disable-ffplay</span>         disable ffplay build</span><br><span class="line"><span class="literal">--disable-ffprobe</span>        disable ffprobe build</span><br></pre></td></tr></table></figure><p>还有几个比较重要的就是，主要是</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">--disable-avdevice</span>       disable libavdevice build</span><br><span class="line"><span class="literal">--disable-swresample</span>     disable libswresample build</span><br><span class="line"><span class="literal">--disable-swscale</span>        disable libswscale build</span><br><span class="line"><span class="literal">--disable-postproc</span>       disable libpostproc build</span><br><span class="line"><span class="literal">--disable-avfilter</span>       disable libavfilter build</span><br></pre></td></tr></table></figure><h2 id="编译遇见的坑"><a href="#编译遇见的坑" class="headerlink" title="编译遇见的坑"></a>编译遇见的坑</h2><p><strong>1、aarch64-linux-android21-clang is unable to create an executable file.<br>C compiler test failed.</strong></p><p>这个问题是困扰我最久的，按照解决方法：<br>原因 1： FFmpeg 4.2.2 版本默认使用了 clang 进行编译<br>解决：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1\. 修改 configure 文件</span><br><span class="line">vim configure</span><br><span class="line">//2\. 把 默认的 clang 修改为 gcc</span><br><span class="line">if test &quot;$target_os&quot; = android; then</span><br><span class="line">   # cc_default=&quot;clang&quot;</span><br><span class="line"> cc_default=&quot;gcc&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因2，检查路径是否正确，主要是 NDK 的位置，以及不同 NDK 相关库可能存在一定的丢失。</p><p>这个问题我在 macOS 上未解决，<strong>换用 CentOS 没有出现过这个编译问题</strong>。</p><p><strong>2、 编译包大小一直不变</strong></p><p>最开始我正常编译的时候发现怎么改配置，最后的包大小都没有发生变化，但是命令行里面各种流程又是在走，最终也有产物。这里一定要关注在执行了编译脚本之后，查看最开始的日志，看看具体是一些什么错，这里日志会刷得很快，如果包大小一直没有发生变化的话，可以执行完之后快速停止，看看是什么错。一般就是<code>C compiler test failed.</code> 或者找不到你的配置，改对即可。正常编译，会在开始后列出你的编译配置。</p><p><strong>3、x86asm 相关的问题</strong></p><p>编译的时候遇到一些 x86asm 的错，按照文章所说即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前项目一直使用的 FFmpeg.so 是我从其他团队项目中直接复制过来的，但原来的项目团队不再维护这个库，其中 x264 模块由于一些版权问题需要剔除，所以需要自己重新编译。在编译的过程中踩了很多坑，以及编译 congfigure 有太多的配置，如何减少整体编译出来的大小</summary>
      
    
    
    
    
    <category term="FFmpeg" scheme="http://vompom.github.com/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>3D LUT 滤镜 shader 源码分析</title>
    <link href="http://vompom.github.com/2022/11/24/LUT-Shader-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://vompom.github.com/2022/11/24/LUT-Shader-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-11-24T03:36:00.000Z</published>
    <updated>2025-09-15T13:11:04.747Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做滤镜相关的渲染学习，目前大部分 LUT 滤镜代码实现都是参考由 GPUImage 提供的 LookupFilter 的逻辑，整个代码实现不多。参考网上的博文也有各种解释，参考了大量博文之后终于理解了，所以自己重新整理了一份，方便以后阅读理解，对整体代码的实现过程结合LUT的原理进行一个简单整理。</p><h2 id="GPUImageLookupFilter-shader-源码"><a href="#GPUImageLookupFilter-shader-源码" class="headerlink" title="GPUImageLookupFilter shader 源码"></a>GPUImageLookupFilter shader 源码</h2><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="keyword">highp</span> <span class="type">vec2</span> textureCoordinate;      </span><br><span class="line"><span class="keyword">varying</span> <span class="keyword">highp</span> <span class="type">vec2</span> textureCoordinate2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> inputImageTexture;  <span class="comment">// 目标纹理，对应原始资源</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> inputImageTexture2; <span class="comment">// 查找表纹理，对应LUT图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="keyword">lowp</span> <span class="type">float</span> intensity;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取原始图层颜色</span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">vec4</span> textureColor = <span class="built_in">texture2D</span>(inputImageTexture, textureCoordinate);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取蓝色通道颜色，textureColor.b 的范围为(0,1)，blueColor 范围为(0,63) </span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">float</span> blueColor = textureColor.b * <span class="number">63.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//quad1为查找颜色所在左边位置的小正方形</span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">vec2</span> quad1;</span><br><span class="line">    quad1.y = <span class="built_in">floor</span>(<span class="built_in">floor</span>(blueColor) / <span class="number">8.0</span>);</span><br><span class="line">    quad1.x = <span class="built_in">floor</span>(blueColor) - (quad1.y * <span class="number">8.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//quad2为查找颜色所在右边位置的小正方形</span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">vec2</span> quad2;</span><br><span class="line">    quad2.y = <span class="built_in">floor</span>(<span class="built_in">ceil</span>(blueColor) / <span class="number">8.0</span>);</span><br><span class="line">    quad2.x = <span class="built_in">ceil</span>(blueColor) - (quad2.y * <span class="number">8.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取到左边小方形里面的颜色值</span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">vec2</span> texPos1;</span><br><span class="line">    texPos1.x = (quad1.x * <span class="number">0.125</span>) + <span class="number">0.5</span>/<span class="number">512.0</span> + ((<span class="number">0.125</span> - <span class="number">1.0</span>/<span class="number">512.0</span>) * textureColor.r);</span><br><span class="line">    texPos1.y = (quad1.y * <span class="number">0.125</span>) + <span class="number">0.5</span>/<span class="number">512.0</span> + ((<span class="number">0.125</span> - <span class="number">1.0</span>/<span class="number">512.0</span>) * textureColor.g);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取到右边小方形里面的颜色值</span></span><br><span class="line">    <span class="keyword">highp</span> <span class="type">vec2</span> texPos2;</span><br><span class="line">    texPos2.x = (quad2.x * <span class="number">0.125</span>) + <span class="number">0.5</span>/<span class="number">512.0</span> + ((<span class="number">0.125</span> - <span class="number">1.0</span>/<span class="number">512.0</span>) * textureColor.r);</span><br><span class="line">    texPos2.y = (quad2.y * <span class="number">0.125</span>) + <span class="number">0.5</span>/<span class="number">512.0</span> + ((<span class="number">0.125</span> - <span class="number">1.0</span>/<span class="number">512.0</span>) * textureColor.g);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取对应位置纹理的颜色 RGBA 值</span></span><br><span class="line">    <span class="keyword">lowp</span> <span class="type">vec4</span> newColor1 = <span class="built_in">texture2D</span>(inputImageTexture2, texPos1);</span><br><span class="line">    <span class="keyword">lowp</span> <span class="type">vec4</span> newColor2 = <span class="built_in">texture2D</span>(inputImageTexture2, texPos2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//真正的颜色是 newColor1 和 newColor2 的混合</span></span><br><span class="line">    <span class="keyword">lowp</span> <span class="type">vec4</span> newColor = <span class="built_in">mix</span>(newColor1, newColor2, <span class="built_in">fract</span>(blueColor));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gl_FragColor</span> = <span class="built_in">mix</span>(textureColor, <span class="type">vec4</span>(newColor.rgb, textureColor.w), intensity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个源码的主要逻辑为：<strong>查找颜色所在位置的小正方形、查找小正方形内的具体颜色、颜色混合</strong>。上面注释已将具体的实现过程描述清楚，但与我们的 LUT 图片割裂，接下来结合 LUT 的实现原理以及具体的数据来形象地描述整个实现流程。</p><p>假设我们输入的参数为：<br>textureColor &#x3D; ver4(.0, .0, 0.5, 1.0)</p><h2 id="查找颜色所在位置的小正方形"><a href="#查找颜色所在位置的小正方形" class="headerlink" title="查找颜色所在位置的小正方形"></a>查找颜色所在位置的小正方形</h2><p>我们知道LUT有64个小正方形，目标是为了找到对应小正方形里面的对应的颜色，我们需要先确认是第几个小正方形，正是通过 textureColor.b * 63 查找</p><p>带入<code>blueColor</code> -&gt; textureColor.b &#x3D; 0.5<br>对 <code>textureColor.b * 63.0</code> &#x3D; 31.5</p><p>也就是说我们需要第 [31.5] 位置小正方形，但是索引(从0-63共64个)都是正数，对于 31.5 索引 我们该怎么确定是 31 还是第 32 个呢？GPUImage给出的一种插值方式就是两个都要，然后进行一次混合，从而使得值能够俊均匀的在两个小正方形色块中。</p><p>具体逻辑为：</p><p>quad1.y &#x3D; floor(floor(blueColor) &#x2F; 8.0) &#x3D; 3，确定为小方块在纵坐标索引3，也就是第4行。</p><img src="https://cdn.julis.wang/blog/img/f2e1e14bc30c4e438664b90fa5ad8103.png?imageView2/2/w/500"><p><code>quad1.x = floor(blueColor) - (quad1.y * 8.0) = 31 - 24 = 7</code></p><p>也就确定了小方块为(3,7) 也就是第4排第8个。</p><img src="https://cdn.julis.wang/blog/img/bc8a47389a654dbeb5e4fc5e5584d1f9.png?imageView2/2/w/500"><p>同理，对于第2个小方块确定的位置为(4,0) 也就是第5排第1个。</p><p> <code>quad2.y = floor(ceil(blueColor) / 8.0) = 4</code></p><p> <code>quad2.x = ceil(blueColor) - (quad2.y * 8.0)= 0</code></p><h2 id="查找小正方形内的具体颜色"><a href="#查找小正方形内的具体颜色" class="headerlink" title="查找小正方形内的具体颜色"></a>查找小正方形内的具体颜色</h2><p>已经获取到对应的方块了，接下来需要确定方块内的像素的位置了。一般一个LUT的大小为 512x512，由8x8小方块构成，也就是每个方块的的像素为64x64，如下图所示：</p><img src="https://cdn.julis.wang/blog/img/a4d6f390dd7b41fab75b568b37fb1e08.png?imageView2/2/w/500"><p>计算x坐标的逻辑为：</p><p><code>texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r)</code></p><p>这一段是相对比较难理解的，我们可以分几部分进行理解：</p><p>第一部分：<strong>(quad1.x * 0.125)</strong></p><p>  我们得到 quad1.x &#x3D; 7，也就是第8列，*0.125将坐标转化在(0,1)之间，也就是得到在01坐标系内如图红线的位置。</p><img src="https://cdn.julis.wang/blog/img/56098332877d4724beae4000c4fdf5fa.png?imageView2/2/w/500"><p>第二部分：<strong>((0.125 - 1.0&#x2F;512.0) * textureColor.r)</strong></p><p>我们可以把它当成 <code>(63.0/512.0)* textureColor.r</code> , <code>63.0/512.0</code>代表着一个512x512中每个小方块的64份数据（为什么是63？别忘了0的存在），textureColor.r 数据在 0-1之间，这样就能确认在第一部分结果基础之上的偏移值。</p><img src="https://cdn.julis.wang/blog/img/7b3cba46937a4be4b0e45bc3077d3aad.png?imageView2/2/w/500"><p>第三部分：<strong>0.5&#x2F;512.0</strong></p><p>这一部分主要是 +0.5 做四舍五入运算，为保证第512行取到的是511.5&#x2F;512，第1行取到的是 0.5&#x2F;512.0。</p><p>同理，计算y的坐标，以及计算另一个小正方形内的位置是一样的。</p><p>最后在通过对从两个小正方形获取到的颜色进行 mix，并返回给着色器，GPU再对原始图像进行每一个像素点绘制，从而实现滤镜的效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LUT 对应的 Shader 执行过程主要为：<strong>查找颜色所在位置的小正方形、查找小正方形内的具体颜色、颜色混合</strong>，整个流程都比较好理解，但代码相对而言比较难理解，网上看了很多其他的大佬写的一些文章，最开始自己看的时候也是很难理解的，后面终于悟了，所以想通过自己的理解，尽力更形象地解释（虽然可能也没有很形象），如果还有什么疑问，欢迎一起交流学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在做滤镜相关的渲染学习，目前大部分 LUT 滤镜代码实现都是参考由 GPUImage 提供的 LookupFilter 的逻辑，整个代码实现不多。参考网上的博文也有各种解释，参考了大量博文之后终于理解了，所以自己重新整理了一份，方便以后阅读理解，对整体代码的实现过程结合</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>Unity 实现利用 Andorid 能力进行视频渲染播放</title>
    <link href="http://vompom.github.com/2022/10/25/Unity-%E5%AE%9E%E7%8E%B0%E5%88%A9%E7%94%A8-Andorid-%E8%83%BD%E5%8A%9B%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%B8%B2%E6%9F%93%E6%92%AD%E6%94%BE/"/>
    <id>http://vompom.github.com/2022/10/25/Unity-%E5%AE%9E%E7%8E%B0%E5%88%A9%E7%94%A8-Andorid-%E8%83%BD%E5%8A%9B%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%B8%B2%E6%9F%93%E6%92%AD%E6%94%BE/</id>
    <published>2022-10-25T02:00:00.000Z</published>
    <updated>2025-09-15T13:10:48.829Z</updated>
    
    <content type="html"><![CDATA[<p>在 Unity 中使用 Android 侧提供的视频渲染相关的能力，有两种方案可选：</p><p>第一种是将渲染播放页单独做一个页面，在 Unity事件交互的时候打开对应 Activity 页面，或者获取到 Unity 创建的 Acitivity 动态添加 View。</p><p>第二种是只借助 Android 的渲染能力，将数据渲染到 Unity 的控件上。</p><p>两种方案各有优劣，第一种大大地减少了播放器相关的开发工作量，整个页面逻辑可以实现复用，但是交互页面的话 iOS&#x2F;Android 需要写两套。第二种实现成本相对较高，但是交互可以由 Unity 侧进行，只是播放器使用封装好的 plugin 进行，能达到交互相对较统一，本文也主要是讲述该方案的实现。</p><h2 id="Android-平台基本播放逻辑"><a href="#Android-平台基本播放逻辑" class="headerlink" title="Android 平台基本播放逻辑"></a>Android 平台基本播放逻辑</h2><p>在正式开发改造之前，对 Android 侧的一个播放器渲染流程进行简单的介绍，以 MediaPlayer 为例，利用 MediaPlayer 进行视频解码渲染，并将视频最后输出到 SurfaceView 上,一次播放器视频渲染到View上的的主要代码流程为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initPlayer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MediaPlayer</span> <span class="variable">mediaPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediaPlayer</span>();</span><br><span class="line">    <span class="type">SurfaceView</span> <span class="variable">surfaceView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SurfaceView</span>(activity);</span><br><span class="line">    surfaceHolder = surfaceView.getHolder();</span><br><span class="line">    surfaceHolder.addCallback(^ &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">            <span class="type">Surface</span> <span class="variable">surface</span> <span class="operator">=</span> holder.getSurface();</span><br><span class="line">            mediaPlayer.setSurface(surface);</span><br><span class="line">            mediaPlayer.prepareAsync();</span><br><span class="line">        &#125;</span><br><span class="line">         ……</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mediaPlayer.setDataSource(URI...);</span><br><span class="line">    mediaPlayer.setOnPreparedListener(mp -&gt; mp.start());   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>对于渲染 <code>mediaPlayer.setSurface(surface)</code> 设为播放器解码数据的接受器，Surface 来自于 SurfaceView。</p><p>播放器是将数据图形绘制在 Surface 对象上，Surface中会关联一个 BufferQueue 用于提供图像数据缓存，SurfaceFlinger 会把 Surface 对应的图像层混合在一起，将其输出到 FrameBuffer 中（Framebuffer就是一块内存区域，它通常是显示驱动的内部缓冲区在内存中的映射），最后在屏幕上看到合成的图像。</p><p>整个流程引入外部大佬的一张图所示：</p><img src="https://cdn.julis.wang/blog/img/k3u1fbpfcp.jpg"><h2 id="Unity-中的一些改造"><a href="#Unity-中的一些改造" class="headerlink" title="Unity 中的一些改造"></a>Unity 中的一些改造</h2><p>上面的流程最终是通过播放器解码渲染到 SurfaceView 上，当然，你可以通过获取到 UnityPlayer 对应的 Acitivity 将这个 SurfaceView 动态添加到当前界面，实现“在 Unity 中利用 Android 能力进行视频渲染”。</p><p>所以需要对其进行改造，我们的目的是实现 Android 播放器数据渲染到 Untiy 的组件中。实现这一过程需要借助 FBO(Frame Buffer Object) 的能力。</p><h3 id="（一）FBO"><a href="#（一）FBO" class="headerlink" title="（一）FBO"></a>（一）FBO</h3><p>在 OpenGL 渲染管线中几何数据和纹理经过变换和一些测试处理，最后以二维像素的形式显示在屏幕上。OpenGL管线的最终渲染目的地被称作帧缓存(framebuffer)，OpenGL渲染管线的最终位置是在帧缓冲区中，默认情况下 OpenGL 使用的是窗口系统提供的帧缓冲区。</p><p>但有些场景是不想要直接渲染到窗口上的(例如加视频特效)，于是 OpenGL 提供了一种方式来创建额外的帧缓冲区对象(FBO)。使用帧缓冲区对象，OpenGL 可以将原先绘制到窗口提供的帧缓冲区重定向到 FBO 之中。FBO本身不是一块内存，没有空间，真正存储东西，可实际读写的是依附于FBO的东西：纹理(texture)和渲染缓存(renderbuffer)，依附的方式，是一个二维数组来管理，结构如图所示：</p><p><img src="https://www.songho.ca/opengl/files/gl_fbo01.png?height=278&width=380"></p><h3 id="（二）具体实现"><a href="#（二）具体实现" class="headerlink" title="（二）具体实现"></a>（二）具体实现</h3><p>使用 FBO 我们可以将渲染目标渲染到其他的空间，我们目的是将播放器解码后的数据渲染到 Unity 控件的纹理空间中。<br>渲染播放器将输出到 FBO 中，FBO 指向 Unity 控件数据的输入，从而实现：Android 的播放器输出数据显示到 Unity 的控件中。</p><h3 id="（三）从渲染输出数据到外部纹理"><a href="#（三）从渲染输出数据到外部纹理" class="headerlink" title="（三）从渲染输出数据到外部纹理"></a>（三）从渲染输出数据到外部纹理</h3><p>由于 <code>mediaPlayer.setSurface(surface)</code> 对应的 Surface 来源于 SurafaceView，会直接渲染到屏幕上，这里我们需要使用 构造一个新的 SurfaceTexture 以将图像流式传输到给定的 OpenGL 纹理;</p><p>要获取到播放器渲染得数据，需要借助 SurfaceTexture ，SurfaceTexture 是Surface 和 OpenGL ES 纹理的结合，其对图像流的处理并不直接显示，而是从图像流中捕获帧作为 OpenGL 的外部纹理，图像流来自相机预览和视频解码。</p><p>SurfaceTexture 创建的 Surface 是数据的生产者，而 SurfaceTexture 是对应的消费者，Surface 接收媒体数据并将数据发送到 SurfaceTexture，当调用 updateTexImage 的时候，创建SurfaceTexture 的纹理对象相应的内容将更新为最新图像帧，也就是会将图像帧转换为 GL 纹理，并将该纹理绑定到 GL_TEXTURE_EXTERNAL_OES 纹理对象上。具体实现逻辑参考：<a href="https://juejin.cn/post/7012517274768179236">Android Opengl OES 纹理渲染到 GL_TEXTURE_2D</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SurfaceTexture</span> <span class="variable">surfaceTexture</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SurfaceTexture</span>(videoTextureId);</span><br><span class="line">player.setUpSurface(<span class="keyword">new</span> <span class="title class_">Surface</span>(surfaceTexture), width, height);</span><br><span class="line">surfaceTexture.setDefaultBufferSize(width, height);</span><br><span class="line">surfaceTexture.setOnFrameAvailableListener(surfaceTexture -&gt; &#123;……&#125;);;</span><br></pre></td></tr></table></figure><p>其中 videoTextureId 来源于创建的 OES 纹理：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">createOESTextureID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] texture = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 创建纹理对象，一个容器对象，保存渲染所需要的纹理数据，例如：图像数据</span></span><br><span class="line">        <span class="comment">//在OpenGL 中纹理对象是一个无符号整数，是一个纹理对象的句柄</span></span><br><span class="line">        GLES30.glGenTextures(texture.length, texture, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定纹理ID到纹理单元的纹理目标上</span></span><br><span class="line">        GLES30.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, texture[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置纹理参数</span></span><br><span class="line">        ……</span><br><span class="line"></span><br><span class="line">        GLES30.glGenerateMipmap(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);</span><br><span class="line">        <span class="keyword">return</span> texture[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="（四）FBO纹理数据到-Unity-的纹理数据"><a href="#（四）FBO纹理数据到-Unity-的纹理数据" class="headerlink" title="（四）FBO纹理数据到 Unity 的纹理数据"></a>（四）FBO纹理数据到 Unity 的纹理数据</h3><p>学习了解到Unity中可以使用 RawImage 或者 quad 等相关控件可以显示纹理，这里以 RawImage 为例。在 Unity 脚本编写初始化的逻辑，构造一个 Texture2D 对象，将句柄传递到 Android，并赋值给 RawImage，并将texture id 传递到 Android 平台，完成一次渲染的重定向。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">InitPlayer</span>()</span></span><br><span class="line"> &#123;    </span><br><span class="line">    Texture2D texture2D = <span class="keyword">new</span> Texture2D(width, height, TextureFormat.RGB24, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    androidObj.Call(<span class="string">&quot;init&quot;</span>, (<span class="built_in">int</span>)texture2D.GetNativeTexturePtr(), width, height);</span><br><span class="line">    RawImage.texture = texture2D;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建FBO</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">createFBO</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] fbo = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">    GLES30.glGenFramebuffers(fbo.length, fbo, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fbo[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为<code>SurfaceTexture</code> 设置了 <code>OnFrameAvailableListener</code> 后，当有新的图形流数据生成之后，就可以通过  <code>mSurfaceTexture.updateTexImage()</code> 将当前图片流更新到纹理所关联的OpenGLES中纹理，并绘制 FBO.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publc <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 绑定 FrameBuffer 到当前的绘制环境上， 后续 GL 绘制都会到这个 framebuffer</span></span><br><span class="line">    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fbo[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.把一个2D纹理作为帧缓冲区附着</span></span><br><span class="line">    <span class="comment">//即所有渲染操作的结果将会被储存在 unityTextureId 对应的纹理图像中</span></span><br><span class="line">    GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, unityTextureId, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定指定纹理到当前激活的纹理单元</span></span><br><span class="line">    GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, videoTextureId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//…… 省略 Opengl 绘制的常规流程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步是最关键的，实现了将 FBO 的输出指向 Unity 里面创建的纹理，也就实现了 Android 渲染与 Unity 之间的数据打通。</p><p>这里的 unityTextureId 来源于在 Unity 中初始化的 <code>(int)texture2D.GetNativeTexturePtr()</code>值。</p><p>整体的流程为：</p><img src="https://cdn.julis.wang/blog/img/bb890ed53d3e449391813b46e6dbec4e.png"><p>效果图：</p><img width="40%" src="https://cdn.julis.wang/blog/img/e9b8deec9acf448b8498471b287a2536.gif"><p>图中播放视频区域为 Unity 的 RawImage 控件，渲染的视频通过 Pag 等相关素材由渲染SDK合成。</p><p>如图所示，视频画面正常地进行渲染，图中有两个区域展示了视频画面，上面的使用的 Quad 组件，下面是用的 RawImage，流程都一直，只是在 Unity 使用 Texture2D 的时候通过 <code>Quad.mainTexture = texture2D</code> 赋值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲了 Unity 利用 Android 提供的能力进行视频相关的特效渲染的方案，总体正常运行。还需要一些优化，例如对 <code>Multithreaded Rendering</code>配置还未支持，以及一些逻辑可能受限于游戏侧的配置，例如图形渲染的配置使用的 OpenGL3.0，如果使用 OpenGL2.0 或者 Vulkan，还需要单独调整相关逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Unity 中使用 Android 侧提供的视频渲染相关的能力，有两种方案可选：&lt;/p&gt;
&lt;p&gt;第一种是将渲染播放页单独做一个页面，在 Unity事件交互的时候打开对应 Activity 页面，或者获取到 Unity 创建的 Acitivity 动态添加 View。&lt;/</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="Unity" scheme="http://vompom.github.com/tags/Unity/"/>
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>我写了一个场所码小工具（上海实用）</title>
    <link href="http://vompom.github.com/2022/07/03/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9C%BA%E6%89%80%E7%A0%81%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://vompom.github.com/2022/07/03/%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9C%BA%E6%89%80%E7%A0%81%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-07-03T15:14:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着新冠疫情的常态化，以上海为例，出示健康码、扫码场所码已经成了每天进出地铁、公司必备操作。对于上班工作，每天的场所码都是同一个地点，对应的场所码图片也不会发生变化，每次扫场所码的时候要不就是前面有很多人一起挤着，或者遇到下雨天不方便等情况。对于我自己而言，我会把场所码保存下来，方便下一次“扫场所码”，但由于存在图库，每次依然需要打开支付宝或者微信选择对应的图片进行扫描，所以就做了个工具，实现：<strong>一键打开健康码、自动保存场所码、一键打开存储的场所码。</strong></p><h2 id="小工具使用"><a href="#小工具使用" class="headerlink" title="小工具使用"></a>小工具使用</h2> <img width="40%" src="https://cdn.julis.wang/blog/img/af7fdb3bd9884abf9e8bacfa04936511.png"><p>如图所示提供两个按钮：</p><ul><li>扫一扫</li></ul><p>扫一扫主要是为了扫场所码，它会扫码对应的二维码图片进行扫描（或者从相册进行读取），识别到对应的场所码信息会自动跳转到支付宝（当前只支持打开支付宝的场所码），并将这一次的结果保存到数据库中。如果下次需要同一个场所码，可以从列表中选择对应的场所码数据并点击直接跳转到场所码，不需要再进行手动扫描。</p><ul><li>健康码</li></ul><p>主要是实现一键打开健康码功能</p><p>对于场所码的信息，在第一次添加的过程中会弹出提示框提示修改场所码的信息进行备注，当然也可以在对应的类目左滑进行编辑操作。</p>  <img width="40%" src="https://cdn.julis.wang/blog/img/94555e91ef1f4a51942f1a80c349e6d6.png">  <img width="40%" src="https://cdn.julis.wang/blog/img/0d09051321934a7e8936209a94b6d110.png"><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>整个实现是使用Flutter写的，能实现跨平台，但由于iOS需要开发者证书相关上架AppStore较为麻烦，暂时没法进行分发。</p><p>Android 同学可以扫描下面的二维码进行体验使用，或者点击 <a href="https://www.pgyer.com/W4La">场所码小助手</a>去该页面下载</p><img src="https://www.pgyer.com/app/qrcode/W4La" width = 40% alt="图片名称" align=center /> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着新冠疫情的常态化，以上海为例，出示健康码、扫码场所码已经成了每天进出地铁、公司必备操作。对于上班工作，每天的场所码都是同一个地点，对应的场所码图片也不会发生变化，每次扫场所码的时候要不就是前面有很多人一起挤着，或者遇到下雨天不方便等情况。对于我自己而言，我会把场所码保存</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FFmpeg之AVFrame转Android Bitmap</title>
    <link href="http://vompom.github.com/2022/05/22/FFmpeg%E4%B9%8BAVFrame%E8%BD%ACAndroid-Bitmap/"/>
    <id>http://vompom.github.com/2022/05/22/FFmpeg%E4%B9%8BAVFrame%E8%BD%ACAndroid-Bitmap/</id>
    <published>2022-05-22T13:03:00.000Z</published>
    <updated>2025-09-15T13:06:47.170Z</updated>
    
    <content type="html"><![CDATA[<p>此前很多工作都设计到使用 FFmpeg 对视频帧进行获取，在 FFmpeg 解码视频文件获取到帧数据结构是 <code>AVFrame</code>, 对于应用层我们没有办法直接拿到进行数据处理，需要转换为 Android 平台特有的处理结构。而我是需要对应的帧图片数据，那么在 Android 侧需要将其转化为 <code>Bitmap</code> ,之前整理的过程中发现了这篇<a href="https://segmentfault.com/a/1190000016674715?utm_source=sf-similar-article">《Android音视频开发】从AVFrame到MediaFrame数组(二)》</a>博客文章 ，觉得写得很不错，非常精简，适合我的需求，于是对齐进行整理，并标注一下自己在过程中遇到的一些坑点。</p><h2 id="Native层创建Bitmap"><a href="#Native层创建Bitmap" class="headerlink" title="Native层创建Bitmap"></a>Native层创建Bitmap</h2><p><code>Bitmap</code> 是对 <a href="https://docs.microsoft.com/en-us/dotnet/api/skiasharp.skbitmap?view=skiasharp-2.80.2">SkBitmap</a> 的包装。具体说来， Bitmap 的实现包括 Java 层和 JNI 层，JNI 层依赖 Skia，<code>SkBitmap</code> 本质上可简单理解为内存中的一个字节数组</p><p>想要生成 <code>Bitmap</code>,  我们首先需要构造一个 <code>Bitmap</code> 对象，Java层有很多种方式可以生成Bitmap对象，最简单的方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Bitmap.createBitmap(width,height,<span class="keyword">new</span> <span class="title class_">Bitmap</span>.Config.ARGB_8888)</span><br></pre></td></tr></table></figure><p>由于整个 <code>FFmpeg</code>的操作在 JNI 侧进行，对应的操作需要使用 <code>JNIEnv</code>  进行相关的调用，主要逻辑如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">jobject <span class="title">create_bitmap</span><span class="params">(JNIEnv *env, <span class="type">int</span> width, <span class="type">int</span> height)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找到 Bitmap.class 和 该类中的 createBitmap 方法</span></span><br><span class="line">    jclass clz_bitmap = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/graphics/Bitmap&quot;</span>);</span><br><span class="line">    jmethodID mtd_bitmap = env-&gt;<span class="built_in">GetStaticMethodID</span>(</span><br><span class="line">            clz_bitmap, <span class="string">&quot;createBitmap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置 Bitmap</span></span><br><span class="line">    jstring str_config = env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;ARGB_8888&quot;</span>);</span><br><span class="line">    jclass clz_config = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;android/graphics/Bitmap$Config&quot;</span>);</span><br><span class="line">    jmethodID mtd_config = env-&gt;<span class="built_in">GetStaticMethodID</span>(</span><br><span class="line">            clz_config, <span class="string">&quot;valueOf&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Landroid/graphics/Bitmap$Config;&quot;</span>);</span><br><span class="line">    jobject obj_config = env-&gt;<span class="built_in">CallStaticObjectMethod</span>(clz_config, mtd_config, str_config);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 Bitmap 对象</span></span><br><span class="line">    jobject bitmap = env-&gt;<span class="built_in">CallStaticObjectMethod</span>(</span><br><span class="line">            clz_bitmap, mtd_bitmap, width, height, obj_config);</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取Bitmap像素数据地址，并锁定"><a href="#获取Bitmap像素数据地址，并锁定" class="headerlink" title="获取Bitmap像素数据地址，并锁定"></a>获取Bitmap像素数据地址，并锁定</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *addr_pixels;</span><br><span class="line"><span class="built_in">AndroidBitmap_lockPixels</span>(env, bitmap, &amp;addr_pixels);</span><br></pre></td></tr></table></figure><p>解释一下这两句话：</p><blockquote><p>第一句的作用声明并定义一个指向任意类型的指针变量，名称是addr_pixels。我们定义它的目的，是让它指向bitmap像素数据(即:<br>addr_pixels的值为bitmap像素数据的地址)。注意哦，这时候，addr_pixels的值是一个随机的值(假定此时为：0x01)，由系统分配，它还不指向bitmap像素数据。<br>第二句话的作用就是将bitmap的像素数据地址赋值给addr_pixels，此时它的值被修改(假定为：0x002)。并且锁定该地址，保证不会被移动。【注：地址不会被移动这里我也不太懂什么意思，有兴趣的可以去查看该方法的API文档】<br>【注：】此时的bitmap由像素数据的地址，但是该地址内还没有任何像素数据哦，或者说它的像素数据为\0</p></blockquote><p>到这里，我们已经有了源像素数据在AVFrame中，有了目的像素数据地址addr_pixels，那么接下来的任务就是将AVFrame中的像素数据写入到addr_pixels指向的那片内存中去。</p><h2 id="向Bitmap中写入像素数据"><a href="#向Bitmap中写入像素数据" class="headerlink" title="向Bitmap中写入像素数据"></a>向Bitmap中写入像素数据</h2><p>这里要说一下，我们获取到的AVFrame的像素格式通常是YUV格式的，而Bitmap的像素格式通常是RGB格式的。因此我们需要将YUV格式的像素数据转换成RGB格式进行存储。而RGB的存储空间Bitmap不是已经给我门提供好了吗？嘿嘿，直接用就OK了，那现在问题就是YUV如何转换成RGB呢？<br>关于YUV和RGB之间的转换，我知道的有三种方式：</p><ul><li>通过公式换算</li><li>FFmpeg提供的libswscale</li><li>Google提供的libyuv<br>这里我们选择libyuv因为它的性能好、使用简单。</li></ul><p>说它使用简单，到底有多简单，嘿，一个函数就够了！！</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">libyuv::<span class="built_in">I420ToABGR</span>(frame-&gt;data[<span class="number">0</span>], frame-&gt;linesize[<span class="number">0</span>], <span class="comment">// Y</span></span><br><span class="line">                   frame-&gt;data[<span class="number">1</span>], frame-&gt;linesize[<span class="number">1</span>], <span class="comment">// U</span></span><br><span class="line">                   frame-&gt;data[<span class="number">2</span>], frame-&gt;linesize[<span class="number">2</span>], <span class="comment">// V</span></span><br><span class="line">                   (<span class="type">uint8_t</span> *) addr_pixels, linesize,  <span class="comment">// RGBA</span></span><br><span class="line">                   frame-&gt;width, frame-&gt;height);</span><br></pre></td></tr></table></figure><p>解释一下这个函数：</p><ul><li>I420ToABGR: I420表示的是YUV420P格式，ABGR表示的RGBA格式(execuse me?? 是的，你没看错，Google说RGBA格式的数据在底层的存储方式是ABGR，顺序反过来，看下libyuv源码的函数注释就知道了)</li><li>frame-&gt;data&amp;linesize: 这些个参数表示的是源YUV数据，上面有标注</li><li>(uint8_t *) addr_pixels: 嘿，这个就是说往这块空间里写入像素数据啦</li><li>linesize: 这个表示的是该图片一行数据的字节大小，Bitmap按照RBGA格式存储，也就是说一个像素是4个字节，那么一行共有：frame-&gt;width 个像素，所以：<br>linesize &#x3D; frame-&gt; width * 4</li></ul><p>【注：】关于这一小块功能的实现，可能其他地方你会看到这样的写法，他们用了如下接口：</p><p>&#x2F;&#x2F; 思路</p><blockquote><p>是：新建一个AVFrame(RGB格式)，通过av_image_fill_arrays来实现AVFrame(RGB)中像素数据和Bitmap像素数据的关联，也就是让AVFrame(RGB)像素数据指针等于addr_pixels<br>pRGBFrame &#x3D; av_frame_alloc() av_image_get_buffer_size()<br>av_image_fill_arrays() &#x2F;*<br>我也是写到这里的时候，才想到这个问题，为什么要这样用呢，直接使用addr_pixels不是也一样可以么？<br>不过大家都这么用，应该是有它不可替代的使用场景的。因此这里也说一下av_image_fill_arrays这个函数。<br>*&#x2F;</p><p>&#x2F;&#x2F; TODO: 解释下这个函数的作用 av_image_fill_arrays(dst_data, dst_linesize,<br>src_data, pix_fmt, width, height, align); 它的作用就是</p><ol><li>根据src_data，设置dst_data，事实上根据现象或者自己去调试，可以发现dst_data的值就是src_data的值(我印象中好像值是相同的，这会我忘了，后面我再验证下)</li><li>根据pix_fmt, width, height设置linesize的值，其实linesize的计算就和我上面给出的那个公式是一样子的值</li></ol></blockquote><p>OK, 函数执行完毕，我们Bitmap就有了像素数据，下面就是把Bitmap上传给Java层</p><h2 id="Native回调Java接口"><a href="#Native回调Java接口" class="headerlink" title="Native回调Java接口"></a>Native回调Java接口</h2><p>说下Java层</p><p>有一个MainActivity.java用于界面的显示<br>有一个JNIHelper.java用于Java层和Native层的沟通</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNIHelper</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceived</span><span class="params">(Bitmap bitmap)</span>&#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span> Java层接收到Bitmap后，可以开始搞事情了</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Native层的回调代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">jclass clz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;me/oogh/xplayer/JNIHelper&quot;</span>);</span><br><span class="line">jmethodID method = env-&gt;<span class="built_in">GetMethodID</span>(clz, <span class="string">&quot;onReceived&quot;</span>, <span class="string">&quot;(Landroid/graphics/Bitmap;)V&quot;</span>);</span><br><span class="line">env-&gt;<span class="built_in">CallVoidMethod</span>(obj, method, bitmap);</span><br></pre></td></tr></table></figure><h2 id="AndroidBitmap-lockPixels-方法"><a href="#AndroidBitmap-lockPixels-方法" class="headerlink" title="AndroidBitmap_lockPixels 方法"></a>AndroidBitmap_lockPixels 方法</h2><p>以上就是整个文章的内容，使用起来也是 no problem!  但使用过程中遇到的问题就是内存回收的问题，最开始使用的时候并没有过多关注JNI层 <code>AndroidBitmap_lockPixels</code>这个方法，以至于后来我在处理Bitmap内存回收上遇到了一些问题。 <code>AndroidBitmap_lockPixels</code> 与之对应还有一个   <code>AndroidBitmap_unlockPixels</code></p><p><code>AndroidBitmap_lockPixels</code> “函数作用锁定了像素缓存以确保像素的内存不会被移动”，这句话看起来好像挺难理解，但是我们在 Java层面有与之类似的操作，那就是 <code>SurfaceHolder.lockCanvas()</code>，还记得我们在绘制的过程中需要先使用 <code>lockCanvas</code> 锁定画布，返回的画布对象<code>Canvas</code>然后使用 <code>unlockCanvasAndPost(Canvas canvas)</code> 结束锁定画布，并提交改变。<code>AndroidBitmap_lockPixels</code> 与  <code>AndroidBitmap_unlockPixels</code>做的是类似的事情，都是锁住一块内存区域，保证其安全。</p><p>回到上面说的内存回收的问题，由于自己使用失误，流程大概是这样：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">AndroidBitmap_lockPixels</span>(env, bitmap, &amp;addr_pixels);</span><br><span class="line"><span class="comment">//在两者之间，将生成好的 Bitmap Obj 回调到Java层</span></span><br><span class="line"><span class="built_in">AndroidBitmap_unlockPixels</span>(env, bitmap);</span><br></pre></td></tr></table></figure><p>然后在Java层有这样的逻辑：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceived</span><span class="params">(Bitmap bitmap)</span>&#123;</span><br><span class="line">    <span class="comment">//……一些业务逻辑</span></span><br><span class="line">    <span class="comment">//我们习惯性对bitmap使用recycle对其数据进行回收……</span></span><br><span class="line">    bitmap.recycle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我发现使用了 <code>bitmap.recycle()</code>与不使用，内存中 Native区域仍然占了一大部分，后来在<code>AndroidBitmap_lockPixels</code>的注释才发现不对的地方：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a java bitmap object, attempt to lock the pixel address.</span></span><br><span class="line"><span class="comment"> * Locking will ensure that the memory for the pixels will not move</span></span><br><span class="line"><span class="comment"> * until the unlockPixels call, and ensure that, if the pixels had been</span></span><br><span class="line"><span class="comment"> * previously purged, they will have been restored.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If this call succeeds, it must be balanced by a call to</span></span><br><span class="line"><span class="comment"> * AndroidBitmap_unlockPixels, after which time the address of the pixels should</span></span><br><span class="line"><span class="comment"> * no longer be used.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If this succeeds, *addrPtr will be set to the pixel address. If the call</span></span><br><span class="line"><span class="comment"> * fails, addrPtr will be ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">AndroidBitmap_lockPixels</span><span class="params">(JNIEnv* env, jobject jbitmap, <span class="type">void</span>** addrPtr)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><p><strong>if the pixels had been previously purged, they will have been restored.</strong></p></blockquote><p>也就是说在<code>AndroidBitmap_unlockPixels</code> 调用之前，如果像素数据被销毁了，他们会被恢复！至于为什么会被恢复，这个就需要之后再进行研究了。</p><p>后来对逻辑进行更改，将 Bitmap.recycle()的逻辑移动到 AndroidBitmap_unlockPixels之后。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前很多工作都设计到使用 FFmpeg 对视频帧进行获取，在 FFmpeg 解码视频文件获取到帧数据结构是 &lt;code&gt;AVFrame&lt;/code&gt;, 对于应用层我们没有办法直接拿到进行数据处理，需要转换为 Android 平台特有的处理结构。而我是需要对应的帧图片数据，那</summary>
      
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/categories/technology/"/>
    
    
    <category term="FFmpeg" scheme="http://vompom.github.com/tags/FFmpeg/"/>
    
    <category term="音视频" scheme="http://vompom.github.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>记一次Android依赖库版本不兼容的问题处理过程</title>
    <link href="http://vompom.github.com/2022/03/31/%E8%AE%B0%E4%B8%80%E6%AC%A1Android%E4%BE%9D%E8%B5%96-wire-%E4%BD%8E%E7%89%88%E6%9C%AC%E4%B8%8E%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://vompom.github.com/2022/03/31/%E8%AE%B0%E4%B8%80%E6%AC%A1Android%E4%BE%9D%E8%B5%96-wire-%E4%BD%8E%E7%89%88%E6%9C%AC%E4%B8%8E%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</id>
    <published>2022-03-31T02:47:00.000Z</published>
    <updated>2025-05-20T11:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前我们项目组开发了相关 SDK 并集成到 App 工程中进行测试，发现业务App中的 <a href="https://github.com/square/wire">wire</a> (一个与 protobuf 相关的库)，版本为1.5.1，而 SDK 中所依赖的版本为3.7.0，两者之间相互不兼容。如果要让业务升级到高版本的库的话，初步排查低版本中使用的某个类而高版本中已废除，单纯的就这一个类涉及100多个文件，工程量太大了，SDK中亦然。所以不能通过简单地更改版本号来解决版本冲突问题，最后经过一系列的尝试，终于解决了该问题。</p><h2 id="分析和处理"><a href="#分析和处理" class="headerlink" title="分析和处理"></a>分析和处理</h2><p>最初集成 SDK 到 App 运行时发现报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Failed resolution of: Lcom/squareup/wire/ProtoEnum;</span><br></pre></td></tr></table></figure><p>检查代码发现 <code>ProtoEnum</code>位于wire 1.5.1中，打印依赖树发现App中的库被SDK所依赖的库给覆盖掉了，自动升级到新的版本，但新的版本又不存在该类。</p><blockquote><p><code>|    |    |    \--- com.squareup.wire:wire-runtime:1.5.1 -&gt; 3.7.0</code></p></blockquote><p>以为只是简单的版本冲突的问题，尝试解冲突，我们知道处理Android版本冲突主要使用 <code>exclude``transitive</code> <code>force</code> gralde 处理依赖的关键字解决依赖冲突，但我无论使用什么操作整个项目中所打出来的Apk只存在一个版本：要么1.5.1要么3.7.0，对比两个库：</p><img src="https://cdn.julis.wang/blog/img/acb66f45a28a458fb4d00ae03cecafc1.png"><p>发现高版本相比于低版本多了太多的类，以及一部分类进行了改名，至此我们可以得出一个结论：<strong>wire库高版本(3.7.1)与低版本(1.5.1)完全不兼容。</strong> 现在摆在我面前有两条路可以走：</p><p>一、手动升级App中的低版本</p><p>二、手动降级SDK中的高版本</p><p>对于第一种，发现到App中大量文件使用 Wire 中的 <code>Message</code> 类，虽然两个版本都有<code>Message</code>类，但是两者“今非昔比”，涉及到太多的方法改动，而 <code>Message</code> 类在App有100+文件使用，如果一个个改过去，可能XXXXXXXX了。</p><p>两个库之间有这么大的差异，甚至1.X版本不支持kotlin，而SDK中大量代码都是使用的 Kotlin，那么第二种降低SDK的高版本也自然变得不太现实。</p><p>向大佬们请教，有被指点到：<strong>是否可以通过 ffat-aar+混淆的方式将 wire库跟SDK合并打包到一起？</strong></p><p>！！大佬毕竟大佬，我的脑子瞬间有一种叮咚的感觉，其实这种方式也就是将SDK变向的重命名，将两个不同的版本库进行“共存”，现在要做的就是：<strong>将 SDK 中的高版本的库包名给改掉，以达到两个不同版本库之间的兼容。</strong></p><p>说干就干，打好了库之后运行发现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: Duplicate class a.a.a.a found in modules</span><br><span class="line">etified-target-SDK-0.0.1.11-SNAPSHOT-runtime.jar</span><br><span class="line">and ctlogin-0.4.23.04_lol_47-runtime.jar</span><br><span class="line">(clogin-sso.clogin:0.4.23.04_lol_47)</span><br></pre></td></tr></table></figure><img src="https://cdn.julis.wang/blog/img/41a8f2543baa48c5bf6b5a363cde6a9b.png"><p>我当时内心就是这个表情,心想：难道<code>wtlogin</code> 大佬们也是想采用这种方式来避免一些库的兼容问题？这问题不大，因为混淆默认从a-z进行命名，只要给混淆再配一些参数就能避免掉这个问题，于是加上以下参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-obfuscationdictionary obfucationdictionary.txt</span><br><span class="line">-classobfuscationdictionary obfucationdictionary.txt</span><br><span class="line">-packageobfuscationdictionary obfucationdictionary.txt</span><br></pre></td></tr></table></figure><p>当再次运行的时候，发现又报错了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Failed resolution of: Lcom/squareup/wire/ProtoAdapter;</span><br></pre></td></tr></table></figure><p>？？？<code>ProtoAdapter</code> 是属于3.7.0高版本的类，不是已经被混淆了么？为什么还会报这个错？</p><img src="https://cdn.julis.wang/blog/img/32adc8ebefda4dfea050974c533fb4de.png"><p>难道是使用混淆的方式是不行的？于是继续搜寻解决方案，了解到使用 <a href="https://github.com/shevek/jarjar">jarjar.jar</a>可以对包重新命名打包，尝试了一下运行，依然报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Failed resolution of: Lcom/squareup/wire/ProtoAdapter;</span><br></pre></td></tr></table></figure><p>到底哪里还有 使用 <code>com/squareup/wire/ProtoAdapter</code>呢？使用<code>jd-gui</code>对重新打好的 jar 包的内容进行搜索.</p><img src="https://cdn.julis.wang/blog/img/14e36a6fa7da4feda26779f83b4e9b63.png"><p>果然有搜到相应的内容，这是一个字符串，第一反应就是反射。我瞬间明白了，这是一串字符串并且是写死的，回到App中来，如下图所示：<code>wire</code>库的作用是将 .proto 文件生成咱们通常所说的 Model 类，下图的<code>AudioEffect</code>就是通过 .proto 文件中定义好的属性生成的。</p><img src="https://cdn.julis.wang/blog/img/1512ded69e1248ac9e19ef5a4b995c63.png"><p>那该怎么办呢？就一个依赖库版本冲突的问题，常规的方法就这些呀，难道真的要肝一波了么？</p><img src="https://cdn.julis.wang/blog/img/a5011fe0e772443f8e00fbbdd0b7f09f.png"><p>到这里我们大概知道是怎么回事了，我们的目标很简单，就是改一个包名，但是包又在  <code>wire-gradle-plugin</code> 插件中，所以改wire的运行库当然是不行的……</p><p>那还有一个终极办法：<strong>改源码</strong>。</p><p>说干就干，直接拉 <a href="https://github.com/square/wire">wire</a> 源码</p><img src="https://cdn.julis.wang/blog/img/2dab42479a29453391b68a979008ae31.png"><p>，主要关注以下几个目录：<br><code>wire-gradle-plugin</code>: wire-gradle 插件的主要源码<br><code>wire-compiler</code>: wire编译.proto相关的操作<br><code>wire-runtime</code>: wire运行时所需要的类<br>接下来要做的就是 <strong>右键+rename</strong>,重新编译打包，也……就1000多处改动</p><img src="https://cdn.julis.wang/blog/img/daac3e4f19db4e5c9b8d1354ab65b7b7.png"><p>打完包之后发现整个插件生成出来类的包还是包含<code>&quot;com.squareup.wire.ProtoAdapter&quot;</code>，我的目标是生成：<code>&quot;com.squareup.xxxx_.ProtoAdapter&quot;</code>，跟wire-plguin-gradle的源码，发现有这么一处：</p><img src="https://cdn.julis.wang/blog/img/fed8bf2812474044b6344ec7d0acf290.png"><p>它回在运行中重新从仓库中拉取<code>com.squareup.wire:wire-runtime:3.7.0</code>，于是需要对整个<code> wire-runtime</code>也重新打包，最终生成了一系列jar包如下所示：然后将其作为 plugin </p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">classpath files(<span class="string">&#x27;wire-profiles-3.7.0.jar&#x27;</span>)</span><br><span class="line">classpath files(<span class="string">&#x27;wire-compiler-3.7.0.jar&#x27;</span>)</span><br><span class="line">classpath files(<span class="string">&#x27;wire-kotlin-generator-3.7.0.jar&#x27;</span>)</span><br><span class="line">classpath files(<span class="string">&#x27;wire-gradle-plugin-3.7.0.jar&#x27;</span>)</span><br><span class="line">classpath files(<span class="string">&#x27;wire-schema-jvm-3.7.0.jar&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后再将运行时所需要的类跟随SDK一起打包</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation files(<span class="string">&#x27;src/libs/wire-runtime-jvm-3.7.0.jar&#x27;</span>)</span><br></pre></td></tr></table></figure><p>重新编译打包，run、install 成功运行！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、整个一系列操作，让我又学到了很多平时没有接触过的东西，比如：jarjar.jar，这个库对一些比较小的库存，或者说轻量级的库重新命名会比较快速的解决。本文中所述的 wire 库实在是太复杂，只能从源码层面进行操作了。还有就是在看 wire工程源码的时候又发现了一个<strong>shadowJar</strong>(利用gradle shadowjar构建包含依赖的JAR包)，之前一直用 ffat-aar打入的依赖，不知道这个插件怎么样，后面学习学习试试。</p><p>2、在改整个源码之前，其实内心是比较抗拒的，因为一般改源码这种操作都是比较危险，或者更耗时，有可能就算改完了，也不一定能正常运行，一度想放弃，但实在是不想去改业务中那100+的文件，既然一条路走到黑，还是走下去吧，让我明白一定要坚持下去，不要放弃。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此前我们项目组开发了相关 SDK 并集成到 App 工程中进行测试，发现业务App中的 &lt;a href=&quot;https://github.com/square/wire&quot;&gt;wire&lt;/a&gt; (一个与 protobuf 相关的库)，版本为1.5.1，而 SDK 中所依赖的版本为</summary>
      
    
    
    
    
    <category term="技术文章" scheme="http://vompom.github.com/tags/technology/"/>
    
  </entry>
  
</feed>
